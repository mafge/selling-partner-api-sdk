/*
 * Selling Partner API for Data Kiosk
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2023-11-15
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.datakiosk.v2023_11_15;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.datakiosk.v2023_11_15.CreateQueryResponse;
import software.amazon.spapi.models.datakiosk.v2023_11_15.CreateQuerySpecification;
import software.amazon.spapi.models.datakiosk.v2023_11_15.GetDocumentResponse;
import software.amazon.spapi.models.datakiosk.v2023_11_15.GetQueriesResponse;
import software.amazon.spapi.models.datakiosk.v2023_11_15.Query;

public class QueriesApiTest {

  private static String endpoint = "http://localhost:3000";
  private static String authEndpoint = "http://localhost:3000/auth/o2/token";
  private static LWAAuthorizationCredentials credentials =
      LWAAuthorizationCredentials.builder()
          .clientId("clientId")
          .clientSecret("clientSecret")
          .refreshToken("refreshToken")
          .endpoint(authEndpoint)
          .build();

  private final QueriesApi api =
      new QueriesApi.Builder().lwaAuthorizationCredentials(credentials).endpoint(endpoint).build();

  private final EasyRandom easyRandom =
      new EasyRandom(
          new EasyRandomParameters()
              .randomize(OffsetDateTime.class, OffsetDateTime::now)
              .randomize(LocalDate.class, LocalDate::now)
              .collectionSizeRange(1, 2));

  @Test
  public void cancelQueryTest() throws Exception {
    instructBackendMock("cancelQuery", "204");
    String queryId = easyRandom.nextObject(String.class);

    api.cancelQueryWithHttpInfo(queryId);
  }

  @Test
  public void createQueryTest() throws Exception {
    instructBackendMock("createQuery", "202");
    CreateQuerySpecification body = easyRandom.nextObject(CreateQuerySpecification.class);

    ApiResponse<CreateQueryResponse> response = api.createQueryWithHttpInfo(body);

    assertEquals(202, response.getStatusCode());
    assertValidResponsePayload(202, response.getData());
  }

  @Test
  public void getDocumentTest() throws Exception {
    instructBackendMock("getDocument", "200");
    String documentId = easyRandom.nextObject(String.class);

    ApiResponse<GetDocumentResponse> response = api.getDocumentWithHttpInfo(documentId);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getQueriesTest() throws Exception {
    instructBackendMock("getQueries", "200");

    ApiResponse<GetQueriesResponse> response =
        api.getQueriesWithHttpInfo(null, null, null, null, null);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getQueryTest() throws Exception {
    instructBackendMock("getQuery", "200");
    String queryId = easyRandom.nextObject(String.class);

    ApiResponse<Query> response = api.getQueryWithHttpInfo(queryId);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  private void instructBackendMock(String response, String code) throws Exception {
    HttpRequest request =
        HttpRequest.newBuilder()
            .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
            .POST(HttpRequest.BodyPublishers.noBody())
            .build();

    HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
  }

  private static void assertValidResponsePayload(int statusCode, Object body) {
    if (statusCode != 204) assertNotNull(body);
  }
}
