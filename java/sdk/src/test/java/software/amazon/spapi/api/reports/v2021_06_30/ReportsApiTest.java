/*
 * Selling Partner API for Reports
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.reports.v2021_06_30;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import java.util.stream.Collectors;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.reports.v2021_06_30.CreateReportResponse;
import software.amazon.spapi.models.reports.v2021_06_30.CreateReportScheduleResponse;
import software.amazon.spapi.models.reports.v2021_06_30.CreateReportScheduleSpecification;
import software.amazon.spapi.models.reports.v2021_06_30.CreateReportSpecification;
import software.amazon.spapi.models.reports.v2021_06_30.GetReportsResponse;
import software.amazon.spapi.models.reports.v2021_06_30.Report;
import software.amazon.spapi.models.reports.v2021_06_30.ReportDocument;
import software.amazon.spapi.models.reports.v2021_06_30.ReportSchedule;
import software.amazon.spapi.models.reports.v2021_06_30.ReportScheduleList;

public class ReportsApiTest {

    private static String endpoint = "http://localhost:3000";
    private static String authEndpoint = "http://localhost:3000/auth/o2/token";
    private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
            .clientId("clientId")
            .clientSecret("clientSecret")
            .refreshToken("refreshToken")
            .endpoint(authEndpoint)
            .build();

    private final ReportsApi api = new ReportsApi.Builder()
            .lwaAuthorizationCredentials(credentials)
            .endpoint(endpoint)
            .build();

    private final EasyRandom easyRandom = new EasyRandom(new EasyRandomParameters()
            .randomize(OffsetDateTime.class, OffsetDateTime::now)
            .randomize(LocalDate.class, LocalDate::now)
            .collectionSizeRange(1, 2));

    @Test
    public void cancelReportTest() throws Exception {
        instructBackendMock("cancelReport", "200");
        String reportId = easyRandom.nextObject(String.class);

        api.cancelReportWithHttpInfo(reportId);
    }

    @Test
    public void cancelReportScheduleTest() throws Exception {
        instructBackendMock("cancelReportSchedule", "200");
        String reportScheduleId = easyRandom.nextObject(String.class);

        api.cancelReportScheduleWithHttpInfo(reportScheduleId);
    }

    @Test
    public void createReportTest() throws Exception {
        instructBackendMock("createReport", "202");
        CreateReportSpecification body = easyRandom.nextObject(CreateReportSpecification.class);

        ApiResponse<CreateReportResponse> response = api.createReportWithHttpInfo(body);

        assertEquals(202, response.getStatusCode());
        assertValidResponsePayload(202, response.getData());
    }

    @Test
    public void createReportScheduleTest() throws Exception {
        instructBackendMock("createReportSchedule", "201");
        CreateReportScheduleSpecification body = easyRandom.nextObject(CreateReportScheduleSpecification.class);

        ApiResponse<CreateReportScheduleResponse> response = api.createReportScheduleWithHttpInfo(body);

        assertEquals(201, response.getStatusCode());
        assertValidResponsePayload(201, response.getData());
    }

    @Test
    public void getReportTest() throws Exception {
        instructBackendMock("getReport", "200");
        String reportId = easyRandom.nextObject(String.class);

        ApiResponse<Report> response = api.getReportWithHttpInfo(reportId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getReportDocumentTest() throws Exception {
        instructBackendMock("getReportDocument", "200");
        String reportDocumentId = easyRandom.nextObject(String.class);

        ApiResponse<ReportDocument> response = api.getReportDocumentWithHttpInfo(reportDocumentId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getReportScheduleTest() throws Exception {
        instructBackendMock("getReportSchedule", "200");
        String reportScheduleId = easyRandom.nextObject(String.class);

        ApiResponse<ReportSchedule> response = api.getReportScheduleWithHttpInfo(reportScheduleId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getReportSchedulesTest() throws Exception {
        instructBackendMock("getReportSchedules", "200");
        List<String> reportTypes = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<ReportScheduleList> response = api.getReportSchedulesWithHttpInfo(reportTypes);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getReportsTest() throws Exception {
        instructBackendMock("getReports", "200");

        ApiResponse<GetReportsResponse> response = api.getReportsWithHttpInfo(null, null, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
                .POST(HttpRequest.BodyPublishers.noBody())
                .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if (statusCode != 204) assertNotNull(body);
    }
}
