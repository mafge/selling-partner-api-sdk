/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * OpenAPI spec version: 2024-05-09
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.awd.v2024_05_09;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.awd.v2024_05_09.InboundEligibility;
import software.amazon.spapi.models.awd.v2024_05_09.InboundOrder;
import software.amazon.spapi.models.awd.v2024_05_09.InboundOrderCreationData;
import software.amazon.spapi.models.awd.v2024_05_09.InboundOrderReference;
import software.amazon.spapi.models.awd.v2024_05_09.InboundPackages;
import software.amazon.spapi.models.awd.v2024_05_09.InboundShipment;
import software.amazon.spapi.models.awd.v2024_05_09.InventoryListing;
import software.amazon.spapi.models.awd.v2024_05_09.ShipmentLabels;
import software.amazon.spapi.models.awd.v2024_05_09.ShipmentListing;
import software.amazon.spapi.models.awd.v2024_05_09.TransportationDetails;

public class AwdApiTest {

  private static String endpoint = "http://localhost:3000";
  private static String authEndpoint = "http://localhost:3000/auth/o2/token";
  private static LWAAuthorizationCredentials credentials =
      LWAAuthorizationCredentials.builder()
          .clientId("clientId")
          .clientSecret("clientSecret")
          .refreshToken("refreshToken")
          .endpoint(authEndpoint)
          .build();

  private final AwdApi api =
      new AwdApi.Builder().lwaAuthorizationCredentials(credentials).endpoint(endpoint).build();

  private final EasyRandom easyRandom =
      new EasyRandom(
          new EasyRandomParameters()
              .randomize(OffsetDateTime.class, OffsetDateTime::now)
              .randomize(LocalDate.class, LocalDate::now)
              .collectionSizeRange(1, 2));

  @Test
  public void cancelInboundTest() throws Exception {
    instructBackendMock("cancelInbound", "204");
    String orderId = easyRandom.nextObject(String.class);

    api.cancelInboundWithHttpInfo(orderId);
  }

  @Test
  public void checkInboundEligibilityTest() throws Exception {
    instructBackendMock("checkInboundEligibility", "200");
    InboundPackages body = easyRandom.nextObject(InboundPackages.class);

    ApiResponse<InboundEligibility> response = api.checkInboundEligibilityWithHttpInfo(body);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void confirmInboundTest() throws Exception {
    instructBackendMock("confirmInbound", "204");
    String orderId = easyRandom.nextObject(String.class);

    api.confirmInboundWithHttpInfo(orderId);
  }

  @Test
  public void createInboundTest() throws Exception {
    instructBackendMock("createInbound", "201");
    InboundOrderCreationData body = easyRandom.nextObject(InboundOrderCreationData.class);

    ApiResponse<InboundOrderReference> response = api.createInboundWithHttpInfo(body);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void getInboundTest() throws Exception {
    instructBackendMock("getInbound", "200");
    String orderId = easyRandom.nextObject(String.class);

    ApiResponse<InboundOrder> response = api.getInboundWithHttpInfo(orderId);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getInboundShipmentTest() throws Exception {
    instructBackendMock("getInboundShipment", "200");
    String shipmentId = easyRandom.nextObject(String.class);

    ApiResponse<InboundShipment> response = api.getInboundShipmentWithHttpInfo(shipmentId, null);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getInboundShipmentLabelsTest() throws Exception {
    instructBackendMock("getInboundShipmentLabels", "200");
    String shipmentId = easyRandom.nextObject(String.class);

    ApiResponse<ShipmentLabels> response =
        api.getInboundShipmentLabelsWithHttpInfo(shipmentId, null, null);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void listInboundShipmentsTest() throws Exception {
    instructBackendMock("listInboundShipments", "200");

    ApiResponse<ShipmentListing> response =
        api.listInboundShipmentsWithHttpInfo(null, null, null, null, null, null, null);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void listInventoryTest() throws Exception {
    instructBackendMock("listInventory", "200");

    ApiResponse<InventoryListing> response =
        api.listInventoryWithHttpInfo(null, null, null, null, null);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void updateInboundTest() throws Exception {
    instructBackendMock("updateInbound", "204");
    InboundOrder body = easyRandom.nextObject(InboundOrder.class);
    String orderId = easyRandom.nextObject(String.class);

    api.updateInboundWithHttpInfo(body, orderId);
  }

  @Test
  public void updateInboundShipmentTransportDetailsTest() throws Exception {
    instructBackendMock("updateInboundShipmentTransportDetails", "204");
    TransportationDetails body = easyRandom.nextObject(TransportationDetails.class);
    String shipmentId = easyRandom.nextObject(String.class);

    api.updateInboundShipmentTransportDetailsWithHttpInfo(body, shipmentId);
  }

  private void instructBackendMock(String response, String code) throws Exception {
    HttpRequest request =
        HttpRequest.newBuilder()
            .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
            .POST(HttpRequest.BodyPublishers.noBody())
            .build();

    HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
  }

  private static void assertValidResponsePayload(int statusCode, Object body) {
    if (statusCode != 204) assertNotNull(body);
  }
}
