/*
 * Selling Partner API for Easy Ship
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * OpenAPI spec version: 2022-03-23
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.easyship.v2022_03_23;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.easyship.v2022_03_23.CreateScheduledPackageRequest;
import software.amazon.spapi.models.easyship.v2022_03_23.CreateScheduledPackagesRequest;
import software.amazon.spapi.models.easyship.v2022_03_23.CreateScheduledPackagesResponse;
import software.amazon.spapi.models.easyship.v2022_03_23.ListHandoverSlotsResponse;
import software.amazon.spapi.models.easyship.v2022_03_23.ModelPackage;
import software.amazon.spapi.models.easyship.v2022_03_23.Packages;

public class EasyShipApiTest {

  private static String endpoint = "http://localhost:3000";
  private static String authEndpoint = "http://localhost:3000/auth/o2/token";
  private static LWAAuthorizationCredentials credentials =
      LWAAuthorizationCredentials.builder()
          .clientId("clientId")
          .clientSecret("clientSecret")
          .refreshToken("refreshToken")
          .endpoint(authEndpoint)
          .build();

  private final EasyShipApi api =
      new EasyShipApi.Builder().lwaAuthorizationCredentials(credentials).endpoint(endpoint).build();

  private final EasyRandom easyRandom =
      new EasyRandom(
          new EasyRandomParameters()
              .randomize(OffsetDateTime.class, OffsetDateTime::now)
              .randomize(LocalDate.class, LocalDate::now)
              .collectionSizeRange(1, 2));

  @Test
  public void createScheduledPackageTest() throws Exception {
    instructBackendMock("createScheduledPackage", "200");
    CreateScheduledPackageRequest body = easyRandom.nextObject(CreateScheduledPackageRequest.class);

    ApiResponse<ModelPackage> response = api.createScheduledPackageWithHttpInfo(body);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void createScheduledPackageBulkTest() throws Exception {
    instructBackendMock("createScheduledPackageBulk", "200");
    CreateScheduledPackagesRequest body =
        easyRandom.nextObject(CreateScheduledPackagesRequest.class);

    ApiResponse<CreateScheduledPackagesResponse> response =
        api.createScheduledPackageBulkWithHttpInfo(body);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getScheduledPackageTest() throws Exception {
    instructBackendMock("getScheduledPackage", "200");
    String amazonOrderId = easyRandom.nextObject(String.class);
    String marketplaceId = easyRandom.nextObject(String.class);

    ApiResponse<ModelPackage> response =
        api.getScheduledPackageWithHttpInfo(amazonOrderId, marketplaceId);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void listHandoverSlotsTest() throws Exception {
    instructBackendMock("listHandoverSlots", "200");

    ApiResponse<ListHandoverSlotsResponse> response = api.listHandoverSlotsWithHttpInfo(null);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void updateScheduledPackagesTest() throws Exception {
    instructBackendMock("updateScheduledPackages", "200");

    ApiResponse<Packages> response = api.updateScheduledPackagesWithHttpInfo(null);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  private void instructBackendMock(String response, String code) throws Exception {
    HttpRequest request =
        HttpRequest.newBuilder()
            .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
            .POST(HttpRequest.BodyPublishers.noBody())
            .build();

    HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
  }

  private static void assertValidResponsePayload(int statusCode, Object body) {
    if (statusCode != 204) assertNotNull(body);
  }
}
