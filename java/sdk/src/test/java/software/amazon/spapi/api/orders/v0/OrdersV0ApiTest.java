/*
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.orders.v0;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import java.util.stream.Collectors;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.orders.v0.ConfirmShipmentRequest;
import software.amazon.spapi.models.orders.v0.GetOrderAddressResponse;
import software.amazon.spapi.models.orders.v0.GetOrderBuyerInfoResponse;
import software.amazon.spapi.models.orders.v0.GetOrderItemsBuyerInfoResponse;
import software.amazon.spapi.models.orders.v0.GetOrderItemsResponse;
import software.amazon.spapi.models.orders.v0.GetOrderRegulatedInfoResponse;
import software.amazon.spapi.models.orders.v0.GetOrderResponse;
import software.amazon.spapi.models.orders.v0.GetOrdersResponse;
import software.amazon.spapi.models.orders.v0.UpdateVerificationStatusRequest;

public class OrdersV0ApiTest {

  private static String endpoint = "http://localhost:3000";
  private static String authEndpoint = "http://localhost:3000/auth/o2/token";
  private static LWAAuthorizationCredentials credentials =
      LWAAuthorizationCredentials.builder()
          .clientId("clientId")
          .clientSecret("clientSecret")
          .refreshToken("refreshToken")
          .endpoint(authEndpoint)
          .build();

  private final OrdersV0Api api =
      new OrdersV0Api.Builder().lwaAuthorizationCredentials(credentials).endpoint(endpoint).build();

  private final EasyRandom easyRandom =
      new EasyRandom(
          new EasyRandomParameters()
              .randomize(OffsetDateTime.class, OffsetDateTime::now)
              .randomize(LocalDate.class, LocalDate::now)
              .collectionSizeRange(1, 2));

  @Test
  public void confirmShipmentTest() throws Exception {
    instructBackendMock("confirmShipment", "204");
    ConfirmShipmentRequest body = easyRandom.nextObject(ConfirmShipmentRequest.class);
    String orderId = easyRandom.nextObject(String.class);

    api.confirmShipmentWithHttpInfo(body, orderId);
  }

  @Test
  public void getOrderTest() throws Exception {
    instructBackendMock("getOrder", "200");
    String orderId = easyRandom.nextObject(String.class);

    ApiResponse<GetOrderResponse> response = api.getOrderWithHttpInfo(orderId);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getOrderAddressTest() throws Exception {
    instructBackendMock("getOrderAddress", "200");
    String orderId = easyRandom.nextObject(String.class);

    ApiResponse<GetOrderAddressResponse> response = api.getOrderAddressWithHttpInfo(orderId);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getOrderBuyerInfoTest() throws Exception {
    instructBackendMock("getOrderBuyerInfo", "200");
    String orderId = easyRandom.nextObject(String.class);

    ApiResponse<GetOrderBuyerInfoResponse> response = api.getOrderBuyerInfoWithHttpInfo(orderId);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getOrderItemsTest() throws Exception {
    instructBackendMock("getOrderItems", "200");
    String orderId = easyRandom.nextObject(String.class);

    ApiResponse<GetOrderItemsResponse> response = api.getOrderItemsWithHttpInfo(orderId, null);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getOrderItemsBuyerInfoTest() throws Exception {
    instructBackendMock("getOrderItemsBuyerInfo", "200");
    String orderId = easyRandom.nextObject(String.class);

    ApiResponse<GetOrderItemsBuyerInfoResponse> response =
        api.getOrderItemsBuyerInfoWithHttpInfo(orderId, null);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getOrderRegulatedInfoTest() throws Exception {
    instructBackendMock("getOrderRegulatedInfo", "200");
    String orderId = easyRandom.nextObject(String.class);

    ApiResponse<GetOrderRegulatedInfoResponse> response =
        api.getOrderRegulatedInfoWithHttpInfo(orderId);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getOrdersTest() throws Exception {
    instructBackendMock("getOrders", "200");
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<GetOrdersResponse> response =
        api.getOrdersWithHttpInfo(
            marketplaceIds,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void updateVerificationStatusTest() throws Exception {
    instructBackendMock("updateVerificationStatus", "204");
    UpdateVerificationStatusRequest body =
        easyRandom.nextObject(UpdateVerificationStatusRequest.class);
    String orderId = easyRandom.nextObject(String.class);

    api.updateVerificationStatusWithHttpInfo(body, orderId);
  }

  private void instructBackendMock(String response, String code) throws Exception {
    HttpRequest request =
        HttpRequest.newBuilder()
            .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
            .POST(HttpRequest.BodyPublishers.noBody())
            .build();

    HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
  }

  private static void assertValidResponsePayload(int statusCode, Object body) {
    if (statusCode != 204) assertNotNull(body);
  }
}
