/*
 * Selling Partner API for Feeds
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2021-06-30
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.feeds.v2021_06_30;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.feeds.v2021_06_30.CreateFeedDocumentResponse;
import software.amazon.spapi.models.feeds.v2021_06_30.CreateFeedDocumentSpecification;
import software.amazon.spapi.models.feeds.v2021_06_30.CreateFeedResponse;
import software.amazon.spapi.models.feeds.v2021_06_30.CreateFeedSpecification;
import software.amazon.spapi.models.feeds.v2021_06_30.Feed;
import software.amazon.spapi.models.feeds.v2021_06_30.FeedDocument;
import software.amazon.spapi.models.feeds.v2021_06_30.GetFeedsResponse;

public class FeedsApiTest {

    private static String endpoint = "http://localhost:3000";
    private static String authEndpoint = "http://localhost:3000/auth/o2/token";
    private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
            .clientId("clientId")
            .clientSecret("clientSecret")
            .refreshToken("refreshToken")
            .endpoint(authEndpoint)
            .build();

    private final FeedsApi api = new FeedsApi.Builder()
            .lwaAuthorizationCredentials(credentials)
            .endpoint(endpoint)
            .build();

    private final EasyRandom easyRandom = new EasyRandom(new EasyRandomParameters()
            .randomize(OffsetDateTime.class, OffsetDateTime::now)
            .randomize(LocalDate.class, LocalDate::now)
            .collectionSizeRange(1, 2));

    @Test
    public void cancelFeedTest() throws Exception {
        instructBackendMock("cancelFeed", "200");
        String feedId = easyRandom.nextObject(String.class);

        api.cancelFeedWithHttpInfo(feedId);
    }

    @Test
    public void createFeedTest() throws Exception {
        instructBackendMock("createFeed", "202");
        CreateFeedSpecification body = easyRandom.nextObject(CreateFeedSpecification.class);

        ApiResponse<CreateFeedResponse> response = api.createFeedWithHttpInfo(body);

        assertEquals(202, response.getStatusCode());
        assertValidResponsePayload(202, response.getData());
    }

    @Test
    public void createFeedDocumentTest() throws Exception {
        instructBackendMock("createFeedDocument", "201");
        CreateFeedDocumentSpecification body = easyRandom.nextObject(CreateFeedDocumentSpecification.class);

        ApiResponse<CreateFeedDocumentResponse> response = api.createFeedDocumentWithHttpInfo(body);

        assertEquals(201, response.getStatusCode());
        assertValidResponsePayload(201, response.getData());
    }

    @Test
    public void getFeedTest() throws Exception {
        instructBackendMock("getFeed", "200");
        String feedId = easyRandom.nextObject(String.class);

        ApiResponse<Feed> response = api.getFeedWithHttpInfo(feedId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getFeedDocumentTest() throws Exception {
        instructBackendMock("getFeedDocument", "200");
        String feedDocumentId = easyRandom.nextObject(String.class);

        ApiResponse<FeedDocument> response = api.getFeedDocumentWithHttpInfo(feedDocumentId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getFeedsTest() throws Exception {
        instructBackendMock("getFeeds", "200");

        ApiResponse<GetFeedsResponse> response = api.getFeedsWithHttpInfo(null, null, null, null, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
                .POST(HttpRequest.BodyPublishers.noBody())
                .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if (statusCode != 204) assertNotNull(body);
    }
}
