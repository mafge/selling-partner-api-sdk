/*
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.fulfillment.outbound.v2020_07_01;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.CancelFulfillmentOrderResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentOrderRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentOrderResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentReturnRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentReturnResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetDeliveryOffersRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetDeliveryOffersResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFeatureInventoryResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFeatureSkuResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFeaturesResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFulfillmentOrderResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFulfillmentPreviewRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFulfillmentPreviewResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetPackageTrackingDetailsResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.ListAllFulfillmentOrdersResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.ListReturnReasonCodesResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.SubmitFulfillmentOrderStatusUpdateRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.SubmitFulfillmentOrderStatusUpdateResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.UpdateFulfillmentOrderRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.UpdateFulfillmentOrderResponse;

public class FbaOutboundApiTest {

    private static String endpoint = "http://localhost:3000";
    private static String authEndpoint = "http://localhost:3000/auth/o2/token";
    private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
            .clientId("clientId")
            .clientSecret("clientSecret")
            .refreshToken("refreshToken")
            .endpoint(authEndpoint)
            .build();

    private final FbaOutboundApi api = new FbaOutboundApi.Builder()
            .lwaAuthorizationCredentials(credentials)
            .endpoint(endpoint)
            .build();

    private final EasyRandom easyRandom = new EasyRandom(new EasyRandomParameters()
            .randomize(OffsetDateTime.class, OffsetDateTime::now)
            .randomize(LocalDate.class, LocalDate::now)
            .collectionSizeRange(1, 2));

    @Test
    public void cancelFulfillmentOrderTest() throws Exception {
        instructBackendMock("cancelFulfillmentOrder", "200");
        String sellerFulfillmentOrderId = easyRandom.nextObject(String.class);

        ApiResponse<CancelFulfillmentOrderResponse> response =
                api.cancelFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void createFulfillmentOrderTest() throws Exception {
        instructBackendMock("createFulfillmentOrder", "200");
        CreateFulfillmentOrderRequest body = easyRandom.nextObject(CreateFulfillmentOrderRequest.class);

        ApiResponse<CreateFulfillmentOrderResponse> response = api.createFulfillmentOrderWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void createFulfillmentReturnTest() throws Exception {
        instructBackendMock("createFulfillmentReturn", "200");
        CreateFulfillmentReturnRequest body = easyRandom.nextObject(CreateFulfillmentReturnRequest.class);
        String sellerFulfillmentOrderId = easyRandom.nextObject(String.class);

        ApiResponse<CreateFulfillmentReturnResponse> response =
                api.createFulfillmentReturnWithHttpInfo(body, sellerFulfillmentOrderId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void deliveryOffersTest() throws Exception {
        instructBackendMock("deliveryOffers", "200");
        GetDeliveryOffersRequest body = easyRandom.nextObject(GetDeliveryOffersRequest.class);

        ApiResponse<GetDeliveryOffersResponse> response = api.deliveryOffersWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getFeatureInventoryTest() throws Exception {
        instructBackendMock("getFeatureInventory", "200");
        String marketplaceId = easyRandom.nextObject(String.class);
        String featureName = easyRandom.nextObject(String.class);

        ApiResponse<GetFeatureInventoryResponse> response =
                api.getFeatureInventoryWithHttpInfo(marketplaceId, featureName, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getFeatureSKUTest() throws Exception {
        instructBackendMock("getFeatureSKU", "200");
        String marketplaceId = easyRandom.nextObject(String.class);
        String featureName = easyRandom.nextObject(String.class);
        String sellerSku = easyRandom.nextObject(String.class);

        ApiResponse<GetFeatureSkuResponse> response =
                api.getFeatureSKUWithHttpInfo(marketplaceId, featureName, sellerSku);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getFeaturesTest() throws Exception {
        instructBackendMock("getFeatures", "200");
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<GetFeaturesResponse> response = api.getFeaturesWithHttpInfo(marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getFulfillmentOrderTest() throws Exception {
        instructBackendMock("getFulfillmentOrder", "200");
        String sellerFulfillmentOrderId = easyRandom.nextObject(String.class);

        ApiResponse<GetFulfillmentOrderResponse> response =
                api.getFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getFulfillmentPreviewTest() throws Exception {
        instructBackendMock("getFulfillmentPreview", "200");
        GetFulfillmentPreviewRequest body = easyRandom.nextObject(GetFulfillmentPreviewRequest.class);

        ApiResponse<GetFulfillmentPreviewResponse> response = api.getFulfillmentPreviewWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getPackageTrackingDetailsTest() throws Exception {
        instructBackendMock("getPackageTrackingDetails", "200");
        Integer packageNumber = easyRandom.nextObject(Integer.class);

        ApiResponse<GetPackageTrackingDetailsResponse> response =
                api.getPackageTrackingDetailsWithHttpInfo(packageNumber);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void listAllFulfillmentOrdersTest() throws Exception {
        instructBackendMock("listAllFulfillmentOrders", "200");

        ApiResponse<ListAllFulfillmentOrdersResponse> response = api.listAllFulfillmentOrdersWithHttpInfo(null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void listReturnReasonCodesTest() throws Exception {
        instructBackendMock("listReturnReasonCodes", "200");
        String sellerSku = easyRandom.nextObject(String.class);

        ApiResponse<ListReturnReasonCodesResponse> response =
                api.listReturnReasonCodesWithHttpInfo(sellerSku, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void submitFulfillmentOrderStatusUpdateTest() throws Exception {
        instructBackendMock("submitFulfillmentOrderStatusUpdate", "200");
        SubmitFulfillmentOrderStatusUpdateRequest body =
                easyRandom.nextObject(SubmitFulfillmentOrderStatusUpdateRequest.class);
        String sellerFulfillmentOrderId = easyRandom.nextObject(String.class);

        ApiResponse<SubmitFulfillmentOrderStatusUpdateResponse> response =
                api.submitFulfillmentOrderStatusUpdateWithHttpInfo(body, sellerFulfillmentOrderId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void updateFulfillmentOrderTest() throws Exception {
        instructBackendMock("updateFulfillmentOrder", "200");
        UpdateFulfillmentOrderRequest body = easyRandom.nextObject(UpdateFulfillmentOrderRequest.class);
        String sellerFulfillmentOrderId = easyRandom.nextObject(String.class);

        ApiResponse<UpdateFulfillmentOrderResponse> response =
                api.updateFulfillmentOrderWithHttpInfo(body, sellerFulfillmentOrderId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
                .POST(HttpRequest.BodyPublishers.noBody())
                .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if (statusCode != 204) assertNotNull(body);
    }
}
