/*
 * Selling Partner API for A+ Content Management
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * OpenAPI spec version: 2020-11-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.apluscontent.v2020_11_01;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import java.util.stream.Collectors;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.GetContentDocumentResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.ListContentDocumentAsinRelationsResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentApprovalSubmissionResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentAsinRelationsRequest;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentAsinRelationsResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentRequest;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentSuspendSubmissionResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.SearchContentDocumentsResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.SearchContentPublishRecordsResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.ValidateContentDocumentAsinRelationsResponse;

public class AplusContentApiTest {

    private static String endpoint = "http://localhost:3000";
    private static String authEndpoint = "http://localhost:3000/auth/o2/token";
    private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
            .clientId("clientId")
            .clientSecret("clientSecret")
            .refreshToken("refreshToken")
            .endpoint(authEndpoint)
            .build();

    private final AplusContentApi api = new AplusContentApi.Builder()
            .lwaAuthorizationCredentials(credentials)
            .endpoint(endpoint)
            .build();

    private final EasyRandom easyRandom = new EasyRandom(new EasyRandomParameters()
            .randomize(OffsetDateTime.class, OffsetDateTime::now)
            .randomize(LocalDate.class, LocalDate::now)
            .collectionSizeRange(1, 2));

    @Test
    public void createContentDocumentTest() throws Exception {
        instructBackendMock("createContentDocument", "200");
        PostContentDocumentRequest body = easyRandom.nextObject(PostContentDocumentRequest.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<PostContentDocumentResponse> response = api.createContentDocumentWithHttpInfo(body, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getContentDocumentTest() throws Exception {
        instructBackendMock("getContentDocument", "200");
        String contentReferenceKey = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);
        List<String> includedDataSet = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<GetContentDocumentResponse> response =
                api.getContentDocumentWithHttpInfo(contentReferenceKey, marketplaceId, includedDataSet);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void listContentDocumentAsinRelationsTest() throws Exception {
        instructBackendMock("listContentDocumentAsinRelations", "200");
        String contentReferenceKey = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<ListContentDocumentAsinRelationsResponse> response =
                api.listContentDocumentAsinRelationsWithHttpInfo(contentReferenceKey, marketplaceId, null, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void postContentDocumentApprovalSubmissionTest() throws Exception {
        instructBackendMock("postContentDocumentApprovalSubmission", "200");
        String contentReferenceKey = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<PostContentDocumentApprovalSubmissionResponse> response =
                api.postContentDocumentApprovalSubmissionWithHttpInfo(contentReferenceKey, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void postContentDocumentAsinRelationsTest() throws Exception {
        instructBackendMock("postContentDocumentAsinRelations", "200");
        PostContentDocumentAsinRelationsRequest body =
                easyRandom.nextObject(PostContentDocumentAsinRelationsRequest.class);
        String contentReferenceKey = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<PostContentDocumentAsinRelationsResponse> response =
                api.postContentDocumentAsinRelationsWithHttpInfo(body, contentReferenceKey, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void postContentDocumentSuspendSubmissionTest() throws Exception {
        instructBackendMock("postContentDocumentSuspendSubmission", "200");
        String contentReferenceKey = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<PostContentDocumentSuspendSubmissionResponse> response =
                api.postContentDocumentSuspendSubmissionWithHttpInfo(contentReferenceKey, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void searchContentDocumentsTest() throws Exception {
        instructBackendMock("searchContentDocuments", "200");
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<SearchContentDocumentsResponse> response =
                api.searchContentDocumentsWithHttpInfo(marketplaceId, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void searchContentPublishRecordsTest() throws Exception {
        instructBackendMock("searchContentPublishRecords", "200");
        String marketplaceId = easyRandom.nextObject(String.class);
        String asin = easyRandom.nextObject(String.class);

        ApiResponse<SearchContentPublishRecordsResponse> response =
                api.searchContentPublishRecordsWithHttpInfo(marketplaceId, asin, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void updateContentDocumentTest() throws Exception {
        instructBackendMock("updateContentDocument", "200");
        PostContentDocumentRequest body = easyRandom.nextObject(PostContentDocumentRequest.class);
        String contentReferenceKey = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<PostContentDocumentResponse> response =
                api.updateContentDocumentWithHttpInfo(body, contentReferenceKey, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void validateContentDocumentAsinRelationsTest() throws Exception {
        instructBackendMock("validateContentDocumentAsinRelations", "200");
        PostContentDocumentRequest body = easyRandom.nextObject(PostContentDocumentRequest.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<ValidateContentDocumentAsinRelationsResponse> response =
                api.validateContentDocumentAsinRelationsWithHttpInfo(body, marketplaceId, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
                .POST(HttpRequest.BodyPublishers.noBody())
                .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if (statusCode != 204) assertNotNull(body);
    }
}
