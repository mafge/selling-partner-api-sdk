/*
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.services.v1;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import java.util.stream.Collectors;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.services.v1.AddAppointmentRequest;
import software.amazon.spapi.models.services.v1.AssignAppointmentResourcesRequest;
import software.amazon.spapi.models.services.v1.AssignAppointmentResourcesResponse;
import software.amazon.spapi.models.services.v1.CancelReservationResponse;
import software.amazon.spapi.models.services.v1.CancelServiceJobByServiceJobIdResponse;
import software.amazon.spapi.models.services.v1.CompleteServiceJobByServiceJobIdResponse;
import software.amazon.spapi.models.services.v1.CreateReservationRequest;
import software.amazon.spapi.models.services.v1.CreateReservationResponse;
import software.amazon.spapi.models.services.v1.CreateServiceDocumentUploadDestination;
import software.amazon.spapi.models.services.v1.FixedSlotCapacity;
import software.amazon.spapi.models.services.v1.FixedSlotCapacityQuery;
import software.amazon.spapi.models.services.v1.GetAppointmentSlotsResponse;
import software.amazon.spapi.models.services.v1.GetServiceJobByServiceJobIdResponse;
import software.amazon.spapi.models.services.v1.GetServiceJobsResponse;
import software.amazon.spapi.models.services.v1.RangeSlotCapacity;
import software.amazon.spapi.models.services.v1.RangeSlotCapacityQuery;
import software.amazon.spapi.models.services.v1.RescheduleAppointmentRequest;
import software.amazon.spapi.models.services.v1.ServiceUploadDocument;
import software.amazon.spapi.models.services.v1.SetAppointmentFulfillmentDataRequest;
import software.amazon.spapi.models.services.v1.SetAppointmentResponse;
import software.amazon.spapi.models.services.v1.UpdateReservationRequest;
import software.amazon.spapi.models.services.v1.UpdateReservationResponse;
import software.amazon.spapi.models.services.v1.UpdateScheduleRequest;
import software.amazon.spapi.models.services.v1.UpdateScheduleResponse;

public class ServiceApiTest {

    private static String endpoint = "http://localhost:3000";
    private static String authEndpoint = "http://localhost:3000/auth/o2/token";
    private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
            .clientId("clientId")
            .clientSecret("clientSecret")
            .refreshToken("refreshToken")
            .endpoint(authEndpoint)
            .build();

    private final ServiceApi api = new ServiceApi.Builder()
            .lwaAuthorizationCredentials(credentials)
            .endpoint(endpoint)
            .build();

    private final EasyRandom easyRandom = new EasyRandom(new EasyRandomParameters()
            .randomize(OffsetDateTime.class, OffsetDateTime::now)
            .randomize(LocalDate.class, LocalDate::now)
            .collectionSizeRange(1, 2));

    @Test
    public void addAppointmentForServiceJobByServiceJobIdTest() throws Exception {
        instructBackendMock("addAppointmentForServiceJobByServiceJobId", "200");
        AddAppointmentRequest body = easyRandom.nextObject(AddAppointmentRequest.class);
        String serviceJobId = easyRandom.nextObject(String.class);

        ApiResponse<SetAppointmentResponse> response =
                api.addAppointmentForServiceJobByServiceJobIdWithHttpInfo(body, serviceJobId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void assignAppointmentResourcesTest() throws Exception {
        instructBackendMock("assignAppointmentResources", "200");
        AssignAppointmentResourcesRequest body = easyRandom.nextObject(AssignAppointmentResourcesRequest.class);
        String serviceJobId = easyRandom.nextObject(String.class);
        String appointmentId = easyRandom.nextObject(String.class);

        ApiResponse<AssignAppointmentResourcesResponse> response =
                api.assignAppointmentResourcesWithHttpInfo(body, serviceJobId, appointmentId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void cancelReservationTest() throws Exception {
        instructBackendMock("cancelReservation", "204");
        String reservationId = easyRandom.nextObject(String.class);
        List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<CancelReservationResponse> response =
                api.cancelReservationWithHttpInfo(reservationId, marketplaceIds);

        assertEquals(204, response.getStatusCode());
        assertValidResponsePayload(204, response.getData());
    }

    @Test
    public void cancelServiceJobByServiceJobIdTest() throws Exception {
        instructBackendMock("cancelServiceJobByServiceJobId", "200");
        String serviceJobId = easyRandom.nextObject(String.class);
        String cancellationReasonCode = easyRandom.nextObject(String.class);

        ApiResponse<CancelServiceJobByServiceJobIdResponse> response =
                api.cancelServiceJobByServiceJobIdWithHttpInfo(serviceJobId, cancellationReasonCode);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void completeServiceJobByServiceJobIdTest() throws Exception {
        instructBackendMock("completeServiceJobByServiceJobId", "200");
        String serviceJobId = easyRandom.nextObject(String.class);

        ApiResponse<CompleteServiceJobByServiceJobIdResponse> response =
                api.completeServiceJobByServiceJobIdWithHttpInfo(serviceJobId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void createReservationTest() throws Exception {
        instructBackendMock("createReservation", "200");
        CreateReservationRequest body = easyRandom.nextObject(CreateReservationRequest.class);
        List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<CreateReservationResponse> response = api.createReservationWithHttpInfo(body, marketplaceIds);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void createServiceDocumentUploadDestinationTest() throws Exception {
        instructBackendMock("createServiceDocumentUploadDestination", "200");
        ServiceUploadDocument body = easyRandom.nextObject(ServiceUploadDocument.class);

        ApiResponse<CreateServiceDocumentUploadDestination> response =
                api.createServiceDocumentUploadDestinationWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getAppointmentSlotsTest() throws Exception {
        instructBackendMock("getAppointmentSlots", "200");
        String asin = easyRandom.nextObject(String.class);
        String storeId = easyRandom.nextObject(String.class);
        List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<GetAppointmentSlotsResponse> response =
                api.getAppointmentSlotsWithHttpInfo(asin, storeId, marketplaceIds, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getAppointmmentSlotsByJobIdTest() throws Exception {
        instructBackendMock("getAppointmmentSlotsByJobId", "200");
        String serviceJobId = easyRandom.nextObject(String.class);
        List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<GetAppointmentSlotsResponse> response =
                api.getAppointmmentSlotsByJobIdWithHttpInfo(serviceJobId, marketplaceIds, null, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getFixedSlotCapacityTest() throws Exception {
        instructBackendMock("getFixedSlotCapacity", "200");
        FixedSlotCapacityQuery body = easyRandom.nextObject(FixedSlotCapacityQuery.class);
        String resourceId = easyRandom.nextObject(String.class);
        List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<FixedSlotCapacity> response =
                api.getFixedSlotCapacityWithHttpInfo(body, resourceId, marketplaceIds, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getRangeSlotCapacityTest() throws Exception {
        instructBackendMock("getRangeSlotCapacity", "200");
        RangeSlotCapacityQuery body = easyRandom.nextObject(RangeSlotCapacityQuery.class);
        String resourceId = easyRandom.nextObject(String.class);
        List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<RangeSlotCapacity> response =
                api.getRangeSlotCapacityWithHttpInfo(body, resourceId, marketplaceIds, null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getServiceJobByServiceJobIdTest() throws Exception {
        instructBackendMock("getServiceJobByServiceJobId", "200");
        String serviceJobId = easyRandom.nextObject(String.class);

        ApiResponse<GetServiceJobByServiceJobIdResponse> response =
                api.getServiceJobByServiceJobIdWithHttpInfo(serviceJobId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getServiceJobsTest() throws Exception {
        instructBackendMock("getServiceJobs", "200");
        List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<GetServiceJobsResponse> response = api.getServiceJobsWithHttpInfo(
                marketplaceIds,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void rescheduleAppointmentForServiceJobByServiceJobIdTest() throws Exception {
        instructBackendMock("rescheduleAppointmentForServiceJobByServiceJobId", "200");
        RescheduleAppointmentRequest body = easyRandom.nextObject(RescheduleAppointmentRequest.class);
        String serviceJobId = easyRandom.nextObject(String.class);
        String appointmentId = easyRandom.nextObject(String.class);

        ApiResponse<SetAppointmentResponse> response =
                api.rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(body, serviceJobId, appointmentId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void setAppointmentFulfillmentDataTest() throws Exception {
        instructBackendMock("setAppointmentFulfillmentData", "204");
        SetAppointmentFulfillmentDataRequest body = easyRandom.nextObject(SetAppointmentFulfillmentDataRequest.class);
        String serviceJobId = easyRandom.nextObject(String.class);
        String appointmentId = easyRandom.nextObject(String.class);

        ApiResponse<String> response = api.setAppointmentFulfillmentDataWithHttpInfo(body, serviceJobId, appointmentId);

        assertEquals(204, response.getStatusCode());
        assertValidResponsePayload(204, response.getData());
    }

    @Test
    public void updateReservationTest() throws Exception {
        instructBackendMock("updateReservation", "200");
        UpdateReservationRequest body = easyRandom.nextObject(UpdateReservationRequest.class);
        String reservationId = easyRandom.nextObject(String.class);
        List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<UpdateReservationResponse> response =
                api.updateReservationWithHttpInfo(body, reservationId, marketplaceIds);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void updateScheduleTest() throws Exception {
        instructBackendMock("updateSchedule", "200");
        UpdateScheduleRequest body = easyRandom.nextObject(UpdateScheduleRequest.class);
        String resourceId = easyRandom.nextObject(String.class);
        List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

        ApiResponse<UpdateScheduleResponse> response = api.updateScheduleWithHttpInfo(body, resourceId, marketplaceIds);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
                .POST(HttpRequest.BodyPublishers.noBody())
                .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if (statusCode != 204) assertNotNull(body);
    }
}
