/*
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.merchantfulfillment.v0;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.merchantfulfillment.v0.CancelShipmentResponse;
import software.amazon.spapi.models.merchantfulfillment.v0.CreateShipmentRequest;
import software.amazon.spapi.models.merchantfulfillment.v0.CreateShipmentResponse;
import software.amazon.spapi.models.merchantfulfillment.v0.GetAdditionalSellerInputsRequest;
import software.amazon.spapi.models.merchantfulfillment.v0.GetAdditionalSellerInputsResponse;
import software.amazon.spapi.models.merchantfulfillment.v0.GetEligibleShipmentServicesRequest;
import software.amazon.spapi.models.merchantfulfillment.v0.GetEligibleShipmentServicesResponse;
import software.amazon.spapi.models.merchantfulfillment.v0.GetShipmentResponse;

public class MerchantFulfillmentApiTest {

    private static String endpoint = "http://localhost:3000";
    private static String authEndpoint = "http://localhost:3000/auth/o2/token";
    private static LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
            .clientId("clientId")
            .clientSecret("clientSecret")
            .refreshToken("refreshToken")
            .endpoint(authEndpoint)
            .build();

    private final MerchantFulfillmentApi api = new MerchantFulfillmentApi.Builder()
            .lwaAuthorizationCredentials(credentials)
            .endpoint(endpoint)
            .build();

    private final EasyRandom easyRandom = new EasyRandom(new EasyRandomParameters()
            .randomize(OffsetDateTime.class, OffsetDateTime::now)
            .randomize(LocalDate.class, LocalDate::now)
            .collectionSizeRange(1, 2));

    @Test
    public void cancelShipmentTest() throws Exception {
        instructBackendMock("cancelShipment", "200");
        String shipmentId = easyRandom.nextObject(String.class);

        ApiResponse<CancelShipmentResponse> response = api.cancelShipmentWithHttpInfo(shipmentId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void createShipmentTest() throws Exception {
        instructBackendMock("createShipment", "200");
        CreateShipmentRequest body = easyRandom.nextObject(CreateShipmentRequest.class);

        ApiResponse<CreateShipmentResponse> response = api.createShipmentWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getAdditionalSellerInputsTest() throws Exception {
        instructBackendMock("getAdditionalSellerInputs", "200");
        GetAdditionalSellerInputsRequest body = easyRandom.nextObject(GetAdditionalSellerInputsRequest.class);

        ApiResponse<GetAdditionalSellerInputsResponse> response = api.getAdditionalSellerInputsWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getEligibleShipmentServicesTest() throws Exception {
        instructBackendMock("getEligibleShipmentServices", "200");
        GetEligibleShipmentServicesRequest body = easyRandom.nextObject(GetEligibleShipmentServicesRequest.class);

        ApiResponse<GetEligibleShipmentServicesResponse> response = api.getEligibleShipmentServicesWithHttpInfo(body);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getShipmentTest() throws Exception {
        instructBackendMock("getShipment", "200");
        String shipmentId = easyRandom.nextObject(String.class);

        ApiResponse<GetShipmentResponse> response = api.getShipmentWithHttpInfo(shipmentId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
                .POST(HttpRequest.BodyPublishers.noBody())
                .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if (statusCode != 204) assertNotNull(body);
    }
}
