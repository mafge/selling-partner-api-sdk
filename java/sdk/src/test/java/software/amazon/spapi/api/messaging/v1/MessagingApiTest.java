/*
 * Selling Partner API for Messaging
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.messaging.v1;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import java.util.stream.Collectors;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.messaging.v1.CreateAmazonMotorsRequest;
import software.amazon.spapi.models.messaging.v1.CreateAmazonMotorsResponse;
import software.amazon.spapi.models.messaging.v1.CreateConfirmCustomizationDetailsRequest;
import software.amazon.spapi.models.messaging.v1.CreateConfirmCustomizationDetailsResponse;
import software.amazon.spapi.models.messaging.v1.CreateConfirmDeliveryDetailsRequest;
import software.amazon.spapi.models.messaging.v1.CreateConfirmDeliveryDetailsResponse;
import software.amazon.spapi.models.messaging.v1.CreateConfirmOrderDetailsRequest;
import software.amazon.spapi.models.messaging.v1.CreateConfirmOrderDetailsResponse;
import software.amazon.spapi.models.messaging.v1.CreateConfirmServiceDetailsRequest;
import software.amazon.spapi.models.messaging.v1.CreateConfirmServiceDetailsResponse;
import software.amazon.spapi.models.messaging.v1.CreateDigitalAccessKeyRequest;
import software.amazon.spapi.models.messaging.v1.CreateDigitalAccessKeyResponse;
import software.amazon.spapi.models.messaging.v1.CreateLegalDisclosureRequest;
import software.amazon.spapi.models.messaging.v1.CreateLegalDisclosureResponse;
import software.amazon.spapi.models.messaging.v1.CreateNegativeFeedbackRemovalResponse;
import software.amazon.spapi.models.messaging.v1.CreateUnexpectedProblemRequest;
import software.amazon.spapi.models.messaging.v1.CreateUnexpectedProblemResponse;
import software.amazon.spapi.models.messaging.v1.CreateWarrantyRequest;
import software.amazon.spapi.models.messaging.v1.CreateWarrantyResponse;
import software.amazon.spapi.models.messaging.v1.GetAttributesResponse;
import software.amazon.spapi.models.messaging.v1.GetMessagingActionsForOrderResponse;
import software.amazon.spapi.models.messaging.v1.InvoiceRequest;
import software.amazon.spapi.models.messaging.v1.InvoiceResponse;

public class MessagingApiTest {

  private static String endpoint = "http://localhost:3000";
  private static String authEndpoint = "http://localhost:3000/auth/o2/token";
  private static LWAAuthorizationCredentials credentials =
      LWAAuthorizationCredentials.builder()
          .clientId("clientId")
          .clientSecret("clientSecret")
          .refreshToken("refreshToken")
          .endpoint(authEndpoint)
          .build();

  private final MessagingApi api =
      new MessagingApi.Builder()
          .lwaAuthorizationCredentials(credentials)
          .endpoint(endpoint)
          .build();

  private final EasyRandom easyRandom =
      new EasyRandom(
          new EasyRandomParameters()
              .randomize(OffsetDateTime.class, OffsetDateTime::now)
              .randomize(LocalDate.class, LocalDate::now)
              .collectionSizeRange(1, 2));

  @Test
  public void confirmCustomizationDetailsTest() throws Exception {
    instructBackendMock("confirmCustomizationDetails", "201");
    CreateConfirmCustomizationDetailsRequest body =
        easyRandom.nextObject(CreateConfirmCustomizationDetailsRequest.class);
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<CreateConfirmCustomizationDetailsResponse> response =
        api.confirmCustomizationDetailsWithHttpInfo(body, amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void createAmazonMotorsTest() throws Exception {
    instructBackendMock("createAmazonMotors", "201");
    CreateAmazonMotorsRequest body = easyRandom.nextObject(CreateAmazonMotorsRequest.class);
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<CreateAmazonMotorsResponse> response =
        api.createAmazonMotorsWithHttpInfo(body, amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void createConfirmDeliveryDetailsTest() throws Exception {
    instructBackendMock("createConfirmDeliveryDetails", "201");
    CreateConfirmDeliveryDetailsRequest body =
        easyRandom.nextObject(CreateConfirmDeliveryDetailsRequest.class);
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<CreateConfirmDeliveryDetailsResponse> response =
        api.createConfirmDeliveryDetailsWithHttpInfo(body, amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void createConfirmOrderDetailsTest() throws Exception {
    instructBackendMock("createConfirmOrderDetails", "201");
    CreateConfirmOrderDetailsRequest body =
        easyRandom.nextObject(CreateConfirmOrderDetailsRequest.class);
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<CreateConfirmOrderDetailsResponse> response =
        api.createConfirmOrderDetailsWithHttpInfo(body, amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void createConfirmServiceDetailsTest() throws Exception {
    instructBackendMock("createConfirmServiceDetails", "201");
    CreateConfirmServiceDetailsRequest body =
        easyRandom.nextObject(CreateConfirmServiceDetailsRequest.class);
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<CreateConfirmServiceDetailsResponse> response =
        api.createConfirmServiceDetailsWithHttpInfo(body, amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void createDigitalAccessKeyTest() throws Exception {
    instructBackendMock("createDigitalAccessKey", "201");
    CreateDigitalAccessKeyRequest body = easyRandom.nextObject(CreateDigitalAccessKeyRequest.class);
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<CreateDigitalAccessKeyResponse> response =
        api.createDigitalAccessKeyWithHttpInfo(body, amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void createLegalDisclosureTest() throws Exception {
    instructBackendMock("createLegalDisclosure", "201");
    CreateLegalDisclosureRequest body = easyRandom.nextObject(CreateLegalDisclosureRequest.class);
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<CreateLegalDisclosureResponse> response =
        api.createLegalDisclosureWithHttpInfo(body, amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void createNegativeFeedbackRemovalTest() throws Exception {
    instructBackendMock("createNegativeFeedbackRemoval", "201");
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<CreateNegativeFeedbackRemovalResponse> response =
        api.createNegativeFeedbackRemovalWithHttpInfo(amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void createUnexpectedProblemTest() throws Exception {
    instructBackendMock("createUnexpectedProblem", "201");
    CreateUnexpectedProblemRequest body =
        easyRandom.nextObject(CreateUnexpectedProblemRequest.class);
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<CreateUnexpectedProblemResponse> response =
        api.createUnexpectedProblemWithHttpInfo(body, amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void createWarrantyTest() throws Exception {
    instructBackendMock("createWarranty", "201");
    CreateWarrantyRequest body = easyRandom.nextObject(CreateWarrantyRequest.class);
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<CreateWarrantyResponse> response =
        api.createWarrantyWithHttpInfo(body, amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  @Test
  public void getAttributesTest() throws Exception {
    instructBackendMock("getAttributes", "200");
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<GetAttributesResponse> response =
        api.getAttributesWithHttpInfo(amazonOrderId, marketplaceIds);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void getMessagingActionsForOrderTest() throws Exception {
    instructBackendMock("getMessagingActionsForOrder", "200");
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<GetMessagingActionsForOrderResponse> response =
        api.getMessagingActionsForOrderWithHttpInfo(amazonOrderId, marketplaceIds);

    assertEquals(200, response.getStatusCode());
    assertValidResponsePayload(200, response.getData());
  }

  @Test
  public void sendInvoiceTest() throws Exception {
    instructBackendMock("sendInvoice", "201");
    InvoiceRequest body = easyRandom.nextObject(InvoiceRequest.class);
    String amazonOrderId = easyRandom.nextObject(String.class);
    List<String> marketplaceIds = easyRandom.objects(String.class, 2).collect(Collectors.toList());

    ApiResponse<InvoiceResponse> response =
        api.sendInvoiceWithHttpInfo(body, amazonOrderId, marketplaceIds);

    assertEquals(201, response.getStatusCode());
    assertValidResponsePayload(201, response.getData());
  }

  private void instructBackendMock(String response, String code) throws Exception {
    HttpRequest request =
        HttpRequest.newBuilder()
            .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
            .POST(HttpRequest.BodyPublishers.noBody())
            .build();

    HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
  }

  private static void assertValidResponsePayload(int statusCode, Object body) {
    if (statusCode != 204) assertNotNull(body);
  }
}
