/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.pricing.v2022_05_01;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.pricing.v2022_05_01.CompetitiveSummaryBatchRequest;
import software.amazon.spapi.models.pricing.v2022_05_01.CompetitiveSummaryBatchResponse;
import software.amazon.spapi.models.pricing.v2022_05_01.GetFeaturedOfferExpectedPriceBatchRequest;
import software.amazon.spapi.models.pricing.v2022_05_01.GetFeaturedOfferExpectedPriceBatchResponse;

public class ProductPricingApi {
    private ApiClient apiClient;

    public ProductPricingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    private final Configuration config = Configuration.get();

    private final Bucket getCompetitiveSummaryBucket = Bucket.builder()
            .addLimit(config.getLimit("ProductPricingApi-getCompetitiveSummary"))
            .build();

    private final Bucket getFeaturedOfferExpectedPriceBatchBucket = Bucket.builder()
            .addLimit(config.getLimit("ProductPricingApi-getFeaturedOfferExpectedPriceBatch"))
            .build();

    private okhttp3.Call getCompetitiveSummaryCall(
            CompetitiveSummaryBatchRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/batches/products/pricing/2022-05-01/items/competitiveSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getCompetitiveSummaryValidateBeforeCall(
            CompetitiveSummaryBatchRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getCompetitiveSummary(Async)");
        }

        return getCompetitiveSummaryCall(body, progressListener, progressRequestListener);
    }

    /**
     * Returns the competitive summary response, including featured buying options for the ASIN and
     * &#x60;marketplaceId&#x60; combination. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 0.033 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may receive higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling
     * Partner API.
     *
     * @param body The batch of &#x60;getCompetitiveSummary&#x60; requests. (required)
     * @return CompetitiveSummaryBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CompetitiveSummaryBatchResponse getCompetitiveSummary(CompetitiveSummaryBatchRequest body)
            throws ApiException, LWAException {
        ApiResponse<CompetitiveSummaryBatchResponse> resp = getCompetitiveSummaryWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Returns the competitive summary response, including featured buying options for the ASIN and
     * &#x60;marketplaceId&#x60; combination. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 0.033 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may receive higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling
     * Partner API.
     *
     * @param body The batch of &#x60;getCompetitiveSummary&#x60; requests. (required)
     * @return ApiResponse&lt;CompetitiveSummaryBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CompetitiveSummaryBatchResponse> getCompetitiveSummaryWithHttpInfo(
            CompetitiveSummaryBatchRequest body) throws ApiException, LWAException {
        okhttp3.Call call = getCompetitiveSummaryValidateBeforeCall(body, null, null);
        if (getCompetitiveSummaryBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CompetitiveSummaryBatchResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getCompetitiveSummary operation exceeds rate limit");
    }

    /**
     * (asynchronously) Returns the competitive summary response, including featured buying options for the ASIN and
     * &#x60;marketplaceId&#x60; combination. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 0.033 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may receive higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling
     * Partner API.
     *
     * @param body The batch of &#x60;getCompetitiveSummary&#x60; requests. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getCompetitiveSummaryAsync(
            CompetitiveSummaryBatchRequest body, final ApiCallback<CompetitiveSummaryBatchResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getCompetitiveSummaryValidateBeforeCall(body, progressListener, progressRequestListener);
        if (getCompetitiveSummaryBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CompetitiveSummaryBatchResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getCompetitiveSummary operation exceeds rate limit");
    }

    private okhttp3.Call getFeaturedOfferExpectedPriceBatchCall(
            GetFeaturedOfferExpectedPriceBatchRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getFeaturedOfferExpectedPriceBatchValidateBeforeCall(
            GetFeaturedOfferExpectedPriceBatchRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling getFeaturedOfferExpectedPriceBatch(Async)");
        }

        return getFeaturedOfferExpectedPriceBatchCall(body, progressListener, progressRequestListener);
    }

    /**
     * Returns the set of responses that correspond to the batched list of up to 40 requests defined in the request
     * body. The response for each successful (HTTP status code 200) request in the set includes the computed listing
     * price at or below which a seller can expect to become the featured offer (before applicable promotions). This is
     * called the featured offer expected price (FOEP). Featured offer is not guaranteed because competing offers might
     * change. Other offers might be featured based on factors such as fulfillment capabilities to a specific customer.
     * The response to an unsuccessful request includes the available error text. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 0.033 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that are applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may receive higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling
     * Partner API.
     *
     * @param body The batch of &#x60;getFeaturedOfferExpectedPrice&#x60; requests. (required)
     * @return GetFeaturedOfferExpectedPriceBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFeaturedOfferExpectedPriceBatchResponse getFeaturedOfferExpectedPriceBatch(
            GetFeaturedOfferExpectedPriceBatchRequest body) throws ApiException, LWAException {
        ApiResponse<GetFeaturedOfferExpectedPriceBatchResponse> resp =
                getFeaturedOfferExpectedPriceBatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Returns the set of responses that correspond to the batched list of up to 40 requests defined in the request
     * body. The response for each successful (HTTP status code 200) request in the set includes the computed listing
     * price at or below which a seller can expect to become the featured offer (before applicable promotions). This is
     * called the featured offer expected price (FOEP). Featured offer is not guaranteed because competing offers might
     * change. Other offers might be featured based on factors such as fulfillment capabilities to a specific customer.
     * The response to an unsuccessful request includes the available error text. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 0.033 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that are applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may receive higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling
     * Partner API.
     *
     * @param body The batch of &#x60;getFeaturedOfferExpectedPrice&#x60; requests. (required)
     * @return ApiResponse&lt;GetFeaturedOfferExpectedPriceBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFeaturedOfferExpectedPriceBatchResponse> getFeaturedOfferExpectedPriceBatchWithHttpInfo(
            GetFeaturedOfferExpectedPriceBatchRequest body) throws ApiException, LWAException {
        okhttp3.Call call = getFeaturedOfferExpectedPriceBatchValidateBeforeCall(body, null, null);
        if (getFeaturedOfferExpectedPriceBatchBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFeaturedOfferExpectedPriceBatchResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else
            throw new ApiException.RateLimitExceeded("getFeaturedOfferExpectedPriceBatch operation exceeds rate limit");
    }

    /**
     * (asynchronously) Returns the set of responses that correspond to the batched list of up to 40 requests defined in
     * the request body. The response for each successful (HTTP status code 200) request in the set includes the
     * computed listing price at or below which a seller can expect to become the featured offer (before applicable
     * promotions). This is called the featured offer expected price (FOEP). Featured offer is not guaranteed because
     * competing offers might change. Other offers might be featured based on factors such as fulfillment capabilities
     * to a specific customer. The response to an unsuccessful request includes the available error text. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.033 | 1 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may receive higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling
     * Partner API.
     *
     * @param body The batch of &#x60;getFeaturedOfferExpectedPrice&#x60; requests. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeaturedOfferExpectedPriceBatchAsync(
            GetFeaturedOfferExpectedPriceBatchRequest body,
            final ApiCallback<GetFeaturedOfferExpectedPriceBatchResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getFeaturedOfferExpectedPriceBatchValidateBeforeCall(body, progressListener, progressRequestListener);
        if (getFeaturedOfferExpectedPriceBatchBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFeaturedOfferExpectedPriceBatchResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else
            throw new ApiException.RateLimitExceeded("getFeaturedOfferExpectedPriceBatch operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public ProductPricingApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new ProductPricingApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint));
        }
    }
}
