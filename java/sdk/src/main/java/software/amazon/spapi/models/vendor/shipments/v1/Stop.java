/*
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.vendor.shipments.v1;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Objects;
import org.threeten.bp.OffsetDateTime;

/** Contractual or operational port or point relevant to the movement of the cargo. */
@Schema(description = "Contractual or operational port or point relevant to the movement of the cargo.")
public class Stop {
    /** Provide the function code. */
    @JsonAdapter(FunctionCodeEnum.Adapter.class)
    public enum FunctionCodeEnum {
        @SerializedName("PortOfDischarge")
        PORTOFDISCHARGE("PortOfDischarge"),
        @SerializedName("FreightPayableAt")
        FREIGHTPAYABLEAT("FreightPayableAt"),
        @SerializedName("PortOfLoading")
        PORTOFLOADING("PortOfLoading");

        private String value;

        FunctionCodeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static FunctionCodeEnum fromValue(String input) {
            for (FunctionCodeEnum b : FunctionCodeEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<FunctionCodeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final FunctionCodeEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public FunctionCodeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return FunctionCodeEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("functionCode")
    private FunctionCodeEnum functionCode = null;

    @SerializedName("locationIdentification")
    private Location locationIdentification = null;

    @SerializedName("arrivalTime")
    private OffsetDateTime arrivalTime = null;

    @SerializedName("departureTime")
    private OffsetDateTime departureTime = null;

    public Stop functionCode(FunctionCodeEnum functionCode) {
        this.functionCode = functionCode;
        return this;
    }

    /**
     * Provide the function code.
     *
     * @return functionCode
     */
    @Schema(required = true, description = "Provide the function code.")
    public FunctionCodeEnum getFunctionCode() {
        return functionCode;
    }

    public void setFunctionCode(FunctionCodeEnum functionCode) {
        this.functionCode = functionCode;
    }

    public Stop locationIdentification(Location locationIdentification) {
        this.locationIdentification = locationIdentification;
        return this;
    }

    /**
     * Get locationIdentification
     *
     * @return locationIdentification
     */
    @Schema(description = "")
    public Location getLocationIdentification() {
        return locationIdentification;
    }

    public void setLocationIdentification(Location locationIdentification) {
        this.locationIdentification = locationIdentification;
    }

    public Stop arrivalTime(OffsetDateTime arrivalTime) {
        this.arrivalTime = arrivalTime;
        return this;
    }

    /**
     * Date and time of the arrival of the cargo.
     *
     * @return arrivalTime
     */
    @Schema(description = "Date and time of the arrival of the cargo.")
    public OffsetDateTime getArrivalTime() {
        return arrivalTime;
    }

    public void setArrivalTime(OffsetDateTime arrivalTime) {
        this.arrivalTime = arrivalTime;
    }

    public Stop departureTime(OffsetDateTime departureTime) {
        this.departureTime = departureTime;
        return this;
    }

    /**
     * Date and time of the departure of the cargo.
     *
     * @return departureTime
     */
    @Schema(description = "Date and time of the departure of the cargo.")
    public OffsetDateTime getDepartureTime() {
        return departureTime;
    }

    public void setDepartureTime(OffsetDateTime departureTime) {
        this.departureTime = departureTime;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Stop stop = (Stop) o;
        return Objects.equals(this.functionCode, stop.functionCode)
                && Objects.equals(this.locationIdentification, stop.locationIdentification)
                && Objects.equals(this.arrivalTime, stop.arrivalTime)
                && Objects.equals(this.departureTime, stop.departureTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(functionCode, locationIdentification, arrivalTime, departureTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Stop {\n");

        sb.append("    functionCode: ").append(toIndentedString(functionCode)).append("\n");
        sb.append("    locationIdentification: ")
                .append(toIndentedString(locationIdentification))
                .append("\n");
        sb.append("    arrivalTime: ").append(toIndentedString(arrivalTime)).append("\n");
        sb.append("    departureTime: ").append(toIndentedString(departureTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
