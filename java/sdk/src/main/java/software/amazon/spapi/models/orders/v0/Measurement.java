/*
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.orders.v0;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Objects;

/** Measurement information for an order item. */
@Schema(description = "Measurement information for an order item.")
public class Measurement {
    /** The unit of measure. */
    @JsonAdapter(UnitEnum.Adapter.class)
    public enum UnitEnum {
        @SerializedName("OUNCES")
        OUNCES("OUNCES"),
        @SerializedName("POUNDS")
        POUNDS("POUNDS"),
        @SerializedName("KILOGRAMS")
        KILOGRAMS("KILOGRAMS"),
        @SerializedName("GRAMS")
        GRAMS("GRAMS"),
        @SerializedName("MILLIGRAMS")
        MILLIGRAMS("MILLIGRAMS"),
        @SerializedName("INCHES")
        INCHES("INCHES"),
        @SerializedName("FEET")
        FEET("FEET"),
        @SerializedName("METERS")
        METERS("METERS"),
        @SerializedName("CENTIMETERS")
        CENTIMETERS("CENTIMETERS"),
        @SerializedName("MILLIMETERS")
        MILLIMETERS("MILLIMETERS"),
        @SerializedName("SQUARE_METERS")
        SQUARE_METERS("SQUARE_METERS"),
        @SerializedName("SQUARE_CENTIMETERS")
        SQUARE_CENTIMETERS("SQUARE_CENTIMETERS"),
        @SerializedName("SQUARE_FEET")
        SQUARE_FEET("SQUARE_FEET"),
        @SerializedName("SQUARE_INCHES")
        SQUARE_INCHES("SQUARE_INCHES"),
        @SerializedName("GALLONS")
        GALLONS("GALLONS"),
        @SerializedName("PINTS")
        PINTS("PINTS"),
        @SerializedName("QUARTS")
        QUARTS("QUARTS"),
        @SerializedName("FLUID_OUNCES")
        FLUID_OUNCES("FLUID_OUNCES"),
        @SerializedName("LITERS")
        LITERS("LITERS"),
        @SerializedName("CUBIC_METERS")
        CUBIC_METERS("CUBIC_METERS"),
        @SerializedName("CUBIC_FEET")
        CUBIC_FEET("CUBIC_FEET"),
        @SerializedName("CUBIC_INCHES")
        CUBIC_INCHES("CUBIC_INCHES"),
        @SerializedName("CUBIC_CENTIMETERS")
        CUBIC_CENTIMETERS("CUBIC_CENTIMETERS"),
        @SerializedName("COUNT")
        COUNT("COUNT");

        private String value;

        UnitEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static UnitEnum fromValue(String input) {
            for (UnitEnum b : UnitEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<UnitEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public UnitEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return UnitEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("Unit")
    private UnitEnum unit = null;

    @SerializedName("Value")
    private BigDecimal value = null;

    public Measurement unit(UnitEnum unit) {
        this.unit = unit;
        return this;
    }

    /**
     * The unit of measure.
     *
     * @return unit
     */
    @Schema(required = true, description = "The unit of measure.")
    public UnitEnum getUnit() {
        return unit;
    }

    public void setUnit(UnitEnum unit) {
        this.unit = unit;
    }

    public Measurement value(BigDecimal value) {
        this.value = value;
        return this;
    }

    /**
     * The measurement value.
     *
     * @return value
     */
    @Schema(required = true, description = "The measurement value.")
    public BigDecimal getValue() {
        return value;
    }

    public void setValue(BigDecimal value) {
        this.value = value;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Measurement measurement = (Measurement) o;
        return Objects.equals(this.unit, measurement.unit) && Objects.equals(this.value, measurement.value);
    }

    @Override
    public int hashCode() {
        return Objects.hash(unit, value);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Measurement {\n");

        sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
