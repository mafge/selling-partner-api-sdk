/*
 * Selling Partner API for Direct Fulfillment Shipping
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: 2021-12-28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.vendor.df.shipping.v2021_12_28;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;
import org.threeten.bp.OffsetDateTime;

/** Details about the estimated delivery window. */
@Schema(description = "Details about the estimated delivery window.")
public class ShipmentSchedule {
    @SerializedName("estimatedDeliveryDateTime")
    private OffsetDateTime estimatedDeliveryDateTime = null;

    @SerializedName("apptWindowStartDateTime")
    private OffsetDateTime apptWindowStartDateTime = null;

    @SerializedName("apptWindowEndDateTime")
    private OffsetDateTime apptWindowEndDateTime = null;

    public ShipmentSchedule estimatedDeliveryDateTime(OffsetDateTime estimatedDeliveryDateTime) {
        this.estimatedDeliveryDateTime = estimatedDeliveryDateTime;
        return this;
    }

    /**
     * Date on which the shipment is expected to reach the customer delivery location. Values are in [ISO
     * 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format, with UTC time zone or UTC offset.
     * For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
     *
     * @return estimatedDeliveryDateTime
     */
    @Schema(
            description =
                    "Date on which the shipment is expected to reach the customer delivery location. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.")
    public OffsetDateTime getEstimatedDeliveryDateTime() {
        return estimatedDeliveryDateTime;
    }

    public void setEstimatedDeliveryDateTime(OffsetDateTime estimatedDeliveryDateTime) {
        this.estimatedDeliveryDateTime = estimatedDeliveryDateTime;
    }

    public ShipmentSchedule apptWindowStartDateTime(OffsetDateTime apptWindowStartDateTime) {
        this.apptWindowStartDateTime = apptWindowStartDateTime;
        return this;
    }

    /**
     * The date and time at the start of the appointment window when the shipment is expected to be delivered. Values
     * are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format, with UTC time zone or
     * UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
     *
     * @return apptWindowStartDateTime
     */
    @Schema(
            description =
                    "The date and time at the start of the appointment window when the shipment is expected to be delivered. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.")
    public OffsetDateTime getApptWindowStartDateTime() {
        return apptWindowStartDateTime;
    }

    public void setApptWindowStartDateTime(OffsetDateTime apptWindowStartDateTime) {
        this.apptWindowStartDateTime = apptWindowStartDateTime;
    }

    public ShipmentSchedule apptWindowEndDateTime(OffsetDateTime apptWindowEndDateTime) {
        this.apptWindowEndDateTime = apptWindowEndDateTime;
        return this;
    }

    /**
     * The date and time at the end of the appointment window when the shipment is expected to be delivered. Values are
     * in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format, with UTC time zone or UTC
     * offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
     *
     * @return apptWindowEndDateTime
     */
    @Schema(
            description =
                    "The date and time at the end of the appointment window when the shipment is expected to be delivered. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.")
    public OffsetDateTime getApptWindowEndDateTime() {
        return apptWindowEndDateTime;
    }

    public void setApptWindowEndDateTime(OffsetDateTime apptWindowEndDateTime) {
        this.apptWindowEndDateTime = apptWindowEndDateTime;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShipmentSchedule shipmentSchedule = (ShipmentSchedule) o;
        return Objects.equals(this.estimatedDeliveryDateTime, shipmentSchedule.estimatedDeliveryDateTime)
                && Objects.equals(this.apptWindowStartDateTime, shipmentSchedule.apptWindowStartDateTime)
                && Objects.equals(this.apptWindowEndDateTime, shipmentSchedule.apptWindowEndDateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(estimatedDeliveryDateTime, apptWindowStartDateTime, apptWindowEndDateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ShipmentSchedule {\n");

        sb.append("    estimatedDeliveryDateTime: ")
                .append(toIndentedString(estimatedDeliveryDateTime))
                .append("\n");
        sb.append("    apptWindowStartDateTime: ")
                .append(toIndentedString(apptWindowStartDateTime))
                .append("\n");
        sb.append("    apptWindowEndDateTime: ")
                .append(toIndentedString(apptWindowEndDateTime))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
