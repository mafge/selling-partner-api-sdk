/*
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.services.v1;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.services.v1.AddAppointmentRequest;
import software.amazon.spapi.models.services.v1.AssignAppointmentResourcesRequest;
import software.amazon.spapi.models.services.v1.AssignAppointmentResourcesResponse;
import software.amazon.spapi.models.services.v1.CancelReservationResponse;
import software.amazon.spapi.models.services.v1.CancelServiceJobByServiceJobIdResponse;
import software.amazon.spapi.models.services.v1.CompleteServiceJobByServiceJobIdResponse;
import software.amazon.spapi.models.services.v1.CreateReservationRequest;
import software.amazon.spapi.models.services.v1.CreateReservationResponse;
import software.amazon.spapi.models.services.v1.CreateServiceDocumentUploadDestination;
import software.amazon.spapi.models.services.v1.FixedSlotCapacity;
import software.amazon.spapi.models.services.v1.FixedSlotCapacityQuery;
import software.amazon.spapi.models.services.v1.GetAppointmentSlotsResponse;
import software.amazon.spapi.models.services.v1.GetServiceJobByServiceJobIdResponse;
import software.amazon.spapi.models.services.v1.GetServiceJobsResponse;
import software.amazon.spapi.models.services.v1.RangeSlotCapacity;
import software.amazon.spapi.models.services.v1.RangeSlotCapacityQuery;
import software.amazon.spapi.models.services.v1.RescheduleAppointmentRequest;
import software.amazon.spapi.models.services.v1.ServiceUploadDocument;
import software.amazon.spapi.models.services.v1.SetAppointmentFulfillmentDataRequest;
import software.amazon.spapi.models.services.v1.SetAppointmentResponse;
import software.amazon.spapi.models.services.v1.UpdateReservationRequest;
import software.amazon.spapi.models.services.v1.UpdateReservationResponse;
import software.amazon.spapi.models.services.v1.UpdateScheduleRequest;
import software.amazon.spapi.models.services.v1.UpdateScheduleResponse;

public class ServiceApi {
    private ApiClient apiClient;

    ServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addAppointmentForServiceJobByServiceJobId
     *
     * @param body Add appointment operation input details. (required)
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call addAppointmentForServiceJobByServiceJobIdCall(
            AddAppointmentRequest body,
            String serviceJobId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments"
                .replaceAll("\\{" + "serviceJobId" + "\\}", apiClient.escapeString(serviceJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAppointmentForServiceJobByServiceJobIdValidateBeforeCall(
            AddAppointmentRequest body,
            String serviceJobId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling addAppointmentForServiceJobByServiceJobId(Async)");
        }
        // verify the required parameter 'serviceJobId' is set
        if (serviceJobId == null) {
            throw new ApiException(
                    "Missing the required parameter 'serviceJobId' when calling addAppointmentForServiceJobByServiceJobId(Async)");
        }

        okhttp3.Call call = addAppointmentForServiceJobByServiceJobIdCall(
                body, serviceJobId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Adds an appointment to the service job indicated by the service job identifier specified. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage
     * Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Add appointment operation input details. (required)
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @return SetAppointmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public SetAppointmentResponse addAppointmentForServiceJobByServiceJobId(
            AddAppointmentRequest body, String serviceJobId) throws ApiException, LWAException {
        ApiResponse<SetAppointmentResponse> resp =
                addAppointmentForServiceJobByServiceJobIdWithHttpInfo(body, serviceJobId);
        return resp.getData();
    }

    /**
     * Adds an appointment to the service job indicated by the service job identifier specified. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage
     * Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Add appointment operation input details. (required)
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @return ApiResponse&lt;SetAppointmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<SetAppointmentResponse> addAppointmentForServiceJobByServiceJobIdWithHttpInfo(
            AddAppointmentRequest body, String serviceJobId) throws ApiException, LWAException {
        okhttp3.Call call = addAppointmentForServiceJobByServiceJobIdValidateBeforeCall(body, serviceJobId, null, null);
        Type localVarReturnType = new TypeToken<SetAppointmentResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Adds an appointment to the service job indicated by the service job identifier specified.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Add appointment operation input details. (required)
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call addAppointmentForServiceJobByServiceJobIdAsync(
            AddAppointmentRequest body, String serviceJobId, final ApiCallback<SetAppointmentResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = addAppointmentForServiceJobByServiceJobIdValidateBeforeCall(
                body, serviceJobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SetAppointmentResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for assignAppointmentResources
     *
     * @param body (required)
     * @param serviceJobId An Amazon-defined service job identifier. Get this value by calling the
     *     &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param appointmentId An Amazon-defined identifier of active service job appointment. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call assignAppointmentResourcesCall(
            AssignAppointmentResourcesRequest body,
            String serviceJobId,
            String appointmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources"
                .replaceAll("\\{" + "serviceJobId" + "\\}", apiClient.escapeString(serviceJobId.toString()))
                .replaceAll("\\{" + "appointmentId" + "\\}", apiClient.escapeString(appointmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignAppointmentResourcesValidateBeforeCall(
            AssignAppointmentResourcesRequest body,
            String serviceJobId,
            String appointmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling assignAppointmentResources(Async)");
        }
        // verify the required parameter 'serviceJobId' is set
        if (serviceJobId == null) {
            throw new ApiException(
                    "Missing the required parameter 'serviceJobId' when calling assignAppointmentResources(Async)");
        }
        // verify the required parameter 'appointmentId' is set
        if (appointmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'appointmentId' when calling assignAppointmentResources(Async)");
        }

        okhttp3.Call call = assignAppointmentResourcesCall(
                body, serviceJobId, appointmentId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may see higher rate and burst values than those shown here. For more information, see
     * [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body (required)
     * @param serviceJobId An Amazon-defined service job identifier. Get this value by calling the
     *     &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param appointmentId An Amazon-defined identifier of active service job appointment. (required)
     * @return AssignAppointmentResourcesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public AssignAppointmentResourcesResponse assignAppointmentResources(
            AssignAppointmentResourcesRequest body, String serviceJobId, String appointmentId)
            throws ApiException, LWAException {
        ApiResponse<AssignAppointmentResourcesResponse> resp =
                assignAppointmentResourcesWithHttpInfo(body, serviceJobId, appointmentId);
        return resp.getData();
    }

    /**
     * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may see higher rate and burst values than those shown here. For more information, see
     * [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body (required)
     * @param serviceJobId An Amazon-defined service job identifier. Get this value by calling the
     *     &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param appointmentId An Amazon-defined identifier of active service job appointment. (required)
     * @return ApiResponse&lt;AssignAppointmentResourcesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<AssignAppointmentResourcesResponse> assignAppointmentResourcesWithHttpInfo(
            AssignAppointmentResourcesRequest body, String serviceJobId, String appointmentId)
            throws ApiException, LWAException {
        okhttp3.Call call = assignAppointmentResourcesValidateBeforeCall(body, serviceJobId, appointmentId, null, null);
        Type localVarReturnType = new TypeToken<AssignAppointmentResourcesResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body (required)
     * @param serviceJobId An Amazon-defined service job identifier. Get this value by calling the
     *     &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param appointmentId An Amazon-defined identifier of active service job appointment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call assignAppointmentResourcesAsync(
            AssignAppointmentResourcesRequest body,
            String serviceJobId,
            String appointmentId,
            final ApiCallback<AssignAppointmentResourcesResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = assignAppointmentResourcesValidateBeforeCall(
                body, serviceJobId, appointmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AssignAppointmentResourcesResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelReservation
     *
     * @param reservationId Reservation Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelReservationCall(
            String reservationId,
            List<String> marketplaceIds,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service/v1/reservation/{reservationId}"
                .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelReservationValidateBeforeCall(
            String reservationId,
            List<String> marketplaceIds,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'reservationId' when calling cancelReservation(Async)");
        }
        // verify the required parameter 'marketplaceIds' is set
        if (marketplaceIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceIds' when calling cancelReservation(Async)");
        }

        okhttp3.Call call =
                cancelReservationCall(reservationId, marketplaceIds, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Cancel a reservation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reservationId Reservation Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @return CancelReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CancelReservationResponse cancelReservation(String reservationId, List<String> marketplaceIds)
            throws ApiException, LWAException {
        ApiResponse<CancelReservationResponse> resp = cancelReservationWithHttpInfo(reservationId, marketplaceIds);
        return resp.getData();
    }

    /**
     * Cancel a reservation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reservationId Reservation Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @return ApiResponse&lt;CancelReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CancelReservationResponse> cancelReservationWithHttpInfo(
            String reservationId, List<String> marketplaceIds) throws ApiException, LWAException {
        okhttp3.Call call = cancelReservationValidateBeforeCall(reservationId, marketplaceIds, null, null);
        Type localVarReturnType = new TypeToken<CancelReservationResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Cancel a reservation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5
     * | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The table above indicates the default rate and burst values
     * for this operation. Selling partners whose business demands require higher throughput may see higher rate and
     * burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reservationId Reservation Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelReservationAsync(
            String reservationId, List<String> marketplaceIds, final ApiCallback<CancelReservationResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = cancelReservationValidateBeforeCall(
                reservationId, marketplaceIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CancelReservationResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelServiceJobByServiceJobId
     *
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
     *     (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelServiceJobByServiceJobIdCall(
            String serviceJobId,
            String cancellationReasonCode,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service/v1/serviceJobs/{serviceJobId}/cancellations"
                .replaceAll("\\{" + "serviceJobId" + "\\}", apiClient.escapeString(serviceJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cancellationReasonCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("cancellationReasonCode", cancellationReasonCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelServiceJobByServiceJobIdValidateBeforeCall(
            String serviceJobId,
            String cancellationReasonCode,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'serviceJobId' is set
        if (serviceJobId == null) {
            throw new ApiException(
                    "Missing the required parameter 'serviceJobId' when calling cancelServiceJobByServiceJobId(Async)");
        }
        // verify the required parameter 'cancellationReasonCode' is set
        if (cancellationReasonCode == null) {
            throw new ApiException(
                    "Missing the required parameter 'cancellationReasonCode' when calling cancelServiceJobByServiceJobId(Async)");
        }

        okhttp3.Call call = cancelServiceJobByServiceJobIdCall(
                serviceJobId, cancellationReasonCode, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Cancels the service job indicated by the service job identifier specified. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
     *     (required)
     * @return CancelServiceJobByServiceJobIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CancelServiceJobByServiceJobIdResponse cancelServiceJobByServiceJobId(
            String serviceJobId, String cancellationReasonCode) throws ApiException, LWAException {
        ApiResponse<CancelServiceJobByServiceJobIdResponse> resp =
                cancelServiceJobByServiceJobIdWithHttpInfo(serviceJobId, cancellationReasonCode);
        return resp.getData();
    }

    /**
     * Cancels the service job indicated by the service job identifier specified. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
     *     (required)
     * @return ApiResponse&lt;CancelServiceJobByServiceJobIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CancelServiceJobByServiceJobIdResponse> cancelServiceJobByServiceJobIdWithHttpInfo(
            String serviceJobId, String cancellationReasonCode) throws ApiException, LWAException {
        okhttp3.Call call =
                cancelServiceJobByServiceJobIdValidateBeforeCall(serviceJobId, cancellationReasonCode, null, null);
        Type localVarReturnType = new TypeToken<CancelServiceJobByServiceJobIdResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Cancels the service job indicated by the service job identifier specified. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may see higher rate and burst values than those shown here. For more information, see
     * [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelServiceJobByServiceJobIdAsync(
            String serviceJobId,
            String cancellationReasonCode,
            final ApiCallback<CancelServiceJobByServiceJobIdResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = cancelServiceJobByServiceJobIdValidateBeforeCall(
                serviceJobId, cancellationReasonCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CancelServiceJobByServiceJobIdResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for completeServiceJobByServiceJobId
     *
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call completeServiceJobByServiceJobIdCall(
            String serviceJobId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service/v1/serviceJobs/{serviceJobId}/completions"
                .replaceAll("\\{" + "serviceJobId" + "\\}", apiClient.escapeString(serviceJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeServiceJobByServiceJobIdValidateBeforeCall(
            String serviceJobId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'serviceJobId' is set
        if (serviceJobId == null) {
            throw new ApiException(
                    "Missing the required parameter 'serviceJobId' when calling completeServiceJobByServiceJobId(Async)");
        }

        okhttp3.Call call =
                completeServiceJobByServiceJobIdCall(serviceJobId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Completes the service job indicated by the service job identifier specified. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @return CompleteServiceJobByServiceJobIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CompleteServiceJobByServiceJobIdResponse completeServiceJobByServiceJobId(String serviceJobId)
            throws ApiException, LWAException {
        ApiResponse<CompleteServiceJobByServiceJobIdResponse> resp =
                completeServiceJobByServiceJobIdWithHttpInfo(serviceJobId);
        return resp.getData();
    }

    /**
     * Completes the service job indicated by the service job identifier specified. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @return ApiResponse&lt;CompleteServiceJobByServiceJobIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CompleteServiceJobByServiceJobIdResponse> completeServiceJobByServiceJobIdWithHttpInfo(
            String serviceJobId) throws ApiException, LWAException {
        okhttp3.Call call = completeServiceJobByServiceJobIdValidateBeforeCall(serviceJobId, null, null);
        Type localVarReturnType = new TypeToken<CompleteServiceJobByServiceJobIdResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Completes the service job indicated by the service job identifier specified. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may see higher rate and burst values than those shown here. For more information, see
     * [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call completeServiceJobByServiceJobIdAsync(
            String serviceJobId, final ApiCallback<CompleteServiceJobByServiceJobIdResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = completeServiceJobByServiceJobIdValidateBeforeCall(
                serviceJobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompleteServiceJobByServiceJobIdResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createReservation
     *
     * @param body Reservation details (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createReservationCall(
            CreateReservationRequest body,
            List<String> marketplaceIds,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/service/v1/reservation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReservationValidateBeforeCall(
            CreateReservationRequest body,
            List<String> marketplaceIds,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createReservation(Async)");
        }
        // verify the required parameter 'marketplaceIds' is set
        if (marketplaceIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceIds' when calling createReservation(Async)");
        }

        okhttp3.Call call = createReservationCall(body, marketplaceIds, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Create a reservation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Reservation details (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @return CreateReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateReservationResponse createReservation(CreateReservationRequest body, List<String> marketplaceIds)
            throws ApiException, LWAException {
        ApiResponse<CreateReservationResponse> resp = createReservationWithHttpInfo(body, marketplaceIds);
        return resp.getData();
    }

    /**
     * Create a reservation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Reservation details (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @return ApiResponse&lt;CreateReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateReservationResponse> createReservationWithHttpInfo(
            CreateReservationRequest body, List<String> marketplaceIds) throws ApiException, LWAException {
        okhttp3.Call call = createReservationValidateBeforeCall(body, marketplaceIds, null, null);
        Type localVarReturnType = new TypeToken<CreateReservationResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Create a reservation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5
     * | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The table above indicates the default rate and burst values
     * for this operation. Selling partners whose business demands require higher throughput may see higher rate and
     * burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Reservation details (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createReservationAsync(
            CreateReservationRequest body,
            List<String> marketplaceIds,
            final ApiCallback<CreateReservationResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call =
                createReservationValidateBeforeCall(body, marketplaceIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateReservationResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createServiceDocumentUploadDestination
     *
     * @param body Upload document operation input details. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createServiceDocumentUploadDestinationCall(
            ServiceUploadDocument body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/service/v1/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceDocumentUploadDestinationValidateBeforeCall(
            ServiceUploadDocument body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling createServiceDocumentUploadDestination(Async)");
        }

        okhttp3.Call call = createServiceDocumentUploadDestinationCall(body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Creates an upload destination. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Upload document operation input details. (required)
     * @return CreateServiceDocumentUploadDestination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateServiceDocumentUploadDestination createServiceDocumentUploadDestination(ServiceUploadDocument body)
            throws ApiException, LWAException {
        ApiResponse<CreateServiceDocumentUploadDestination> resp =
                createServiceDocumentUploadDestinationWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates an upload destination. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Upload document operation input details. (required)
     * @return ApiResponse&lt;CreateServiceDocumentUploadDestination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateServiceDocumentUploadDestination> createServiceDocumentUploadDestinationWithHttpInfo(
            ServiceUploadDocument body) throws ApiException, LWAException {
        okhttp3.Call call = createServiceDocumentUploadDestinationValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreateServiceDocumentUploadDestination>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Creates an upload destination. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The table above indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may see higher rate
     * and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling
     * Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Upload document operation input details. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createServiceDocumentUploadDestinationAsync(
            ServiceUploadDocument body, final ApiCallback<CreateServiceDocumentUploadDestination> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createServiceDocumentUploadDestinationValidateBeforeCall(
                body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateServiceDocumentUploadDestination>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAppointmentSlots
     *
     * @param asin ASIN associated with the service. (required)
     * @param storeId Store identifier defining the region scope to retrive appointment slots. (required)
     * @param marketplaceIds An identifier for the marketplace for which appointment slots are queried (required)
     * @param startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO
     *     8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value
     *     is as per business configuration. (optional)
     * @param endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601
     *     format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is
     *     as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getAppointmentSlotsCall(
            String asin,
            String storeId,
            List<String> marketplaceIds,
            String startTime,
            String endTime,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service/v1/appointmentSlots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (asin != null) localVarQueryParams.addAll(apiClient.parameterToPair("asin", asin));
        if (storeId != null) localVarQueryParams.addAll(apiClient.parameterToPair("storeId", storeId));
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));
        if (startTime != null) localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null) localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppointmentSlotsValidateBeforeCall(
            String asin,
            String storeId,
            List<String> marketplaceIds,
            String startTime,
            String endTime,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'asin' is set
        if (asin == null) {
            throw new ApiException("Missing the required parameter 'asin' when calling getAppointmentSlots(Async)");
        }
        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling getAppointmentSlots(Async)");
        }
        // verify the required parameter 'marketplaceIds' is set
        if (marketplaceIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceIds' when calling getAppointmentSlots(Async)");
        }

        okhttp3.Call call = getAppointmentSlotsCall(
                asin, storeId, marketplaceIds, startTime, endTime, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Gets appointment slots as per the service context specified. **Usage Plan:** | Rate (requests per second) | Burst
     * | | ---- | ---- | | 20 | 40 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param asin ASIN associated with the service. (required)
     * @param storeId Store identifier defining the region scope to retrive appointment slots. (required)
     * @param marketplaceIds An identifier for the marketplace for which appointment slots are queried (required)
     * @param startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO
     *     8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value
     *     is as per business configuration. (optional)
     * @param endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601
     *     format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is
     *     as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     * @return GetAppointmentSlotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetAppointmentSlotsResponse getAppointmentSlots(
            String asin, String storeId, List<String> marketplaceIds, String startTime, String endTime)
            throws ApiException, LWAException {
        ApiResponse<GetAppointmentSlotsResponse> resp =
                getAppointmentSlotsWithHttpInfo(asin, storeId, marketplaceIds, startTime, endTime);
        return resp.getData();
    }

    /**
     * Gets appointment slots as per the service context specified. **Usage Plan:** | Rate (requests per second) | Burst
     * | | ---- | ---- | | 20 | 40 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param asin ASIN associated with the service. (required)
     * @param storeId Store identifier defining the region scope to retrive appointment slots. (required)
     * @param marketplaceIds An identifier for the marketplace for which appointment slots are queried (required)
     * @param startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO
     *     8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value
     *     is as per business configuration. (optional)
     * @param endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601
     *     format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is
     *     as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     * @return ApiResponse&lt;GetAppointmentSlotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetAppointmentSlotsResponse> getAppointmentSlotsWithHttpInfo(
            String asin, String storeId, List<String> marketplaceIds, String startTime, String endTime)
            throws ApiException, LWAException {
        okhttp3.Call call =
                getAppointmentSlotsValidateBeforeCall(asin, storeId, marketplaceIds, startTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<GetAppointmentSlotsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Gets appointment slots as per the service context specified. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 20 | 40 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage
     * Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param asin ASIN associated with the service. (required)
     * @param storeId Store identifier defining the region scope to retrive appointment slots. (required)
     * @param marketplaceIds An identifier for the marketplace for which appointment slots are queried (required)
     * @param startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO
     *     8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value
     *     is as per business configuration. (optional)
     * @param endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601
     *     format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is
     *     as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getAppointmentSlotsAsync(
            String asin,
            String storeId,
            List<String> marketplaceIds,
            String startTime,
            String endTime,
            final ApiCallback<GetAppointmentSlotsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getAppointmentSlotsValidateBeforeCall(
                asin, storeId, marketplaceIds, startTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAppointmentSlotsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAppointmmentSlotsByJobId
     *
     * @param serviceJobId A service job identifier to retrive appointment slots for associated service. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO
     *     8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value
     *     is as per business configuration. (optional)
     * @param endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601
     *     format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is
     *     as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getAppointmmentSlotsByJobIdCall(
            String serviceJobId,
            List<String> marketplaceIds,
            String startTime,
            String endTime,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointmentSlots"
                .replaceAll("\\{" + "serviceJobId" + "\\}", apiClient.escapeString(serviceJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));
        if (startTime != null) localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null) localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppointmmentSlotsByJobIdValidateBeforeCall(
            String serviceJobId,
            List<String> marketplaceIds,
            String startTime,
            String endTime,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'serviceJobId' is set
        if (serviceJobId == null) {
            throw new ApiException(
                    "Missing the required parameter 'serviceJobId' when calling getAppointmmentSlotsByJobId(Async)");
        }
        // verify the required parameter 'marketplaceIds' is set
        if (marketplaceIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceIds' when calling getAppointmmentSlotsByJobId(Async)");
        }

        okhttp3.Call call = getAppointmmentSlotsByJobIdCall(
                serviceJobId, marketplaceIds, startTime, endTime, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Gets appointment slots for the service associated with the service job id specified. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage
     * Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId A service job identifier to retrive appointment slots for associated service. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO
     *     8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value
     *     is as per business configuration. (optional)
     * @param endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601
     *     format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is
     *     as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     * @return GetAppointmentSlotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetAppointmentSlotsResponse getAppointmmentSlotsByJobId(
            String serviceJobId, List<String> marketplaceIds, String startTime, String endTime)
            throws ApiException, LWAException {
        ApiResponse<GetAppointmentSlotsResponse> resp =
                getAppointmmentSlotsByJobIdWithHttpInfo(serviceJobId, marketplaceIds, startTime, endTime);
        return resp.getData();
    }

    /**
     * Gets appointment slots for the service associated with the service job id specified. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage
     * Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId A service job identifier to retrive appointment slots for associated service. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO
     *     8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value
     *     is as per business configuration. (optional)
     * @param endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601
     *     format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is
     *     as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     * @return ApiResponse&lt;GetAppointmentSlotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetAppointmentSlotsResponse> getAppointmmentSlotsByJobIdWithHttpInfo(
            String serviceJobId, List<String> marketplaceIds, String startTime, String endTime)
            throws ApiException, LWAException {
        okhttp3.Call call = getAppointmmentSlotsByJobIdValidateBeforeCall(
                serviceJobId, marketplaceIds, startTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<GetAppointmentSlotsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Gets appointment slots for the service associated with the service job id specified. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId A service job identifier to retrive appointment slots for associated service. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param startTime A time from which the appointment slots will be retrieved. The specified time must be in ISO
     *     8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value
     *     is as per business configuration. (optional)
     * @param endTime A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601
     *     format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is
     *     as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getAppointmmentSlotsByJobIdAsync(
            String serviceJobId,
            List<String> marketplaceIds,
            String startTime,
            String endTime,
            final ApiCallback<GetAppointmentSlotsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getAppointmmentSlotsByJobIdValidateBeforeCall(
                serviceJobId, marketplaceIds, startTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAppointmentSlotsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFixedSlotCapacity
     *
     * @param body Request body. (required)
     * @param resourceId Resource Identifier. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param nextPageToken Next page token returned in the response of your previous request. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFixedSlotCapacityCall(
            FixedSlotCapacityQuery body,
            String resourceId,
            List<String> marketplaceIds,
            String nextPageToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/service/v1/serviceResources/{resourceId}/capacity/fixed"
                .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));
        if (nextPageToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("nextPageToken", nextPageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFixedSlotCapacityValidateBeforeCall(
            FixedSlotCapacityQuery body,
            String resourceId,
            List<String> marketplaceIds,
            String nextPageToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getFixedSlotCapacity(Async)");
        }
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'resourceId' when calling getFixedSlotCapacity(Async)");
        }
        // verify the required parameter 'marketplaceIds' is set
        if (marketplaceIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceIds' when calling getFixedSlotCapacity(Async)");
        }

        okhttp3.Call call = getFixedSlotCapacityCall(
                body, resourceId, marketplaceIds, nextPageToken, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Provides capacity in fixed-size slots. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5
     * | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The table above indicates the default rate and burst values
     * for this operation. Selling partners whose business demands require higher throughput may see higher rate and
     * burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Request body. (required)
     * @param resourceId Resource Identifier. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param nextPageToken Next page token returned in the response of your previous request. (optional)
     * @return FixedSlotCapacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public FixedSlotCapacity getFixedSlotCapacity(
            FixedSlotCapacityQuery body, String resourceId, List<String> marketplaceIds, String nextPageToken)
            throws ApiException, LWAException {
        ApiResponse<FixedSlotCapacity> resp =
                getFixedSlotCapacityWithHttpInfo(body, resourceId, marketplaceIds, nextPageToken);
        return resp.getData();
    }

    /**
     * Provides capacity in fixed-size slots. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5
     * | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The table above indicates the default rate and burst values
     * for this operation. Selling partners whose business demands require higher throughput may see higher rate and
     * burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Request body. (required)
     * @param resourceId Resource Identifier. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param nextPageToken Next page token returned in the response of your previous request. (optional)
     * @return ApiResponse&lt;FixedSlotCapacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<FixedSlotCapacity> getFixedSlotCapacityWithHttpInfo(
            FixedSlotCapacityQuery body, String resourceId, List<String> marketplaceIds, String nextPageToken)
            throws ApiException, LWAException {
        okhttp3.Call call =
                getFixedSlotCapacityValidateBeforeCall(body, resourceId, marketplaceIds, nextPageToken, null, null);
        Type localVarReturnType = new TypeToken<FixedSlotCapacity>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Provides capacity in fixed-size slots. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Request body. (required)
     * @param resourceId Resource Identifier. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param nextPageToken Next page token returned in the response of your previous request. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFixedSlotCapacityAsync(
            FixedSlotCapacityQuery body,
            String resourceId,
            List<String> marketplaceIds,
            String nextPageToken,
            final ApiCallback<FixedSlotCapacity> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getFixedSlotCapacityValidateBeforeCall(
                body, resourceId, marketplaceIds, nextPageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FixedSlotCapacity>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRangeSlotCapacity
     *
     * @param body Request body. (required)
     * @param resourceId Resource Identifier. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param nextPageToken Next page token returned in the response of your previous request. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getRangeSlotCapacityCall(
            RangeSlotCapacityQuery body,
            String resourceId,
            List<String> marketplaceIds,
            String nextPageToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/service/v1/serviceResources/{resourceId}/capacity/range"
                .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));
        if (nextPageToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("nextPageToken", nextPageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRangeSlotCapacityValidateBeforeCall(
            RangeSlotCapacityQuery body,
            String resourceId,
            List<String> marketplaceIds,
            String nextPageToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getRangeSlotCapacity(Async)");
        }
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'resourceId' when calling getRangeSlotCapacity(Async)");
        }
        // verify the required parameter 'marketplaceIds' is set
        if (marketplaceIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceIds' when calling getRangeSlotCapacity(Async)");
        }

        okhttp3.Call call = getRangeSlotCapacityCall(
                body, resourceId, marketplaceIds, nextPageToken, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Provides capacity slots in a format similar to availability records. **Usage Plan:** | Rate (requests per second)
     * | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage
     * plan rate limits that were applied to the requested operation, when available. The table above indicates the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Request body. (required)
     * @param resourceId Resource Identifier. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param nextPageToken Next page token returned in the response of your previous request. (optional)
     * @return RangeSlotCapacity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public RangeSlotCapacity getRangeSlotCapacity(
            RangeSlotCapacityQuery body, String resourceId, List<String> marketplaceIds, String nextPageToken)
            throws ApiException, LWAException {
        ApiResponse<RangeSlotCapacity> resp =
                getRangeSlotCapacityWithHttpInfo(body, resourceId, marketplaceIds, nextPageToken);
        return resp.getData();
    }

    /**
     * Provides capacity slots in a format similar to availability records. **Usage Plan:** | Rate (requests per second)
     * | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage
     * plan rate limits that were applied to the requested operation, when available. The table above indicates the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Request body. (required)
     * @param resourceId Resource Identifier. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param nextPageToken Next page token returned in the response of your previous request. (optional)
     * @return ApiResponse&lt;RangeSlotCapacity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<RangeSlotCapacity> getRangeSlotCapacityWithHttpInfo(
            RangeSlotCapacityQuery body, String resourceId, List<String> marketplaceIds, String nextPageToken)
            throws ApiException, LWAException {
        okhttp3.Call call =
                getRangeSlotCapacityValidateBeforeCall(body, resourceId, marketplaceIds, nextPageToken, null, null);
        Type localVarReturnType = new TypeToken<RangeSlotCapacity>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Provides capacity slots in a format similar to availability records. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage
     * Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Request body. (required)
     * @param resourceId Resource Identifier. (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param nextPageToken Next page token returned in the response of your previous request. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getRangeSlotCapacityAsync(
            RangeSlotCapacityQuery body,
            String resourceId,
            List<String> marketplaceIds,
            String nextPageToken,
            final ApiCallback<RangeSlotCapacity> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getRangeSlotCapacityValidateBeforeCall(
                body, resourceId, marketplaceIds, nextPageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RangeSlotCapacity>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceJobByServiceJobId
     *
     * @param serviceJobId A service job identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getServiceJobByServiceJobIdCall(
            String serviceJobId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service/v1/serviceJobs/{serviceJobId}"
                .replaceAll("\\{" + "serviceJobId" + "\\}", apiClient.escapeString(serviceJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceJobByServiceJobIdValidateBeforeCall(
            String serviceJobId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'serviceJobId' is set
        if (serviceJobId == null) {
            throw new ApiException(
                    "Missing the required parameter 'serviceJobId' when calling getServiceJobByServiceJobId(Async)");
        }

        okhttp3.Call call = getServiceJobByServiceJobIdCall(serviceJobId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 20 | 40 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage
     * Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId A service job identifier. (required)
     * @return GetServiceJobByServiceJobIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetServiceJobByServiceJobIdResponse getServiceJobByServiceJobId(String serviceJobId)
            throws ApiException, LWAException {
        ApiResponse<GetServiceJobByServiceJobIdResponse> resp = getServiceJobByServiceJobIdWithHttpInfo(serviceJobId);
        return resp.getData();
    }

    /**
     * Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 20 | 40 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage
     * Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId A service job identifier. (required)
     * @return ApiResponse&lt;GetServiceJobByServiceJobIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetServiceJobByServiceJobIdResponse> getServiceJobByServiceJobIdWithHttpInfo(String serviceJobId)
            throws ApiException, LWAException {
        okhttp3.Call call = getServiceJobByServiceJobIdValidateBeforeCall(serviceJobId, null, null);
        Type localVarReturnType = new TypeToken<GetServiceJobByServiceJobIdResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Gets details of service job indicated by the provided &#x60;serviceJobID&#x60;. **Usage Plan:**
     * | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param serviceJobId A service job identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getServiceJobByServiceJobIdAsync(
            String serviceJobId, final ApiCallback<GetServiceJobByServiceJobIdResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call =
                getServiceJobByServiceJobIdValidateBeforeCall(serviceJobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetServiceJobByServiceJobIdResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getServiceJobs
     *
     * @param marketplaceIds Used to select jobs that were placed in the specified marketplaces. (required)
     * @param serviceOrderIds List of service order ids for the query you want to perform.Max values supported 20.
     *     (optional)
     * @param serviceJobStatus A list of one or more job status by which to filter the list of jobs. (optional)
     * @param pageToken String returned in the response of your previous request. (optional)
     * @param pageSize A non-negative integer that indicates the maximum number of jobs to return in the list, Value
     *     must be 1 - 20. Default 20. (optional, default to 20)
     * @param sortField Sort fields on which you want to sort the output. (optional)
     * @param sortOrder Sort order for the query you want to perform. (optional)
     * @param createdAfter A date used for selecting jobs created at or after a specified time. Must be in ISO 8601
     *     format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60;
     *     and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param createdBefore A date used for selecting jobs created at or before a specified time. Must be in ISO 8601
     *     format. (optional)
     * @param lastUpdatedAfter A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601
     *     format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and
     *     &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param lastUpdatedBefore A date used for selecting jobs updated at or before a specified time. Must be in ISO
     *     8601 format. (optional)
     * @param scheduleStartDate A date used for filtering jobs schedules at or after a specified time. Must be in ISO
     *     8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param scheduleEndDate A date used for filtering jobs schedules at or before a specified time. Must be in ISO
     *     8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param asins List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
     *     (optional)
     * @param requiredSkills A defined set of related knowledge, skills, experience, tools, materials, and work
     *     processes common to service delivery for a set of products and/or service scenarios. Max values supported is
     *     20. (optional)
     * @param storeIds List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getServiceJobsCall(
            List<String> marketplaceIds,
            List<String> serviceOrderIds,
            List<String> serviceJobStatus,
            String pageToken,
            Integer pageSize,
            String sortField,
            String sortOrder,
            String createdAfter,
            String createdBefore,
            String lastUpdatedAfter,
            String lastUpdatedBefore,
            String scheduleStartDate,
            String scheduleEndDate,
            List<String> asins,
            List<String> requiredSkills,
            List<String> storeIds,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/service/v1/serviceJobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceOrderIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "serviceOrderIds", serviceOrderIds));
        if (serviceJobStatus != null)
            localVarCollectionQueryParams.addAll(
                    apiClient.parameterToPairs("csv", "serviceJobStatus", serviceJobStatus));
        if (pageToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sortField != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortField", sortField));
        if (sortOrder != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (createdAfter != null) localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (lastUpdatedAfter != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdatedAfter", lastUpdatedAfter));
        if (lastUpdatedBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdatedBefore", lastUpdatedBefore));
        if (scheduleStartDate != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("scheduleStartDate", scheduleStartDate));
        if (scheduleEndDate != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("scheduleEndDate", scheduleEndDate));
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));
        if (asins != null) localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "asins", asins));
        if (requiredSkills != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "requiredSkills", requiredSkills));
        if (storeIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "storeIds", storeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceJobsValidateBeforeCall(
            List<String> marketplaceIds,
            List<String> serviceOrderIds,
            List<String> serviceJobStatus,
            String pageToken,
            Integer pageSize,
            String sortField,
            String sortOrder,
            String createdAfter,
            String createdBefore,
            String lastUpdatedAfter,
            String lastUpdatedBefore,
            String scheduleStartDate,
            String scheduleEndDate,
            List<String> asins,
            List<String> requiredSkills,
            List<String> storeIds,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'marketplaceIds' is set
        if (marketplaceIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceIds' when calling getServiceJobs(Async)");
        }

        okhttp3.Call call = getServiceJobsCall(
                marketplaceIds,
                serviceOrderIds,
                serviceJobStatus,
                pageToken,
                pageSize,
                sortField,
                sortOrder,
                createdAfter,
                createdBefore,
                lastUpdatedAfter,
                lastUpdatedBefore,
                scheduleStartDate,
                scheduleEndDate,
                asins,
                requiredSkills,
                storeIds,
                progressListener,
                progressRequestListener);
        return call;
    }

    /**
     * Gets service job details for the specified filter query. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 10 | 40 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceIds Used to select jobs that were placed in the specified marketplaces. (required)
     * @param serviceOrderIds List of service order ids for the query you want to perform.Max values supported 20.
     *     (optional)
     * @param serviceJobStatus A list of one or more job status by which to filter the list of jobs. (optional)
     * @param pageToken String returned in the response of your previous request. (optional)
     * @param pageSize A non-negative integer that indicates the maximum number of jobs to return in the list, Value
     *     must be 1 - 20. Default 20. (optional, default to 20)
     * @param sortField Sort fields on which you want to sort the output. (optional)
     * @param sortOrder Sort order for the query you want to perform. (optional)
     * @param createdAfter A date used for selecting jobs created at or after a specified time. Must be in ISO 8601
     *     format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60;
     *     and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param createdBefore A date used for selecting jobs created at or before a specified time. Must be in ISO 8601
     *     format. (optional)
     * @param lastUpdatedAfter A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601
     *     format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and
     *     &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param lastUpdatedBefore A date used for selecting jobs updated at or before a specified time. Must be in ISO
     *     8601 format. (optional)
     * @param scheduleStartDate A date used for filtering jobs schedules at or after a specified time. Must be in ISO
     *     8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param scheduleEndDate A date used for filtering jobs schedules at or before a specified time. Must be in ISO
     *     8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param asins List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
     *     (optional)
     * @param requiredSkills A defined set of related knowledge, skills, experience, tools, materials, and work
     *     processes common to service delivery for a set of products and/or service scenarios. Max values supported is
     *     20. (optional)
     * @param storeIds List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)
     * @return GetServiceJobsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetServiceJobsResponse getServiceJobs(
            List<String> marketplaceIds,
            List<String> serviceOrderIds,
            List<String> serviceJobStatus,
            String pageToken,
            Integer pageSize,
            String sortField,
            String sortOrder,
            String createdAfter,
            String createdBefore,
            String lastUpdatedAfter,
            String lastUpdatedBefore,
            String scheduleStartDate,
            String scheduleEndDate,
            List<String> asins,
            List<String> requiredSkills,
            List<String> storeIds)
            throws ApiException, LWAException {
        ApiResponse<GetServiceJobsResponse> resp = getServiceJobsWithHttpInfo(
                marketplaceIds,
                serviceOrderIds,
                serviceJobStatus,
                pageToken,
                pageSize,
                sortField,
                sortOrder,
                createdAfter,
                createdBefore,
                lastUpdatedAfter,
                lastUpdatedBefore,
                scheduleStartDate,
                scheduleEndDate,
                asins,
                requiredSkills,
                storeIds);
        return resp.getData();
    }

    /**
     * Gets service job details for the specified filter query. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 10 | 40 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceIds Used to select jobs that were placed in the specified marketplaces. (required)
     * @param serviceOrderIds List of service order ids for the query you want to perform.Max values supported 20.
     *     (optional)
     * @param serviceJobStatus A list of one or more job status by which to filter the list of jobs. (optional)
     * @param pageToken String returned in the response of your previous request. (optional)
     * @param pageSize A non-negative integer that indicates the maximum number of jobs to return in the list, Value
     *     must be 1 - 20. Default 20. (optional, default to 20)
     * @param sortField Sort fields on which you want to sort the output. (optional)
     * @param sortOrder Sort order for the query you want to perform. (optional)
     * @param createdAfter A date used for selecting jobs created at or after a specified time. Must be in ISO 8601
     *     format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60;
     *     and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param createdBefore A date used for selecting jobs created at or before a specified time. Must be in ISO 8601
     *     format. (optional)
     * @param lastUpdatedAfter A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601
     *     format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and
     *     &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param lastUpdatedBefore A date used for selecting jobs updated at or before a specified time. Must be in ISO
     *     8601 format. (optional)
     * @param scheduleStartDate A date used for filtering jobs schedules at or after a specified time. Must be in ISO
     *     8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param scheduleEndDate A date used for filtering jobs schedules at or before a specified time. Must be in ISO
     *     8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param asins List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
     *     (optional)
     * @param requiredSkills A defined set of related knowledge, skills, experience, tools, materials, and work
     *     processes common to service delivery for a set of products and/or service scenarios. Max values supported is
     *     20. (optional)
     * @param storeIds List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)
     * @return ApiResponse&lt;GetServiceJobsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetServiceJobsResponse> getServiceJobsWithHttpInfo(
            List<String> marketplaceIds,
            List<String> serviceOrderIds,
            List<String> serviceJobStatus,
            String pageToken,
            Integer pageSize,
            String sortField,
            String sortOrder,
            String createdAfter,
            String createdBefore,
            String lastUpdatedAfter,
            String lastUpdatedBefore,
            String scheduleStartDate,
            String scheduleEndDate,
            List<String> asins,
            List<String> requiredSkills,
            List<String> storeIds)
            throws ApiException, LWAException {
        okhttp3.Call call = getServiceJobsValidateBeforeCall(
                marketplaceIds,
                serviceOrderIds,
                serviceJobStatus,
                pageToken,
                pageSize,
                sortField,
                sortOrder,
                createdAfter,
                createdBefore,
                lastUpdatedAfter,
                lastUpdatedBefore,
                scheduleStartDate,
                scheduleEndDate,
                asins,
                requiredSkills,
                storeIds,
                null,
                null);
        Type localVarReturnType = new TypeToken<GetServiceJobsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Gets service job details for the specified filter query. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 10 | 40 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceIds Used to select jobs that were placed in the specified marketplaces. (required)
     * @param serviceOrderIds List of service order ids for the query you want to perform.Max values supported 20.
     *     (optional)
     * @param serviceJobStatus A list of one or more job status by which to filter the list of jobs. (optional)
     * @param pageToken String returned in the response of your previous request. (optional)
     * @param pageSize A non-negative integer that indicates the maximum number of jobs to return in the list, Value
     *     must be 1 - 20. Default 20. (optional, default to 20)
     * @param sortField Sort fields on which you want to sort the output. (optional)
     * @param sortOrder Sort order for the query you want to perform. (optional)
     * @param createdAfter A date used for selecting jobs created at or after a specified time. Must be in ISO 8601
     *     format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60;
     *     and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param createdBefore A date used for selecting jobs created at or before a specified time. Must be in ISO 8601
     *     format. (optional)
     * @param lastUpdatedAfter A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601
     *     format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and
     *     &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param lastUpdatedBefore A date used for selecting jobs updated at or before a specified time. Must be in ISO
     *     8601 format. (optional)
     * @param scheduleStartDate A date used for filtering jobs schedules at or after a specified time. Must be in ISO
     *     8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param scheduleEndDate A date used for filtering jobs schedules at or before a specified time. Must be in ISO
     *     8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param asins List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
     *     (optional)
     * @param requiredSkills A defined set of related knowledge, skills, experience, tools, materials, and work
     *     processes common to service delivery for a set of products and/or service scenarios. Max values supported is
     *     20. (optional)
     * @param storeIds List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getServiceJobsAsync(
            List<String> marketplaceIds,
            List<String> serviceOrderIds,
            List<String> serviceJobStatus,
            String pageToken,
            Integer pageSize,
            String sortField,
            String sortOrder,
            String createdAfter,
            String createdBefore,
            String lastUpdatedAfter,
            String lastUpdatedBefore,
            String scheduleStartDate,
            String scheduleEndDate,
            List<String> asins,
            List<String> requiredSkills,
            List<String> storeIds,
            final ApiCallback<GetServiceJobsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getServiceJobsValidateBeforeCall(
                marketplaceIds,
                serviceOrderIds,
                serviceJobStatus,
                pageToken,
                pageSize,
                sortField,
                sortOrder,
                createdAfter,
                createdBefore,
                lastUpdatedAfter,
                lastUpdatedBefore,
                scheduleStartDate,
                scheduleEndDate,
                asins,
                requiredSkills,
                storeIds,
                progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<GetServiceJobsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rescheduleAppointmentForServiceJobByServiceJobId
     *
     * @param body Reschedule appointment operation input details. (required)
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param appointmentId An existing appointment identifier for the Service Job. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call rescheduleAppointmentForServiceJobByServiceJobIdCall(
            RescheduleAppointmentRequest body,
            String serviceJobId,
            String appointmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}"
                .replaceAll("\\{" + "serviceJobId" + "\\}", apiClient.escapeString(serviceJobId.toString()))
                .replaceAll("\\{" + "appointmentId" + "\\}", apiClient.escapeString(appointmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rescheduleAppointmentForServiceJobByServiceJobIdValidateBeforeCall(
            RescheduleAppointmentRequest body,
            String serviceJobId,
            String appointmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling rescheduleAppointmentForServiceJobByServiceJobId(Async)");
        }
        // verify the required parameter 'serviceJobId' is set
        if (serviceJobId == null) {
            throw new ApiException(
                    "Missing the required parameter 'serviceJobId' when calling rescheduleAppointmentForServiceJobByServiceJobId(Async)");
        }
        // verify the required parameter 'appointmentId' is set
        if (appointmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'appointmentId' when calling rescheduleAppointmentForServiceJobByServiceJobId(Async)");
        }

        okhttp3.Call call = rescheduleAppointmentForServiceJobByServiceJobIdCall(
                body, serviceJobId, appointmentId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Reschedules an appointment for the service job indicated by the service job identifier specified. **Usage Plan:**
     * | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may see higher rate and burst values than those shown here. For more information, see
     * [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Reschedule appointment operation input details. (required)
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param appointmentId An existing appointment identifier for the Service Job. (required)
     * @return SetAppointmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public SetAppointmentResponse rescheduleAppointmentForServiceJobByServiceJobId(
            RescheduleAppointmentRequest body, String serviceJobId, String appointmentId)
            throws ApiException, LWAException {
        ApiResponse<SetAppointmentResponse> resp =
                rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(body, serviceJobId, appointmentId);
        return resp.getData();
    }

    /**
     * Reschedules an appointment for the service job indicated by the service job identifier specified. **Usage Plan:**
     * | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may see higher rate and burst values than those shown here. For more information, see
     * [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Reschedule appointment operation input details. (required)
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param appointmentId An existing appointment identifier for the Service Job. (required)
     * @return ApiResponse&lt;SetAppointmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<SetAppointmentResponse> rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(
            RescheduleAppointmentRequest body, String serviceJobId, String appointmentId)
            throws ApiException, LWAException {
        okhttp3.Call call = rescheduleAppointmentForServiceJobByServiceJobIdValidateBeforeCall(
                body, serviceJobId, appointmentId, null, null);
        Type localVarReturnType = new TypeToken<SetAppointmentResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Reschedules an appointment for the service job indicated by the service job identifier
     * specified. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Reschedule appointment operation input details. (required)
     * @param serviceJobId An Amazon defined service job identifier. (required)
     * @param appointmentId An existing appointment identifier for the Service Job. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call rescheduleAppointmentForServiceJobByServiceJobIdAsync(
            RescheduleAppointmentRequest body,
            String serviceJobId,
            String appointmentId,
            final ApiCallback<SetAppointmentResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = rescheduleAppointmentForServiceJobByServiceJobIdValidateBeforeCall(
                body, serviceJobId, appointmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SetAppointmentResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setAppointmentFulfillmentData
     *
     * @param body Appointment fulfillment data collection details. (required)
     * @param serviceJobId An Amazon-defined service job identifier. Get this value by calling the
     *     &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param appointmentId An Amazon-defined identifier of active service job appointment. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call setAppointmentFulfillmentDataCall(
            SetAppointmentFulfillmentDataRequest body,
            String serviceJobId,
            String appointmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment"
                .replaceAll("\\{" + "serviceJobId" + "\\}", apiClient.escapeString(serviceJobId.toString()))
                .replaceAll("\\{" + "appointmentId" + "\\}", apiClient.escapeString(appointmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAppointmentFulfillmentDataValidateBeforeCall(
            SetAppointmentFulfillmentDataRequest body,
            String serviceJobId,
            String appointmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling setAppointmentFulfillmentData(Async)");
        }
        // verify the required parameter 'serviceJobId' is set
        if (serviceJobId == null) {
            throw new ApiException(
                    "Missing the required parameter 'serviceJobId' when calling setAppointmentFulfillmentData(Async)");
        }
        // verify the required parameter 'appointmentId' is set
        if (appointmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'appointmentId' when calling setAppointmentFulfillmentData(Async)");
        }

        okhttp3.Call call = setAppointmentFulfillmentDataCall(
                body, serviceJobId, appointmentId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Appointment fulfillment data collection details. (required)
     * @param serviceJobId An Amazon-defined service job identifier. Get this value by calling the
     *     &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param appointmentId An Amazon-defined identifier of active service job appointment. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public String setAppointmentFulfillmentData(
            SetAppointmentFulfillmentDataRequest body, String serviceJobId, String appointmentId)
            throws ApiException, LWAException {
        ApiResponse<String> resp = setAppointmentFulfillmentDataWithHttpInfo(body, serviceJobId, appointmentId);
        return resp.getData();
    }

    /**
     * Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and &#x60;appointmentID&#x60;.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Appointment fulfillment data collection details. (required)
     * @param serviceJobId An Amazon-defined service job identifier. Get this value by calling the
     *     &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param appointmentId An Amazon-defined identifier of active service job appointment. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<String> setAppointmentFulfillmentDataWithHttpInfo(
            SetAppointmentFulfillmentDataRequest body, String serviceJobId, String appointmentId)
            throws ApiException, LWAException {
        okhttp3.Call call =
                setAppointmentFulfillmentDataValidateBeforeCall(body, serviceJobId, appointmentId, null, null);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Updates the appointment fulfillment data related to a given &#x60;jobID&#x60; and
     * &#x60;appointmentID&#x60;. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Appointment fulfillment data collection details. (required)
     * @param serviceJobId An Amazon-defined service job identifier. Get this value by calling the
     *     &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param appointmentId An Amazon-defined identifier of active service job appointment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call setAppointmentFulfillmentDataAsync(
            SetAppointmentFulfillmentDataRequest body,
            String serviceJobId,
            String appointmentId,
            final ApiCallback<String> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = setAppointmentFulfillmentDataValidateBeforeCall(
                body, serviceJobId, appointmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateReservation
     *
     * @param body Reservation details (required)
     * @param reservationId Reservation Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateReservationCall(
            UpdateReservationRequest body,
            String reservationId,
            List<String> marketplaceIds,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/service/v1/reservation/{reservationId}"
                .replaceAll("\\{" + "reservationId" + "\\}", apiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReservationValidateBeforeCall(
            UpdateReservationRequest body,
            String reservationId,
            List<String> marketplaceIds,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateReservation(Async)");
        }
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'reservationId' when calling updateReservation(Async)");
        }
        // verify the required parameter 'marketplaceIds' is set
        if (marketplaceIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceIds' when calling updateReservation(Async)");
        }

        okhttp3.Call call =
                updateReservationCall(body, reservationId, marketplaceIds, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Update a reservation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Reservation details (required)
     * @param reservationId Reservation Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @return UpdateReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public UpdateReservationResponse updateReservation(
            UpdateReservationRequest body, String reservationId, List<String> marketplaceIds)
            throws ApiException, LWAException {
        ApiResponse<UpdateReservationResponse> resp =
                updateReservationWithHttpInfo(body, reservationId, marketplaceIds);
        return resp.getData();
    }

    /**
     * Update a reservation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Reservation details (required)
     * @param reservationId Reservation Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @return ApiResponse&lt;UpdateReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<UpdateReservationResponse> updateReservationWithHttpInfo(
            UpdateReservationRequest body, String reservationId, List<String> marketplaceIds)
            throws ApiException, LWAException {
        okhttp3.Call call = updateReservationValidateBeforeCall(body, reservationId, marketplaceIds, null, null);
        Type localVarReturnType = new TypeToken<UpdateReservationResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Update a reservation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5
     * | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The table above indicates the default rate and burst values
     * for this operation. Selling partners whose business demands require higher throughput may see higher rate and
     * burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Reservation details (required)
     * @param reservationId Reservation Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateReservationAsync(
            UpdateReservationRequest body,
            String reservationId,
            List<String> marketplaceIds,
            final ApiCallback<UpdateReservationResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateReservationValidateBeforeCall(
                body, reservationId, marketplaceIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateReservationResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSchedule
     *
     * @param body Schedule details (required)
     * @param resourceId Resource (store) Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateScheduleCall(
            UpdateScheduleRequest body,
            String resourceId,
            List<String> marketplaceIds,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/service/v1/serviceResources/{resourceId}/schedules"
                .replaceAll("\\{" + "resourceId" + "\\}", apiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScheduleValidateBeforeCall(
            UpdateScheduleRequest body,
            String resourceId,
            List<String> marketplaceIds,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSchedule(Async)");
        }
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling updateSchedule(Async)");
        }
        // verify the required parameter 'marketplaceIds' is set
        if (marketplaceIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceIds' when calling updateSchedule(Async)");
        }

        okhttp3.Call call =
                updateScheduleCall(body, resourceId, marketplaceIds, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Update the schedule of the given resource. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- |
     * | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The table above indicates the default rate and burst values
     * for this operation. Selling partners whose business demands require higher throughput may see higher rate and
     * burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Schedule details (required)
     * @param resourceId Resource (store) Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @return UpdateScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public UpdateScheduleResponse updateSchedule(
            UpdateScheduleRequest body, String resourceId, List<String> marketplaceIds)
            throws ApiException, LWAException {
        ApiResponse<UpdateScheduleResponse> resp = updateScheduleWithHttpInfo(body, resourceId, marketplaceIds);
        return resp.getData();
    }

    /**
     * Update the schedule of the given resource. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- |
     * | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The table above indicates the default rate and burst values
     * for this operation. Selling partners whose business demands require higher throughput may see higher rate and
     * burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Schedule details (required)
     * @param resourceId Resource (store) Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @return ApiResponse&lt;UpdateScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<UpdateScheduleResponse> updateScheduleWithHttpInfo(
            UpdateScheduleRequest body, String resourceId, List<String> marketplaceIds)
            throws ApiException, LWAException {
        okhttp3.Call call = updateScheduleValidateBeforeCall(body, resourceId, marketplaceIds, null, null);
        Type localVarReturnType = new TypeToken<UpdateScheduleResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Update the schedule of the given resource. **Usage Plan:** | Rate (requests per second) | Burst
     * | | ---- | ---- | | 5 | 20 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Schedule details (required)
     * @param resourceId Resource (store) Identifier (required)
     * @param marketplaceIds An identifier for the marketplace in which the resource operates. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateScheduleAsync(
            UpdateScheduleRequest body,
            String resourceId,
            List<String> marketplaceIds,
            final ApiCallback<UpdateScheduleResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateScheduleValidateBeforeCall(
                body, resourceId, marketplaceIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateScheduleResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private RateLimitConfiguration rateLimitConfiguration;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration) {
            this.rateLimitConfiguration = rateLimitConfiguration;
            return this;
        }

        public Builder disableRateLimitOnRequests() {
            this.rateLimitConfiguration = null;
            return this;
        }

        public ServiceApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new ServiceApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint)
                    .setRateLimiter(rateLimitConfiguration));
        }
    }
}
