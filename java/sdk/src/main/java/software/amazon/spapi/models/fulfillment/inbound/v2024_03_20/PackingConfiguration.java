/*
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.fulfillment.inbound.v2024_03_20;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A way to configure this packing option. Some box content information sources might not be allowed. Non-standard
 * minimum and maximum box weights might be enforced.
 */
@Schema(
        description =
                "A way to configure this packing option. Some box content information sources might not be allowed. Non-standard minimum and maximum box weights might be enforced.")
public class PackingConfiguration {
    @SerializedName("boxPackingMethods")
    private List<BoxContentInformationSource> boxPackingMethods = null;

    @SerializedName("boxRequirements")
    private BoxRequirements boxRequirements = null;

    @SerializedName("shippingRequirements")
    private List<ShippingRequirements> shippingRequirements = null;

    public PackingConfiguration boxPackingMethods(List<BoxContentInformationSource> boxPackingMethods) {
        this.boxPackingMethods = boxPackingMethods;
        return this;
    }

    public PackingConfiguration addBoxPackingMethodsItem(BoxContentInformationSource boxPackingMethodsItem) {
        if (this.boxPackingMethods == null) {
            this.boxPackingMethods = new ArrayList<BoxContentInformationSource>();
        }
        this.boxPackingMethods.add(boxPackingMethodsItem);
        return this;
    }

    /**
     * The box content information sources that are allowed.
     *
     * @return boxPackingMethods
     */
    @Schema(description = "The box content information sources that are allowed.")
    public List<BoxContentInformationSource> getBoxPackingMethods() {
        return boxPackingMethods;
    }

    public void setBoxPackingMethods(List<BoxContentInformationSource> boxPackingMethods) {
        this.boxPackingMethods = boxPackingMethods;
    }

    public PackingConfiguration boxRequirements(BoxRequirements boxRequirements) {
        this.boxRequirements = boxRequirements;
        return this;
    }

    /**
     * Get boxRequirements
     *
     * @return boxRequirements
     */
    @Schema(description = "")
    public BoxRequirements getBoxRequirements() {
        return boxRequirements;
    }

    public void setBoxRequirements(BoxRequirements boxRequirements) {
        this.boxRequirements = boxRequirements;
    }

    public PackingConfiguration shippingRequirements(List<ShippingRequirements> shippingRequirements) {
        this.shippingRequirements = shippingRequirements;
        return this;
    }

    public PackingConfiguration addShippingRequirementsItem(ShippingRequirements shippingRequirementsItem) {
        if (this.shippingRequirements == null) {
            this.shippingRequirements = new ArrayList<ShippingRequirements>();
        }
        this.shippingRequirements.add(shippingRequirementsItem);
        return this;
    }

    /**
     * A list of supported shipping requirements for this packing configuration.
     *
     * @return shippingRequirements
     */
    @Schema(description = "A list of supported shipping requirements for this packing configuration.")
    public List<ShippingRequirements> getShippingRequirements() {
        return shippingRequirements;
    }

    public void setShippingRequirements(List<ShippingRequirements> shippingRequirements) {
        this.shippingRequirements = shippingRequirements;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PackingConfiguration packingConfiguration = (PackingConfiguration) o;
        return Objects.equals(this.boxPackingMethods, packingConfiguration.boxPackingMethods)
                && Objects.equals(this.boxRequirements, packingConfiguration.boxRequirements)
                && Objects.equals(this.shippingRequirements, packingConfiguration.shippingRequirements);
    }

    @Override
    public int hashCode() {
        return Objects.hash(boxPackingMethods, boxRequirements, shippingRequirements);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PackingConfiguration {\n");

        sb.append("    boxPackingMethods: ")
                .append(toIndentedString(boxPackingMethods))
                .append("\n");
        sb.append("    boxRequirements: ")
                .append(toIndentedString(boxRequirements))
                .append("\n");
        sb.append("    shippingRequirements: ")
                .append(toIndentedString(shippingRequirements))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
