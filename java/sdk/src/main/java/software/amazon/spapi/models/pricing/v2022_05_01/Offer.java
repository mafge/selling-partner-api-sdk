/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.pricing.v2022_05_01;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** The offer data of a product. */
@Schema(description = "The offer data of a product.")
public class Offer {
    @SerializedName("sellerId")
    private String sellerId = null;

    @SerializedName("condition")
    private Condition condition = null;

    /** The item subcondition of the offer. */
    @JsonAdapter(SubConditionEnum.Adapter.class)
    public enum SubConditionEnum {
        @SerializedName("New")
        NEW("New"),
        @SerializedName("Mint")
        MINT("Mint"),
        @SerializedName("VeryGood")
        VERYGOOD("VeryGood"),
        @SerializedName("Good")
        GOOD("Good"),
        @SerializedName("Acceptable")
        ACCEPTABLE("Acceptable"),
        @SerializedName("Poor")
        POOR("Poor"),
        @SerializedName("Club")
        CLUB("Club"),
        @SerializedName("OEM")
        OEM("OEM"),
        @SerializedName("Warranty")
        WARRANTY("Warranty"),
        @SerializedName("RefurbishedWarranty")
        REFURBISHEDWARRANTY("RefurbishedWarranty"),
        @SerializedName("Refurbished")
        REFURBISHED("Refurbished"),
        @SerializedName("OpenBox")
        OPENBOX("OpenBox"),
        @SerializedName("Other")
        OTHER("Other");

        private String value;

        SubConditionEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static SubConditionEnum fromValue(String input) {
            for (SubConditionEnum b : SubConditionEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<SubConditionEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final SubConditionEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public SubConditionEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return SubConditionEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("subCondition")
    private SubConditionEnum subCondition = null;

    @SerializedName("fulfillmentType")
    private FulfillmentType fulfillmentType = null;

    @SerializedName("listingPrice")
    private MoneyType listingPrice = null;

    @SerializedName("shippingOptions")
    private List<ShippingOption> shippingOptions = null;

    @SerializedName("points")
    private Points points = null;

    @SerializedName("primeDetails")
    private PrimeDetails primeDetails = null;

    public Offer sellerId(String sellerId) {
        this.sellerId = sellerId;
        return this;
    }

    /**
     * The seller identifier for the offer.
     *
     * @return sellerId
     */
    @Schema(required = true, description = "The seller identifier for the offer.")
    public String getSellerId() {
        return sellerId;
    }

    public void setSellerId(String sellerId) {
        this.sellerId = sellerId;
    }

    public Offer condition(Condition condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get condition
     *
     * @return condition
     */
    @Schema(required = true, description = "")
    public Condition getCondition() {
        return condition;
    }

    public void setCondition(Condition condition) {
        this.condition = condition;
    }

    public Offer subCondition(SubConditionEnum subCondition) {
        this.subCondition = subCondition;
        return this;
    }

    /**
     * The item subcondition of the offer.
     *
     * @return subCondition
     */
    @Schema(description = "The item subcondition of the offer.")
    public SubConditionEnum getSubCondition() {
        return subCondition;
    }

    public void setSubCondition(SubConditionEnum subCondition) {
        this.subCondition = subCondition;
    }

    public Offer fulfillmentType(FulfillmentType fulfillmentType) {
        this.fulfillmentType = fulfillmentType;
        return this;
    }

    /**
     * Get fulfillmentType
     *
     * @return fulfillmentType
     */
    @Schema(required = true, description = "")
    public FulfillmentType getFulfillmentType() {
        return fulfillmentType;
    }

    public void setFulfillmentType(FulfillmentType fulfillmentType) {
        this.fulfillmentType = fulfillmentType;
    }

    public Offer listingPrice(MoneyType listingPrice) {
        this.listingPrice = listingPrice;
        return this;
    }

    /**
     * Get listingPrice
     *
     * @return listingPrice
     */
    @Schema(required = true, description = "")
    public MoneyType getListingPrice() {
        return listingPrice;
    }

    public void setListingPrice(MoneyType listingPrice) {
        this.listingPrice = listingPrice;
    }

    public Offer shippingOptions(List<ShippingOption> shippingOptions) {
        this.shippingOptions = shippingOptions;
        return this;
    }

    public Offer addShippingOptionsItem(ShippingOption shippingOptionsItem) {
        if (this.shippingOptions == null) {
            this.shippingOptions = new ArrayList<ShippingOption>();
        }
        this.shippingOptions.add(shippingOptionsItem);
        return this;
    }

    /**
     * A list of shipping options associated with this offer
     *
     * @return shippingOptions
     */
    @Schema(description = "A list of shipping options associated with this offer")
    public List<ShippingOption> getShippingOptions() {
        return shippingOptions;
    }

    public void setShippingOptions(List<ShippingOption> shippingOptions) {
        this.shippingOptions = shippingOptions;
    }

    public Offer points(Points points) {
        this.points = points;
        return this;
    }

    /**
     * Get points
     *
     * @return points
     */
    @Schema(description = "")
    public Points getPoints() {
        return points;
    }

    public void setPoints(Points points) {
        this.points = points;
    }

    public Offer primeDetails(PrimeDetails primeDetails) {
        this.primeDetails = primeDetails;
        return this;
    }

    /**
     * Get primeDetails
     *
     * @return primeDetails
     */
    @Schema(description = "")
    public PrimeDetails getPrimeDetails() {
        return primeDetails;
    }

    public void setPrimeDetails(PrimeDetails primeDetails) {
        this.primeDetails = primeDetails;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Offer offer = (Offer) o;
        return Objects.equals(this.sellerId, offer.sellerId)
                && Objects.equals(this.condition, offer.condition)
                && Objects.equals(this.subCondition, offer.subCondition)
                && Objects.equals(this.fulfillmentType, offer.fulfillmentType)
                && Objects.equals(this.listingPrice, offer.listingPrice)
                && Objects.equals(this.shippingOptions, offer.shippingOptions)
                && Objects.equals(this.points, offer.points)
                && Objects.equals(this.primeDetails, offer.primeDetails);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                sellerId,
                condition,
                subCondition,
                fulfillmentType,
                listingPrice,
                shippingOptions,
                points,
                primeDetails);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Offer {\n");

        sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
        sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
        sb.append("    subCondition: ").append(toIndentedString(subCondition)).append("\n");
        sb.append("    fulfillmentType: ")
                .append(toIndentedString(fulfillmentType))
                .append("\n");
        sb.append("    listingPrice: ").append(toIndentedString(listingPrice)).append("\n");
        sb.append("    shippingOptions: ")
                .append(toIndentedString(shippingOptions))
                .append("\n");
        sb.append("    points: ").append(toIndentedString(points)).append("\n");
        sb.append("    primeDetails: ").append(toIndentedString(primeDetails)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
