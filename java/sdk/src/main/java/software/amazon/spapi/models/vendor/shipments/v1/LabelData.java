/*
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.vendor.shipments.v1;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Objects;

/** Label details as part of the transport label response */
@Schema(description = "Label details as part of the transport label response")
public class LabelData {
    @SerializedName("labelSequenceNumber")
    private Integer labelSequenceNumber = null;

    /** The format of the label. */
    @JsonAdapter(LabelFormatEnum.Adapter.class)
    public enum LabelFormatEnum {
        @SerializedName("PDF")
        PDF("PDF");

        private String value;

        LabelFormatEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static LabelFormatEnum fromValue(String input) {
            for (LabelFormatEnum b : LabelFormatEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<LabelFormatEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final LabelFormatEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public LabelFormatEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return LabelFormatEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("labelFormat")
    private LabelFormatEnum labelFormat = null;

    @SerializedName("carrierCode")
    private String carrierCode = null;

    @SerializedName("trackingId")
    private String trackingId = null;

    @SerializedName("label")
    private String label = null;

    public LabelData labelSequenceNumber(Integer labelSequenceNumber) {
        this.labelSequenceNumber = labelSequenceNumber;
        return this;
    }

    /**
     * A sequential number assigned to each label within a shipment.
     *
     * @return labelSequenceNumber
     */
    @Schema(description = "A sequential number assigned to each label within a shipment.")
    public Integer getLabelSequenceNumber() {
        return labelSequenceNumber;
    }

    public void setLabelSequenceNumber(Integer labelSequenceNumber) {
        this.labelSequenceNumber = labelSequenceNumber;
    }

    public LabelData labelFormat(LabelFormatEnum labelFormat) {
        this.labelFormat = labelFormat;
        return this;
    }

    /**
     * The format of the label.
     *
     * @return labelFormat
     */
    @Schema(description = "The format of the label.")
    public LabelFormatEnum getLabelFormat() {
        return labelFormat;
    }

    public void setLabelFormat(LabelFormatEnum labelFormat) {
        this.labelFormat = labelFormat;
    }

    public LabelData carrierCode(String carrierCode) {
        this.carrierCode = carrierCode;
        return this;
    }

    /**
     * Unique identification of the carrier.
     *
     * @return carrierCode
     */
    @Schema(description = "Unique identification of the carrier.")
    public String getCarrierCode() {
        return carrierCode;
    }

    public void setCarrierCode(String carrierCode) {
        this.carrierCode = carrierCode;
    }

    public LabelData trackingId(String trackingId) {
        this.trackingId = trackingId;
        return this;
    }

    /**
     * Tracking Id for the transportation.
     *
     * @return trackingId
     */
    @Schema(description = "Tracking Id for the transportation.")
    public String getTrackingId() {
        return trackingId;
    }

    public void setTrackingId(String trackingId) {
        this.trackingId = trackingId;
    }

    public LabelData label(String label) {
        this.label = label;
        return this;
    }

    /**
     * The base-64 encoded string that represents the shipment label.
     *
     * @return label
     */
    @Schema(description = "The base-64 encoded string that represents the shipment label.")
    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LabelData labelData = (LabelData) o;
        return Objects.equals(this.labelSequenceNumber, labelData.labelSequenceNumber)
                && Objects.equals(this.labelFormat, labelData.labelFormat)
                && Objects.equals(this.carrierCode, labelData.carrierCode)
                && Objects.equals(this.trackingId, labelData.trackingId)
                && Objects.equals(this.label, labelData.label);
    }

    @Override
    public int hashCode() {
        return Objects.hash(labelSequenceNumber, labelFormat, carrierCode, trackingId, label);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class LabelData {\n");

        sb.append("    labelSequenceNumber: ")
                .append(toIndentedString(labelSequenceNumber))
                .append("\n");
        sb.append("    labelFormat: ").append(toIndentedString(labelFormat)).append("\n");
        sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
        sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
        sb.append("    label: ").append(toIndentedString(label)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
