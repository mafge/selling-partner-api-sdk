/*
 * Selling Partner API for A+ Content Management
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * OpenAPI spec version: 2020-11-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.apluscontent.v2020_11_01;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.apluscontent.v2020_11_01.GetContentDocumentResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.ListContentDocumentAsinRelationsResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentApprovalSubmissionResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentAsinRelationsRequest;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentAsinRelationsResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentRequest;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.PostContentDocumentSuspendSubmissionResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.SearchContentDocumentsResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.SearchContentPublishRecordsResponse;
import software.amazon.spapi.models.apluscontent.v2020_11_01.ValidateContentDocumentAsinRelationsResponse;

public class AplusContentApi {
    private ApiClient apiClient;

    AplusContentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AplusContentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createContentDocument
     *
     * @param body The content document request details. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createContentDocumentCall(
            PostContentDocumentRequest body,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/aplus/2020-11-01/contentDocuments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContentDocumentValidateBeforeCall(
            PostContentDocumentRequest body,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createContentDocument(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling createContentDocument(Async)");
        }

        okhttp3.Call call = createContentDocumentCall(body, marketplaceId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Creates a new A+ Content document. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 |
     * 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the
     * operation, when available. The preceding table contains the default rate and burst values for this operation.
     * Selling partners whose business demands require higher throughput might have higher rate and burst values than
     * those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The content document request details. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @return PostContentDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public PostContentDocumentResponse createContentDocument(PostContentDocumentRequest body, String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<PostContentDocumentResponse> resp = createContentDocumentWithHttpInfo(body, marketplaceId);
        return resp.getData();
    }

    /**
     * Creates a new A+ Content document. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 |
     * 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the
     * operation, when available. The preceding table contains the default rate and burst values for this operation.
     * Selling partners whose business demands require higher throughput might have higher rate and burst values than
     * those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The content document request details. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @return ApiResponse&lt;PostContentDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<PostContentDocumentResponse> createContentDocumentWithHttpInfo(
            PostContentDocumentRequest body, String marketplaceId) throws ApiException, LWAException {
        okhttp3.Call call = createContentDocumentValidateBeforeCall(body, marketplaceId, null, null);
        Type localVarReturnType = new TypeToken<PostContentDocumentResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Creates a new A+ Content document. **Usage Plan:** | Rate (requests per second) | Burst | | ----
     * | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits
     * for the operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput might have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The content document request details. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createContentDocumentAsync(
            PostContentDocumentRequest body,
            String marketplaceId,
            final ApiCallback<PostContentDocumentResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call =
                createContentDocumentValidateBeforeCall(body, marketplaceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostContentDocumentResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContentDocument
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param includedDataSet The set of A+ Content data types to include in the response. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getContentDocumentCall(
            String contentReferenceKey,
            String marketplaceId,
            List<String> includedDataSet,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}"
                .replaceAll(
                        "\\{" + "contentReferenceKey" + "\\}", apiClient.escapeString(contentReferenceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (includedDataSet != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "includedDataSet", includedDataSet));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentDocumentValidateBeforeCall(
            String contentReferenceKey,
            String marketplaceId,
            List<String> includedDataSet,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'contentReferenceKey' is set
        if (contentReferenceKey == null) {
            throw new ApiException(
                    "Missing the required parameter 'contentReferenceKey' when calling getContentDocument(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling getContentDocument(Async)");
        }
        // verify the required parameter 'includedDataSet' is set
        if (includedDataSet == null) {
            throw new ApiException(
                    "Missing the required parameter 'includedDataSet' when calling getContentDocument(Async)");
        }

        okhttp3.Call call = getContentDocumentCall(
                contentReferenceKey, marketplaceId, includedDataSet, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Returns an A+ Content document, if available. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for
     * the operation, when available. The preceding table contains the default rate and burst values for this operation.
     * Selling partners whose business demands require higher throughput might have higher rate and burst values than
     * those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param includedDataSet The set of A+ Content data types to include in the response. (required)
     * @return GetContentDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetContentDocumentResponse getContentDocument(
            String contentReferenceKey, String marketplaceId, List<String> includedDataSet)
            throws ApiException, LWAException {
        ApiResponse<GetContentDocumentResponse> resp =
                getContentDocumentWithHttpInfo(contentReferenceKey, marketplaceId, includedDataSet);
        return resp.getData();
    }

    /**
     * Returns an A+ Content document, if available. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for
     * the operation, when available. The preceding table contains the default rate and burst values for this operation.
     * Selling partners whose business demands require higher throughput might have higher rate and burst values than
     * those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param includedDataSet The set of A+ Content data types to include in the response. (required)
     * @return ApiResponse&lt;GetContentDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetContentDocumentResponse> getContentDocumentWithHttpInfo(
            String contentReferenceKey, String marketplaceId, List<String> includedDataSet)
            throws ApiException, LWAException {
        okhttp3.Call call =
                getContentDocumentValidateBeforeCall(contentReferenceKey, marketplaceId, includedDataSet, null, null);
        Type localVarReturnType = new TypeToken<GetContentDocumentResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns an A+ Content document, if available. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage
     * plan rate limits for the operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput might have higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param includedDataSet The set of A+ Content data types to include in the response. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getContentDocumentAsync(
            String contentReferenceKey,
            String marketplaceId,
            List<String> includedDataSet,
            final ApiCallback<GetContentDocumentResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getContentDocumentValidateBeforeCall(
                contentReferenceKey, marketplaceId, includedDataSet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetContentDocumentResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listContentDocumentAsinRelations
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param includedDataSet The set of A+ Content data types to include in the response. If you don&#x27;t include
     *     this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param asinSet The set of ASINs. (optional)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listContentDocumentAsinRelationsCall(
            String contentReferenceKey,
            String marketplaceId,
            List<String> includedDataSet,
            List<String> asinSet,
            String pageToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins"
                .replaceAll(
                        "\\{" + "contentReferenceKey" + "\\}", apiClient.escapeString(contentReferenceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (includedDataSet != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "includedDataSet", includedDataSet));
        if (asinSet != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "asinSet", asinSet));
        if (pageToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listContentDocumentAsinRelationsValidateBeforeCall(
            String contentReferenceKey,
            String marketplaceId,
            List<String> includedDataSet,
            List<String> asinSet,
            String pageToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'contentReferenceKey' is set
        if (contentReferenceKey == null) {
            throw new ApiException(
                    "Missing the required parameter 'contentReferenceKey' when calling listContentDocumentAsinRelations(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling listContentDocumentAsinRelations(Async)");
        }

        okhttp3.Call call = listContentDocumentAsinRelationsCall(
                contentReferenceKey,
                marketplaceId,
                includedDataSet,
                asinSet,
                pageToken,
                progressListener,
                progressRequestListener);
        return call;
    }

    /**
     * Returns a list of ASINs that are related to the specified A+ Content document, if available. If you don&#x27;t
     * include the &#x60;asinSet&#x60; parameter, this operation returns all ASINs related to the content document.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when
     * available. The preceding table contains the default rate and burst values for this operation. Selling partners
     * whose business demands require higher throughput might have higher rate and burst values than those shown here.
     * For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param includedDataSet The set of A+ Content data types to include in the response. If you don&#x27;t include
     *     this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param asinSet The set of ASINs. (optional)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @return ListContentDocumentAsinRelationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListContentDocumentAsinRelationsResponse listContentDocumentAsinRelations(
            String contentReferenceKey,
            String marketplaceId,
            List<String> includedDataSet,
            List<String> asinSet,
            String pageToken)
            throws ApiException, LWAException {
        ApiResponse<ListContentDocumentAsinRelationsResponse> resp = listContentDocumentAsinRelationsWithHttpInfo(
                contentReferenceKey, marketplaceId, includedDataSet, asinSet, pageToken);
        return resp.getData();
    }

    /**
     * Returns a list of ASINs that are related to the specified A+ Content document, if available. If you don&#x27;t
     * include the &#x60;asinSet&#x60; parameter, this operation returns all ASINs related to the content document.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when
     * available. The preceding table contains the default rate and burst values for this operation. Selling partners
     * whose business demands require higher throughput might have higher rate and burst values than those shown here.
     * For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param includedDataSet The set of A+ Content data types to include in the response. If you don&#x27;t include
     *     this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param asinSet The set of ASINs. (optional)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @return ApiResponse&lt;ListContentDocumentAsinRelationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListContentDocumentAsinRelationsResponse> listContentDocumentAsinRelationsWithHttpInfo(
            String contentReferenceKey,
            String marketplaceId,
            List<String> includedDataSet,
            List<String> asinSet,
            String pageToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listContentDocumentAsinRelationsValidateBeforeCall(
                contentReferenceKey, marketplaceId, includedDataSet, asinSet, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListContentDocumentAsinRelationsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns a list of ASINs that are related to the specified A+ Content document, if available. If
     * you don&#x27;t include the &#x60;asinSet&#x60; parameter, this operation returns all ASINs related to the content
     * document. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when
     * available. The preceding table contains the default rate and burst values for this operation. Selling partners
     * whose business demands require higher throughput might have higher rate and burst values than those shown here.
     * For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param includedDataSet The set of A+ Content data types to include in the response. If you don&#x27;t include
     *     this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param asinSet The set of ASINs. (optional)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listContentDocumentAsinRelationsAsync(
            String contentReferenceKey,
            String marketplaceId,
            List<String> includedDataSet,
            List<String> asinSet,
            String pageToken,
            final ApiCallback<ListContentDocumentAsinRelationsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listContentDocumentAsinRelationsValidateBeforeCall(
                contentReferenceKey,
                marketplaceId,
                includedDataSet,
                asinSet,
                pageToken,
                progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<ListContentDocumentAsinRelationsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postContentDocumentApprovalSubmission
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call postContentDocumentApprovalSubmissionCall(
            String contentReferenceKey,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions"
                .replaceAll(
                        "\\{" + "contentReferenceKey" + "\\}", apiClient.escapeString(contentReferenceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postContentDocumentApprovalSubmissionValidateBeforeCall(
            String contentReferenceKey,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'contentReferenceKey' is set
        if (contentReferenceKey == null) {
            throw new ApiException(
                    "Missing the required parameter 'contentReferenceKey' when calling postContentDocumentApprovalSubmission(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling postContentDocumentApprovalSubmission(Async)");
        }

        okhttp3.Call call = postContentDocumentApprovalSubmissionCall(
                contentReferenceKey, marketplaceId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Submits an A+ Content document for review, approval, and publishing. **Usage Plan:** | Rate (requests per second)
     * | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage
     * plan rate limits for the operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput might have higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @return PostContentDocumentApprovalSubmissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public PostContentDocumentApprovalSubmissionResponse postContentDocumentApprovalSubmission(
            String contentReferenceKey, String marketplaceId) throws ApiException, LWAException {
        ApiResponse<PostContentDocumentApprovalSubmissionResponse> resp =
                postContentDocumentApprovalSubmissionWithHttpInfo(contentReferenceKey, marketplaceId);
        return resp.getData();
    }

    /**
     * Submits an A+ Content document for review, approval, and publishing. **Usage Plan:** | Rate (requests per second)
     * | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage
     * plan rate limits for the operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput might have higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @return ApiResponse&lt;PostContentDocumentApprovalSubmissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<PostContentDocumentApprovalSubmissionResponse> postContentDocumentApprovalSubmissionWithHttpInfo(
            String contentReferenceKey, String marketplaceId) throws ApiException, LWAException {
        okhttp3.Call call =
                postContentDocumentApprovalSubmissionValidateBeforeCall(contentReferenceKey, marketplaceId, null, null);
        Type localVarReturnType = new TypeToken<PostContentDocumentApprovalSubmissionResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Submits an A+ Content document for review, approval, and publishing. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header contains the usage plan rate limits for the operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call postContentDocumentApprovalSubmissionAsync(
            String contentReferenceKey,
            String marketplaceId,
            final ApiCallback<PostContentDocumentApprovalSubmissionResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = postContentDocumentApprovalSubmissionValidateBeforeCall(
                contentReferenceKey, marketplaceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostContentDocumentApprovalSubmissionResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postContentDocumentAsinRelations
     *
     * @param body The request details for the content document ASIN relations. (required)
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call postContentDocumentAsinRelationsCall(
            PostContentDocumentAsinRelationsRequest body,
            String contentReferenceKey,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins"
                .replaceAll(
                        "\\{" + "contentReferenceKey" + "\\}", apiClient.escapeString(contentReferenceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postContentDocumentAsinRelationsValidateBeforeCall(
            PostContentDocumentAsinRelationsRequest body,
            String contentReferenceKey,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling postContentDocumentAsinRelations(Async)");
        }
        // verify the required parameter 'contentReferenceKey' is set
        if (contentReferenceKey == null) {
            throw new ApiException(
                    "Missing the required parameter 'contentReferenceKey' when calling postContentDocumentAsinRelations(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling postContentDocumentAsinRelations(Async)");
        }

        okhttp3.Call call = postContentDocumentAsinRelationsCall(
                body, contentReferenceKey, marketplaceId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Replaces all ASINs related to the specified A+ Content document, if available. This operation can add or remove
     * ASINs, depending on the current set of related ASINs. Removing an ASIN will suspend the content document from
     * that ASIN. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when
     * available. The preceding table contains the default rate and burst values for this operation. Selling partners
     * whose business demands require higher throughput might have higher rate and burst values than those shown here.
     * For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The request details for the content document ASIN relations. (required)
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @return PostContentDocumentAsinRelationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public PostContentDocumentAsinRelationsResponse postContentDocumentAsinRelations(
            PostContentDocumentAsinRelationsRequest body, String contentReferenceKey, String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<PostContentDocumentAsinRelationsResponse> resp =
                postContentDocumentAsinRelationsWithHttpInfo(body, contentReferenceKey, marketplaceId);
        return resp.getData();
    }

    /**
     * Replaces all ASINs related to the specified A+ Content document, if available. This operation can add or remove
     * ASINs, depending on the current set of related ASINs. Removing an ASIN will suspend the content document from
     * that ASIN. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when
     * available. The preceding table contains the default rate and burst values for this operation. Selling partners
     * whose business demands require higher throughput might have higher rate and burst values than those shown here.
     * For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The request details for the content document ASIN relations. (required)
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @return ApiResponse&lt;PostContentDocumentAsinRelationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<PostContentDocumentAsinRelationsResponse> postContentDocumentAsinRelationsWithHttpInfo(
            PostContentDocumentAsinRelationsRequest body, String contentReferenceKey, String marketplaceId)
            throws ApiException, LWAException {
        okhttp3.Call call = postContentDocumentAsinRelationsValidateBeforeCall(
                body, contentReferenceKey, marketplaceId, null, null);
        Type localVarReturnType = new TypeToken<PostContentDocumentAsinRelationsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Replaces all ASINs related to the specified A+ Content document, if available. This operation
     * can add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN will suspend the content
     * document from that ASIN. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when
     * available. The preceding table contains the default rate and burst values for this operation. Selling partners
     * whose business demands require higher throughput might have higher rate and burst values than those shown here.
     * For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The request details for the content document ASIN relations. (required)
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call postContentDocumentAsinRelationsAsync(
            PostContentDocumentAsinRelationsRequest body,
            String contentReferenceKey,
            String marketplaceId,
            final ApiCallback<PostContentDocumentAsinRelationsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = postContentDocumentAsinRelationsValidateBeforeCall(
                body, contentReferenceKey, marketplaceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostContentDocumentAsinRelationsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postContentDocumentSuspendSubmission
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call postContentDocumentSuspendSubmissionCall(
            String contentReferenceKey,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions"
                .replaceAll(
                        "\\{" + "contentReferenceKey" + "\\}", apiClient.escapeString(contentReferenceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postContentDocumentSuspendSubmissionValidateBeforeCall(
            String contentReferenceKey,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'contentReferenceKey' is set
        if (contentReferenceKey == null) {
            throw new ApiException(
                    "Missing the required parameter 'contentReferenceKey' when calling postContentDocumentSuspendSubmission(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling postContentDocumentSuspendSubmission(Async)");
        }

        okhttp3.Call call = postContentDocumentSuspendSubmissionCall(
                contentReferenceKey, marketplaceId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Submits a request to suspend visible A+ Content. This doesn&#x27;t delete the content document or the ASIN
     * relations. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when
     * available. The preceding table contains the default rate and burst values for this operation. Selling partners
     * whose business demands require higher throughput might have higher rate and burst values than those shown here.
     * For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @return PostContentDocumentSuspendSubmissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public PostContentDocumentSuspendSubmissionResponse postContentDocumentSuspendSubmission(
            String contentReferenceKey, String marketplaceId) throws ApiException, LWAException {
        ApiResponse<PostContentDocumentSuspendSubmissionResponse> resp =
                postContentDocumentSuspendSubmissionWithHttpInfo(contentReferenceKey, marketplaceId);
        return resp.getData();
    }

    /**
     * Submits a request to suspend visible A+ Content. This doesn&#x27;t delete the content document or the ASIN
     * relations. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when
     * available. The preceding table contains the default rate and burst values for this operation. Selling partners
     * whose business demands require higher throughput might have higher rate and burst values than those shown here.
     * For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @return ApiResponse&lt;PostContentDocumentSuspendSubmissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<PostContentDocumentSuspendSubmissionResponse> postContentDocumentSuspendSubmissionWithHttpInfo(
            String contentReferenceKey, String marketplaceId) throws ApiException, LWAException {
        okhttp3.Call call =
                postContentDocumentSuspendSubmissionValidateBeforeCall(contentReferenceKey, marketplaceId, null, null);
        Type localVarReturnType = new TypeToken<PostContentDocumentSuspendSubmissionResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Submits a request to suspend visible A+ Content. This doesn&#x27;t delete the content document
     * or the ASIN relations. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when
     * available. The preceding table contains the default rate and burst values for this operation. Selling partners
     * whose business demands require higher throughput might have higher rate and burst values than those shown here.
     * For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call postContentDocumentSuspendSubmissionAsync(
            String contentReferenceKey,
            String marketplaceId,
            final ApiCallback<PostContentDocumentSuspendSubmissionResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = postContentDocumentSuspendSubmissionValidateBeforeCall(
                contentReferenceKey, marketplaceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostContentDocumentSuspendSubmissionResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchContentDocuments
     *
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call searchContentDocumentsCall(
            String marketplaceId,
            String pageToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aplus/2020-11-01/contentDocuments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (pageToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchContentDocumentsValidateBeforeCall(
            String marketplaceId,
            String pageToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling searchContentDocuments(Async)");
        }

        okhttp3.Call call =
                searchContentDocumentsCall(marketplaceId, pageToken, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Returns a list of all A+ Content documents, including metadata, that are assigned to a selling partner. To get
     * the actual contents of the A+ Content documents, call the &#x60;getContentDocument&#x60; operation. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header contains the usage plan rate limits for the operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput might have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @return SearchContentDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public SearchContentDocumentsResponse searchContentDocuments(String marketplaceId, String pageToken)
            throws ApiException, LWAException {
        ApiResponse<SearchContentDocumentsResponse> resp = searchContentDocumentsWithHttpInfo(marketplaceId, pageToken);
        return resp.getData();
    }

    /**
     * Returns a list of all A+ Content documents, including metadata, that are assigned to a selling partner. To get
     * the actual contents of the A+ Content documents, call the &#x60;getContentDocument&#x60; operation. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header contains the usage plan rate limits for the operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput might have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @return ApiResponse&lt;SearchContentDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<SearchContentDocumentsResponse> searchContentDocumentsWithHttpInfo(
            String marketplaceId, String pageToken) throws ApiException, LWAException {
        okhttp3.Call call = searchContentDocumentsValidateBeforeCall(marketplaceId, pageToken, null, null);
        Type localVarReturnType = new TypeToken<SearchContentDocumentsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns a list of all A+ Content documents, including metadata, that are assigned to a selling
     * partner. To get the actual contents of the A+ Content documents, call the &#x60;getContentDocument&#x60;
     * operation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the operation, when
     * available. The preceding table contains the default rate and burst values for this operation. Selling partners
     * whose business demands require higher throughput might have higher rate and burst values than those shown here.
     * For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call searchContentDocumentsAsync(
            String marketplaceId, String pageToken, final ApiCallback<SearchContentDocumentsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = searchContentDocumentsValidateBeforeCall(
                marketplaceId, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchContentDocumentsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchContentPublishRecords
     *
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call searchContentPublishRecordsCall(
            String marketplaceId,
            String asin,
            String pageToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aplus/2020-11-01/contentPublishRecords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (asin != null) localVarQueryParams.addAll(apiClient.parameterToPair("asin", asin));
        if (pageToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchContentPublishRecordsValidateBeforeCall(
            String marketplaceId,
            String asin,
            String pageToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling searchContentPublishRecords(Async)");
        }
        // verify the required parameter 'asin' is set
        if (asin == null) {
            throw new ApiException(
                    "Missing the required parameter 'asin' when calling searchContentPublishRecords(Async)");
        }

        okhttp3.Call call = searchContentPublishRecordsCall(
                marketplaceId, asin, pageToken, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Searches for A+ Content publishing records, if available. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate
     * limits for the operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput might have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @return SearchContentPublishRecordsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public SearchContentPublishRecordsResponse searchContentPublishRecords(
            String marketplaceId, String asin, String pageToken) throws ApiException, LWAException {
        ApiResponse<SearchContentPublishRecordsResponse> resp =
                searchContentPublishRecordsWithHttpInfo(marketplaceId, asin, pageToken);
        return resp.getData();
    }

    /**
     * Searches for A+ Content publishing records, if available. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate
     * limits for the operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput might have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @return ApiResponse&lt;SearchContentPublishRecordsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<SearchContentPublishRecordsResponse> searchContentPublishRecordsWithHttpInfo(
            String marketplaceId, String asin, String pageToken) throws ApiException, LWAException {
        okhttp3.Call call = searchContentPublishRecordsValidateBeforeCall(marketplaceId, asin, pageToken, null, null);
        Type localVarReturnType = new TypeToken<SearchContentPublishRecordsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Searches for A+ Content publishing records, if available. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the
     * usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput might have higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param pageToken A token that you use to fetch a specific page when there are multiple pages of results.
     *     (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call searchContentPublishRecordsAsync(
            String marketplaceId,
            String asin,
            String pageToken,
            final ApiCallback<SearchContentPublishRecordsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = searchContentPublishRecordsValidateBeforeCall(
                marketplaceId, asin, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchContentPublishRecordsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContentDocument
     *
     * @param body The content document request details. (required)
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateContentDocumentCall(
            PostContentDocumentRequest body,
            String contentReferenceKey,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}"
                .replaceAll(
                        "\\{" + "contentReferenceKey" + "\\}", apiClient.escapeString(contentReferenceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContentDocumentValidateBeforeCall(
            PostContentDocumentRequest body,
            String contentReferenceKey,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateContentDocument(Async)");
        }
        // verify the required parameter 'contentReferenceKey' is set
        if (contentReferenceKey == null) {
            throw new ApiException(
                    "Missing the required parameter 'contentReferenceKey' when calling updateContentDocument(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling updateContentDocument(Async)");
        }

        okhttp3.Call call = updateContentDocumentCall(
                body, contentReferenceKey, marketplaceId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Updates an existing A+ Content document. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the
     * operation, when available. The preceding table contains the default rate and burst values for this operation.
     * Selling partners whose business demands require higher throughput might have higher rate and burst values than
     * those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The content document request details. (required)
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @return PostContentDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public PostContentDocumentResponse updateContentDocument(
            PostContentDocumentRequest body, String contentReferenceKey, String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<PostContentDocumentResponse> resp =
                updateContentDocumentWithHttpInfo(body, contentReferenceKey, marketplaceId);
        return resp.getData();
    }

    /**
     * Updates an existing A+ Content document. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the
     * operation, when available. The preceding table contains the default rate and burst values for this operation.
     * Selling partners whose business demands require higher throughput might have higher rate and burst values than
     * those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The content document request details. (required)
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @return ApiResponse&lt;PostContentDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<PostContentDocumentResponse> updateContentDocumentWithHttpInfo(
            PostContentDocumentRequest body, String contentReferenceKey, String marketplaceId)
            throws ApiException, LWAException {
        okhttp3.Call call =
                updateContentDocumentValidateBeforeCall(body, contentReferenceKey, marketplaceId, null, null);
        Type localVarReturnType = new TypeToken<PostContentDocumentResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Updates an existing A+ Content document. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate
     * limits for the operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput might have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The content document request details. (required)
     * @param contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot
     *     form a permalink and might change in the future. A content reference key is not guaranteed to match any A+
     *     Content identifier. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateContentDocumentAsync(
            PostContentDocumentRequest body,
            String contentReferenceKey,
            String marketplaceId,
            final ApiCallback<PostContentDocumentResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateContentDocumentValidateBeforeCall(
                body, contentReferenceKey, marketplaceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PostContentDocumentResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateContentDocumentAsinRelations
     *
     * @param body The content document request details. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param asinSet The set of ASINs. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call validateContentDocumentAsinRelationsCall(
            PostContentDocumentRequest body,
            String marketplaceId,
            List<String> asinSet,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/aplus/2020-11-01/contentAsinValidations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (asinSet != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "asinSet", asinSet));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateContentDocumentAsinRelationsValidateBeforeCall(
            PostContentDocumentRequest body,
            String marketplaceId,
            List<String> asinSet,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling validateContentDocumentAsinRelations(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling validateContentDocumentAsinRelations(Async)");
        }

        okhttp3.Call call = validateContentDocumentAsinRelationsCall(
                body, marketplaceId, asinSet, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Checks if the A+ Content document is valid for use on a set of ASINs. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the
     * usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput might have higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The content document request details. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param asinSet The set of ASINs. (optional)
     * @return ValidateContentDocumentAsinRelationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ValidateContentDocumentAsinRelationsResponse validateContentDocumentAsinRelations(
            PostContentDocumentRequest body, String marketplaceId, List<String> asinSet)
            throws ApiException, LWAException {
        ApiResponse<ValidateContentDocumentAsinRelationsResponse> resp =
                validateContentDocumentAsinRelationsWithHttpInfo(body, marketplaceId, asinSet);
        return resp.getData();
    }

    /**
     * Checks if the A+ Content document is valid for use on a set of ASINs. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the
     * usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput might have higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The content document request details. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param asinSet The set of ASINs. (optional)
     * @return ApiResponse&lt;ValidateContentDocumentAsinRelationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ValidateContentDocumentAsinRelationsResponse> validateContentDocumentAsinRelationsWithHttpInfo(
            PostContentDocumentRequest body, String marketplaceId, List<String> asinSet)
            throws ApiException, LWAException {
        okhttp3.Call call =
                validateContentDocumentAsinRelationsValidateBeforeCall(body, marketplaceId, asinSet, null, null);
        Type localVarReturnType = new TypeToken<ValidateContentDocumentAsinRelationsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Checks if the A+ Content document is valid for use on a set of ASINs. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header contains the usage plan rate limits for the operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The content document request details. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. To find the ID for
     *     your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *     (required)
     * @param asinSet The set of ASINs. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call validateContentDocumentAsinRelationsAsync(
            PostContentDocumentRequest body,
            String marketplaceId,
            List<String> asinSet,
            final ApiCallback<ValidateContentDocumentAsinRelationsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = validateContentDocumentAsinRelationsValidateBeforeCall(
                body, marketplaceId, asinSet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidateContentDocumentAsinRelationsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private RateLimitConfiguration rateLimitConfiguration;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration) {
            this.rateLimitConfiguration = rateLimitConfiguration;
            return this;
        }

        public Builder disableRateLimitOnRequests() {
            this.rateLimitConfiguration = null;
            return this;
        }

        public AplusContentApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new AplusContentApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint)
                    .setRateLimiter(rateLimitConfiguration));
        }
    }
}
