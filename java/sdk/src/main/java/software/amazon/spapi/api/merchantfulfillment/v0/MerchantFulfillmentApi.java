/*
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.merchantfulfillment.v0;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.merchantfulfillment.v0.CancelShipmentResponse;
import software.amazon.spapi.models.merchantfulfillment.v0.CreateShipmentRequest;
import software.amazon.spapi.models.merchantfulfillment.v0.CreateShipmentResponse;
import software.amazon.spapi.models.merchantfulfillment.v0.GetAdditionalSellerInputsRequest;
import software.amazon.spapi.models.merchantfulfillment.v0.GetAdditionalSellerInputsResponse;
import software.amazon.spapi.models.merchantfulfillment.v0.GetEligibleShipmentServicesRequest;
import software.amazon.spapi.models.merchantfulfillment.v0.GetEligibleShipmentServicesResponse;
import software.amazon.spapi.models.merchantfulfillment.v0.GetShipmentResponse;

public class MerchantFulfillmentApi {
  private ApiClient apiClient;

  MerchantFulfillmentApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MerchantFulfillmentApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for cancelShipment
   *
   * @param shipmentId The Amazon-defined shipment identifier for the shipment to cancel. (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call cancelShipmentCall(
      String shipmentId,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/mfn/v0/shipments/{shipmentId}"
            .replaceAll(
                "\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                    throws IOException {
                  okhttp3.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call cancelShipmentValidateBeforeCall(
      String shipmentId,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    // verify the required parameter 'shipmentId' is set
    if (shipmentId == null) {
      throw new ApiException(
          "Missing the required parameter 'shipmentId' when calling cancelShipment(Async)");
    }

    okhttp3.Call call = cancelShipmentCall(shipmentId, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Cancel the shipment indicated by the specified shipment identifier. **Usage Plan:** | Rate
   * (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are
   * applied to the requested operation when available. The preceding table indicates the default
   * rate and burst values for this operation. Selling partners whose business demands require
   * higher throughput may have higher rate and burst values than those shown here. For more
   * information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param shipmentId The Amazon-defined shipment identifier for the shipment to cancel. (required)
   * @return CancelShipmentResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public CancelShipmentResponse cancelShipment(String shipmentId)
      throws ApiException, LWAException {
    ApiResponse<CancelShipmentResponse> resp = cancelShipmentWithHttpInfo(shipmentId);
    return resp.getData();
  }

  /**
   * Cancel the shipment indicated by the specified shipment identifier. **Usage Plan:** | Rate
   * (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are
   * applied to the requested operation when available. The preceding table indicates the default
   * rate and burst values for this operation. Selling partners whose business demands require
   * higher throughput may have higher rate and burst values than those shown here. For more
   * information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param shipmentId The Amazon-defined shipment identifier for the shipment to cancel. (required)
   * @return ApiResponse&lt;CancelShipmentResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public ApiResponse<CancelShipmentResponse> cancelShipmentWithHttpInfo(String shipmentId)
      throws ApiException, LWAException {
    okhttp3.Call call = cancelShipmentValidateBeforeCall(shipmentId, null, null);
    Type localVarReturnType = new TypeToken<CancelShipmentResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * (asynchronously) Cancel the shipment indicated by the specified shipment identifier. **Usage
   * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are
   * applied to the requested operation when available. The preceding table indicates the default
   * rate and burst values for this operation. Selling partners whose business demands require
   * higher throughput may have higher rate and burst values than those shown here. For more
   * information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param shipmentId The Amazon-defined shipment identifier for the shipment to cancel. (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call cancelShipmentAsync(
      String shipmentId, final ApiCallback<CancelShipmentResponse> callback)
      throws ApiException, LWAException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        cancelShipmentValidateBeforeCall(shipmentId, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<CancelShipmentResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for createShipment
   *
   * @param body The request schema for the &#x60;CreateShipment&#x60; operation. (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call createShipmentCall(
      CreateShipmentRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/mfn/v0/shipments";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                    throws IOException {
                  okhttp3.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call createShipmentValidateBeforeCall(
      CreateShipmentRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(
          "Missing the required parameter 'body' when calling createShipment(Async)");
    }

    okhttp3.Call call = createShipmentCall(body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Create a shipment with the information provided. **Usage Plan:** | Rate (requests per second) |
   * Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
   * returns the usage plan rate limits that are applied to the requested operation when available.
   * The preceding table indicates the default rate and burst values for this operation. Selling
   * partners whose business demands require higher throughput may have higher rate and burst values
   * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body The request schema for the &#x60;CreateShipment&#x60; operation. (required)
   * @return CreateShipmentResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public CreateShipmentResponse createShipment(CreateShipmentRequest body)
      throws ApiException, LWAException {
    ApiResponse<CreateShipmentResponse> resp = createShipmentWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Create a shipment with the information provided. **Usage Plan:** | Rate (requests per second) |
   * Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
   * returns the usage plan rate limits that are applied to the requested operation when available.
   * The preceding table indicates the default rate and burst values for this operation. Selling
   * partners whose business demands require higher throughput may have higher rate and burst values
   * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body The request schema for the &#x60;CreateShipment&#x60; operation. (required)
   * @return ApiResponse&lt;CreateShipmentResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public ApiResponse<CreateShipmentResponse> createShipmentWithHttpInfo(CreateShipmentRequest body)
      throws ApiException, LWAException {
    okhttp3.Call call = createShipmentValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<CreateShipmentResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * (asynchronously) Create a shipment with the information provided. **Usage Plan:** | Rate
   * (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are
   * applied to the requested operation when available. The preceding table indicates the default
   * rate and burst values for this operation. Selling partners whose business demands require
   * higher throughput may have higher rate and burst values than those shown here. For more
   * information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body The request schema for the &#x60;CreateShipment&#x60; operation. (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call createShipmentAsync(
      CreateShipmentRequest body, final ApiCallback<CreateShipmentResponse> callback)
      throws ApiException, LWAException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        createShipmentValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<CreateShipmentResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getAdditionalSellerInputs
   *
   * @param body The request schema for the &#x60;GetAdditionalSellerInputs&#x60; operation.
   *     (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call getAdditionalSellerInputsCall(
      GetAdditionalSellerInputsRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/mfn/v0/additionalSellerInputs";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                    throws IOException {
                  okhttp3.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAdditionalSellerInputsValidateBeforeCall(
      GetAdditionalSellerInputsRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(
          "Missing the required parameter 'body' when calling getAdditionalSellerInputs(Async)");
    }

    okhttp3.Call call =
        getAdditionalSellerInputsCall(body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Gets a list of additional seller inputs required for a ship method. This is generally used for
   * international shipping. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- |
   * | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
   * limits that are applied to the requested operation when available. The preceding table
   * indicates the default rate and burst values for this operation. Selling partners whose business
   * demands require higher throughput may have higher rate and burst values than those shown here.
   * For more information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body The request schema for the &#x60;GetAdditionalSellerInputs&#x60; operation.
   *     (required)
   * @return GetAdditionalSellerInputsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public GetAdditionalSellerInputsResponse getAdditionalSellerInputs(
      GetAdditionalSellerInputsRequest body) throws ApiException, LWAException {
    ApiResponse<GetAdditionalSellerInputsResponse> resp =
        getAdditionalSellerInputsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Gets a list of additional seller inputs required for a ship method. This is generally used for
   * international shipping. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- |
   * | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
   * limits that are applied to the requested operation when available. The preceding table
   * indicates the default rate and burst values for this operation. Selling partners whose business
   * demands require higher throughput may have higher rate and burst values than those shown here.
   * For more information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body The request schema for the &#x60;GetAdditionalSellerInputs&#x60; operation.
   *     (required)
   * @return ApiResponse&lt;GetAdditionalSellerInputsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public ApiResponse<GetAdditionalSellerInputsResponse> getAdditionalSellerInputsWithHttpInfo(
      GetAdditionalSellerInputsRequest body) throws ApiException, LWAException {
    okhttp3.Call call = getAdditionalSellerInputsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<GetAdditionalSellerInputsResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * (asynchronously) Gets a list of additional seller inputs required for a ship method. This is
   * generally used for international shipping. **Usage Plan:** | Rate (requests per second) | Burst
   * | | ---- | ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
   * usage plan rate limits that are applied to the requested operation when available. The
   * preceding table indicates the default rate and burst values for this operation. Selling
   * partners whose business demands require higher throughput may have higher rate and burst values
   * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body The request schema for the &#x60;GetAdditionalSellerInputs&#x60; operation.
   *     (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call getAdditionalSellerInputsAsync(
      GetAdditionalSellerInputsRequest body,
      final ApiCallback<GetAdditionalSellerInputsResponse> callback)
      throws ApiException, LWAException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        getAdditionalSellerInputsValidateBeforeCall(
            body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetAdditionalSellerInputsResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getEligibleShipmentServices
   *
   * @param body The request schema for the &#x60;GetEligibleShipmentServices&#x60; operation.
   *     (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call getEligibleShipmentServicesCall(
      GetEligibleShipmentServicesRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/mfn/v0/eligibleShippingServices";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                    throws IOException {
                  okhttp3.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getEligibleShipmentServicesValidateBeforeCall(
      GetEligibleShipmentServicesRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(
          "Missing the required parameter 'body' when calling getEligibleShipmentServices(Async)");
    }

    okhttp3.Call call =
        getEligibleShipmentServicesCall(body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Returns a list of shipping service offers that satisfy the specified shipment request details.
   * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 6 | 12 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are
   * applied to the requested operation when available. The preceding table indicates the default
   * rate and burst values for this operation. Selling partners whose business demands require
   * higher throughput may have higher rate and burst values than those shown here. For more
   * information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body The request schema for the &#x60;GetEligibleShipmentServices&#x60; operation.
   *     (required)
   * @return GetEligibleShipmentServicesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public GetEligibleShipmentServicesResponse getEligibleShipmentServices(
      GetEligibleShipmentServicesRequest body) throws ApiException, LWAException {
    ApiResponse<GetEligibleShipmentServicesResponse> resp =
        getEligibleShipmentServicesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Returns a list of shipping service offers that satisfy the specified shipment request details.
   * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 6 | 12 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are
   * applied to the requested operation when available. The preceding table indicates the default
   * rate and burst values for this operation. Selling partners whose business demands require
   * higher throughput may have higher rate and burst values than those shown here. For more
   * information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body The request schema for the &#x60;GetEligibleShipmentServices&#x60; operation.
   *     (required)
   * @return ApiResponse&lt;GetEligibleShipmentServicesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public ApiResponse<GetEligibleShipmentServicesResponse> getEligibleShipmentServicesWithHttpInfo(
      GetEligibleShipmentServicesRequest body) throws ApiException, LWAException {
    okhttp3.Call call = getEligibleShipmentServicesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<GetEligibleShipmentServicesResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * (asynchronously) Returns a list of shipping service offers that satisfy the specified shipment
   * request details. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 6 |
   * 12 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
   * that are applied to the requested operation when available. The preceding table indicates the
   * default rate and burst values for this operation. Selling partners whose business demands
   * require higher throughput may have higher rate and burst values than those shown here. For more
   * information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body The request schema for the &#x60;GetEligibleShipmentServices&#x60; operation.
   *     (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call getEligibleShipmentServicesAsync(
      GetEligibleShipmentServicesRequest body,
      final ApiCallback<GetEligibleShipmentServicesResponse> callback)
      throws ApiException, LWAException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        getEligibleShipmentServicesValidateBeforeCall(
            body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetEligibleShipmentServicesResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getShipment
   *
   * @param shipmentId The Amazon-defined shipment identifier for the shipment. (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call getShipmentCall(
      String shipmentId,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/mfn/v0/shipments/{shipmentId}"
            .replaceAll(
                "\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                    throws IOException {
                  okhttp3.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getShipmentValidateBeforeCall(
      String shipmentId,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    // verify the required parameter 'shipmentId' is set
    if (shipmentId == null) {
      throw new ApiException(
          "Missing the required parameter 'shipmentId' when calling getShipment(Async)");
    }

    okhttp3.Call call = getShipmentCall(shipmentId, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Returns the shipment information for an existing shipment. **Usage Plan:** | Rate (requests per
   * second) | Burst | | ---- | ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
   * header returns the usage plan rate limits that are applied to the requested operation when
   * available. The preceding table indicates the default rate and burst values for this operation.
   * Selling partners whose business demands require higher throughput may have higher rate and
   * burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits
   * in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param shipmentId The Amazon-defined shipment identifier for the shipment. (required)
   * @return GetShipmentResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public GetShipmentResponse getShipment(String shipmentId) throws ApiException, LWAException {
    ApiResponse<GetShipmentResponse> resp = getShipmentWithHttpInfo(shipmentId);
    return resp.getData();
  }

  /**
   * Returns the shipment information for an existing shipment. **Usage Plan:** | Rate (requests per
   * second) | Burst | | ---- | ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
   * header returns the usage plan rate limits that are applied to the requested operation when
   * available. The preceding table indicates the default rate and burst values for this operation.
   * Selling partners whose business demands require higher throughput may have higher rate and
   * burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits
   * in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param shipmentId The Amazon-defined shipment identifier for the shipment. (required)
   * @return ApiResponse&lt;GetShipmentResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public ApiResponse<GetShipmentResponse> getShipmentWithHttpInfo(String shipmentId)
      throws ApiException, LWAException {
    okhttp3.Call call = getShipmentValidateBeforeCall(shipmentId, null, null);
    Type localVarReturnType = new TypeToken<GetShipmentResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * (asynchronously) Returns the shipment information for an existing shipment. **Usage Plan:** |
   * Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are
   * applied to the requested operation when available. The preceding table indicates the default
   * rate and burst values for this operation. Selling partners whose business demands require
   * higher throughput may have higher rate and burst values than those shown here. For more
   * information, refer to [Usage Plans and Rate Limits in the
   * SP-API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param shipmentId The Amazon-defined shipment identifier for the shipment. (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call getShipmentAsync(
      String shipmentId, final ApiCallback<GetShipmentResponse> callback)
      throws ApiException, LWAException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        getShipmentValidateBeforeCall(shipmentId, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetShipmentResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  public static class Builder {
    private LWAAuthorizationCredentials lwaAuthorizationCredentials;
    private String endpoint;
    private LWAAccessTokenCache lwaAccessTokenCache;
    private Boolean disableAccessTokenCache = false;
    private RateLimitConfiguration rateLimitConfiguration;

    public Builder lwaAuthorizationCredentials(
        LWAAuthorizationCredentials lwaAuthorizationCredentials) {
      this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
      return this;
    }

    public Builder endpoint(String endpoint) {
      this.endpoint = endpoint;
      return this;
    }

    public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
      this.lwaAccessTokenCache = lwaAccessTokenCache;
      return this;
    }

    public Builder disableAccessTokenCache() {
      this.disableAccessTokenCache = true;
      return this;
    }

    public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration) {
      this.rateLimitConfiguration = rateLimitConfiguration;
      return this;
    }

    public Builder disableRateLimitOnRequests() {
      this.rateLimitConfiguration = null;
      return this;
    }

    public MerchantFulfillmentApi build() {
      if (lwaAuthorizationCredentials == null) {
        throw new RuntimeException("LWAAuthorizationCredentials not set");
      }

      if (StringUtil.isEmpty(endpoint)) {
        throw new RuntimeException("Endpoint not set");
      }

      LWAAuthorizationSigner lwaAuthorizationSigner = null;
      if (disableAccessTokenCache) {
        lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
      } else {
        if (lwaAccessTokenCache == null) {
          lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
        }
        lwaAuthorizationSigner =
            new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
      }

      return new MerchantFulfillmentApi(
          new ApiClient()
              .setLWAAuthorizationSigner(lwaAuthorizationSigner)
              .setBasePath(endpoint)
              .setRateLimiter(rateLimitConfiguration));
    }
  }
}
