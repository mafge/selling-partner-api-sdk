/*
 * Selling Partner API for Easy Ship
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * OpenAPI spec version: 2022-03-23
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.easyship.v2022_03_23;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/** The dimensions of the scheduled package. */
@Schema(description = "The dimensions of the scheduled package.")
public class Dimensions {
    @SerializedName("length")
    private Float length = null;

    @SerializedName("width")
    private Float width = null;

    @SerializedName("height")
    private Float height = null;

    @SerializedName("unit")
    private UnitOfLength unit = null;

    @SerializedName("identifier")
    private String identifier = null;

    public Dimensions length(Float length) {
        this.length = length;
        return this;
    }

    /**
     * Get length
     *
     * @return length
     */
    @Schema(description = "")
    public Float getLength() {
        return length;
    }

    public void setLength(Float length) {
        this.length = length;
    }

    public Dimensions width(Float width) {
        this.width = width;
        return this;
    }

    /**
     * Get width
     *
     * @return width
     */
    @Schema(description = "")
    public Float getWidth() {
        return width;
    }

    public void setWidth(Float width) {
        this.width = width;
    }

    public Dimensions height(Float height) {
        this.height = height;
        return this;
    }

    /**
     * Get height
     *
     * @return height
     */
    @Schema(description = "")
    public Float getHeight() {
        return height;
    }

    public void setHeight(Float height) {
        this.height = height;
    }

    public Dimensions unit(UnitOfLength unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get unit
     *
     * @return unit
     */
    @Schema(description = "")
    public UnitOfLength getUnit() {
        return unit;
    }

    public void setUnit(UnitOfLength unit) {
        this.unit = unit;
    }

    public Dimensions identifier(String identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Get identifier
     *
     * @return identifier
     */
    @Schema(description = "")
    public String getIdentifier() {
        return identifier;
    }

    public void setIdentifier(String identifier) {
        this.identifier = identifier;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Dimensions dimensions = (Dimensions) o;
        return Objects.equals(this.length, dimensions.length)
                && Objects.equals(this.width, dimensions.width)
                && Objects.equals(this.height, dimensions.height)
                && Objects.equals(this.unit, dimensions.unit)
                && Objects.equals(this.identifier, dimensions.identifier);
    }

    @Override
    public int hashCode() {
        return Objects.hash(length, width, height, unit, identifier);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Dimensions {\n");

        sb.append("    length: ").append(toIndentedString(length)).append("\n");
        sb.append("    width: ").append(toIndentedString(width)).append("\n");
        sb.append("    height: ").append(toIndentedString(height)).append("\n");
        sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
        sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
