/*
 * Selling Partner API for Reports
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.reports.v2021_06_30;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.reports.v2021_06_30.CreateReportResponse;
import software.amazon.spapi.models.reports.v2021_06_30.CreateReportScheduleResponse;
import software.amazon.spapi.models.reports.v2021_06_30.CreateReportScheduleSpecification;
import software.amazon.spapi.models.reports.v2021_06_30.CreateReportSpecification;
import software.amazon.spapi.models.reports.v2021_06_30.GetReportsResponse;
import software.amazon.spapi.models.reports.v2021_06_30.Report;
import software.amazon.spapi.models.reports.v2021_06_30.ReportDocument;
import software.amazon.spapi.models.reports.v2021_06_30.ReportSchedule;
import software.amazon.spapi.models.reports.v2021_06_30.ReportScheduleList;

public class ReportsApi {
    private ApiClient apiClient;

    public ReportsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    private final Configuration config = Configuration.get();

    private final Bucket cancelReportBucket = Bucket.builder()
            .addLimit(config.getLimit("ReportsApi-cancelReport"))
            .build();

    private final Bucket cancelReportScheduleBucket = Bucket.builder()
            .addLimit(config.getLimit("ReportsApi-cancelReportSchedule"))
            .build();

    private final Bucket createReportBucket = Bucket.builder()
            .addLimit(config.getLimit("ReportsApi-createReport"))
            .build();

    private final Bucket createReportScheduleBucket = Bucket.builder()
            .addLimit(config.getLimit("ReportsApi-createReportSchedule"))
            .build();

    private final Bucket getReportBucket =
            Bucket.builder().addLimit(config.getLimit("ReportsApi-getReport")).build();

    private final Bucket getReportDocumentBucket = Bucket.builder()
            .addLimit(config.getLimit("ReportsApi-getReportDocument"))
            .build();

    private final Bucket getReportScheduleBucket = Bucket.builder()
            .addLimit(config.getLimit("ReportsApi-getReportSchedule"))
            .build();

    private final Bucket getReportSchedulesBucket = Bucket.builder()
            .addLimit(config.getLimit("ReportsApi-getReportSchedules"))
            .build();

    private final Bucket getReportsBucket =
            Bucket.builder().addLimit(config.getLimit("ReportsApi-getReports")).build();

    private okhttp3.Call cancelReportCall(
            String reportId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/2021-06-30/reports/{reportId}"
                .replaceAll("\\{" + "reportId" + "\\}", apiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call cancelReportValidateBeforeCall(
            String reportId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling cancelReport(Async)");
        }

        return cancelReportCall(reportId, progressListener, progressRequestListener);
    }

    /**
     * Cancels the report that you specify. Only reports with &#x60;processingStatus&#x3D;IN_QUEUE&#x60; can be
     * cancelled. Cancelled reports are returned in subsequent calls to the &#x60;getReport&#x60; and
     * &#x60;getReports&#x60; operations. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The table above indicates the default rate and burst values
     * for this operation. Selling partners whose business demands require higher throughput may see higher rate and
     * burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling
     * Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public void cancelReport(String reportId) throws ApiException, LWAException {
        cancelReportWithHttpInfo(reportId);
    }

    /**
     * Cancels the report that you specify. Only reports with &#x60;processingStatus&#x3D;IN_QUEUE&#x60; can be
     * cancelled. Cancelled reports are returned in subsequent calls to the &#x60;getReport&#x60; and
     * &#x60;getReports&#x60; operations. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The table above indicates the default rate and burst values
     * for this operation. Selling partners whose business demands require higher throughput may see higher rate and
     * burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling
     * Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Void> cancelReportWithHttpInfo(String reportId) throws ApiException, LWAException {
        okhttp3.Call call = cancelReportValidateBeforeCall(reportId, null, null);
        if (cancelReportBucket.tryConsume(1)) {
            return apiClient.execute(call);
        } else throw new ApiException.RateLimitExceeded("cancelReport operation exceeds rate limit");
    }

    /**
     * (asynchronously) Cancels the report that you specify. Only reports with
     * &#x60;processingStatus&#x3D;IN_QUEUE&#x60; can be cancelled. Cancelled reports are returned in subsequent calls
     * to the &#x60;getReport&#x60; and &#x60;getReports&#x60; operations. **Usage Plan:** | Rate (requests per second)
     * | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelReportAsync(String reportId, final ApiCallback<Void> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = cancelReportValidateBeforeCall(reportId, progressListener, progressRequestListener);
        if (cancelReportBucket.tryConsume(1)) {
            apiClient.executeAsync(call, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("cancelReport operation exceeds rate limit");
    }

    private okhttp3.Call cancelReportScheduleCall(
            String reportScheduleId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/2021-06-30/schedules/{reportScheduleId}"
                .replaceAll("\\{" + "reportScheduleId" + "\\}", apiClient.escapeString(reportScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call cancelReportScheduleValidateBeforeCall(
            String reportScheduleId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'reportScheduleId' is set
        if (reportScheduleId == null) {
            throw new ApiException(
                    "Missing the required parameter 'reportScheduleId' when calling cancelReportSchedule(Async)");
        }

        return cancelReportScheduleCall(reportScheduleId, progressListener, progressRequestListener);
    }

    /**
     * Cancels the report schedule that you specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
     * that were applied to the requested operation, when available. The table above indicates the default rate and
     * burst values for this operation. Selling partners whose business demands require higher throughput may see higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportScheduleId The identifier for the report schedule. This identifier is unique only in combination
     *     with a seller ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public void cancelReportSchedule(String reportScheduleId) throws ApiException, LWAException {
        cancelReportScheduleWithHttpInfo(reportScheduleId);
    }

    /**
     * Cancels the report schedule that you specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
     * that were applied to the requested operation, when available. The table above indicates the default rate and
     * burst values for this operation. Selling partners whose business demands require higher throughput may see higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportScheduleId The identifier for the report schedule. This identifier is unique only in combination
     *     with a seller ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Void> cancelReportScheduleWithHttpInfo(String reportScheduleId)
            throws ApiException, LWAException {
        okhttp3.Call call = cancelReportScheduleValidateBeforeCall(reportScheduleId, null, null);
        if (cancelReportScheduleBucket.tryConsume(1)) {
            return apiClient.execute(call);
        } else throw new ApiException.RateLimitExceeded("cancelReportSchedule operation exceeds rate limit");
    }

    /**
     * (asynchronously) Cancels the report schedule that you specify. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage
     * plan rate limits that were applied to the requested operation, when available. The table above indicates the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportScheduleId The identifier for the report schedule. This identifier is unique only in combination
     *     with a seller ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelReportScheduleAsync(String reportScheduleId, final ApiCallback<Void> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                cancelReportScheduleValidateBeforeCall(reportScheduleId, progressListener, progressRequestListener);
        if (cancelReportScheduleBucket.tryConsume(1)) {
            apiClient.executeAsync(call, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("cancelReportSchedule operation exceeds rate limit");
    }

    private okhttp3.Call createReportCall(
            CreateReportSpecification body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/reports/2021-06-30/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call createReportValidateBeforeCall(
            CreateReportSpecification body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createReport(Async)");
        }

        return createReportCall(body, progressListener, progressRequestListener);
    }

    /**
     * Creates a report. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Information required to create the report. (required)
     * @return CreateReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateReportResponse createReport(CreateReportSpecification body) throws ApiException, LWAException {
        ApiResponse<CreateReportResponse> resp = createReportWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a report. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Information required to create the report. (required)
     * @return ApiResponse&lt;CreateReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateReportResponse> createReportWithHttpInfo(CreateReportSpecification body)
            throws ApiException, LWAException {
        okhttp3.Call call = createReportValidateBeforeCall(body, null, null);
        if (createReportBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateReportResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createReport operation exceeds rate limit");
    }

    /**
     * (asynchronously) Creates a report. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 0.0167 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The table above indicates the default rate and burst values
     * for this operation. Selling partners whose business demands require higher throughput may see higher rate and
     * burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling
     * Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Information required to create the report. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createReportAsync(
            CreateReportSpecification body, final ApiCallback<CreateReportResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = createReportValidateBeforeCall(body, progressListener, progressRequestListener);
        if (createReportBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateReportResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createReport operation exceeds rate limit");
    }

    private okhttp3.Call createReportScheduleCall(
            CreateReportScheduleSpecification body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/reports/2021-06-30/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call createReportScheduleValidateBeforeCall(
            CreateReportScheduleSpecification body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createReportSchedule(Async)");
        }

        return createReportScheduleCall(body, progressListener, progressRequestListener);
    }

    /**
     * Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it
     * will be cancelled and replaced with this one. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
     * that were applied to the requested operation, when available. The table above indicates the default rate and
     * burst values for this operation. Selling partners whose business demands require higher throughput may see higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Information required to create the report schedule. (required)
     * @return CreateReportScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateReportScheduleResponse createReportSchedule(CreateReportScheduleSpecification body)
            throws ApiException, LWAException {
        ApiResponse<CreateReportScheduleResponse> resp = createReportScheduleWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it
     * will be cancelled and replaced with this one. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
     * that were applied to the requested operation, when available. The table above indicates the default rate and
     * burst values for this operation. Selling partners whose business demands require higher throughput may see higher
     * rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Information required to create the report schedule. (required)
     * @return ApiResponse&lt;CreateReportScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateReportScheduleResponse> createReportScheduleWithHttpInfo(
            CreateReportScheduleSpecification body) throws ApiException, LWAException {
        okhttp3.Call call = createReportScheduleValidateBeforeCall(body, null, null);
        if (createReportScheduleBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateReportScheduleResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createReportSchedule operation exceeds rate limit");
    }

    /**
     * (asynchronously) Creates a report schedule. If a report schedule with the same report type and marketplace IDs
     * already exists, it will be cancelled and replaced with this one. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage
     * plan rate limits that were applied to the requested operation, when available. The table above indicates the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Information required to create the report schedule. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createReportScheduleAsync(
            CreateReportScheduleSpecification body, final ApiCallback<CreateReportScheduleResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = createReportScheduleValidateBeforeCall(body, progressListener, progressRequestListener);
        if (createReportScheduleBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateReportScheduleResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createReportSchedule operation exceeds rate limit");
    }

    private okhttp3.Call getReportCall(
            String reportId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/2021-06-30/reports/{reportId}"
                .replaceAll("\\{" + "reportId" + "\\}", apiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getReportValidateBeforeCall(
            String reportId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getReport(Async)");
        }

        return getReportCall(reportId, progressListener, progressRequestListener);
    }

    /**
     * Returns report details (including the &#x60;reportDocumentId&#x60;, if available) for the report that you
     * specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @return Report
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public Report getReport(String reportId) throws ApiException, LWAException {
        ApiResponse<Report> resp = getReportWithHttpInfo(reportId);
        return resp.getData();
    }

    /**
     * Returns report details (including the &#x60;reportDocumentId&#x60;, if available) for the report that you
     * specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @return ApiResponse&lt;Report&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Report> getReportWithHttpInfo(String reportId) throws ApiException, LWAException {
        okhttp3.Call call = getReportValidateBeforeCall(reportId, null, null);
        if (getReportBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<Report>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getReport operation exceeds rate limit");
    }

    /**
     * (asynchronously) Returns report details (including the &#x60;reportDocumentId&#x60;, if available) for the report
     * that you specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getReportAsync(String reportId, final ApiCallback<Report> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getReportValidateBeforeCall(reportId, progressListener, progressRequestListener);
        if (getReportBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<Report>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getReport operation exceeds rate limit");
    }

    private okhttp3.Call getReportDocumentCall(
            String reportDocumentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/2021-06-30/documents/{reportDocumentId}"
                .replaceAll("\\{" + "reportDocumentId" + "\\}", apiClient.escapeString(reportDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getReportDocumentValidateBeforeCall(
            String reportDocumentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'reportDocumentId' is set
        if (reportDocumentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'reportDocumentId' when calling getReportDocument(Async)");
        }

        return getReportDocumentCall(reportDocumentId, progressListener, progressRequestListener);
    }

    /**
     * Returns the information required for retrieving a report document&#x27;s contents. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may see higher rate and burst values than those shown here. For more information, refer
     * to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportDocumentId The identifier for the report document. (required)
     * @return ReportDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ReportDocument getReportDocument(String reportDocumentId) throws ApiException, LWAException {
        ApiResponse<ReportDocument> resp = getReportDocumentWithHttpInfo(reportDocumentId);
        return resp.getData();
    }

    /**
     * Returns the information required for retrieving a report document&#x27;s contents. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may see higher rate and burst values than those shown here. For more information, refer
     * to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportDocumentId The identifier for the report document. (required)
     * @return ApiResponse&lt;ReportDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ReportDocument> getReportDocumentWithHttpInfo(String reportDocumentId)
            throws ApiException, LWAException {
        okhttp3.Call call = getReportDocumentValidateBeforeCall(reportDocumentId, null, null);
        if (getReportDocumentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ReportDocument>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getReportDocument operation exceeds rate limit");
    }

    /**
     * (asynchronously) Returns the information required for retrieving a report document&#x27;s contents. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportDocumentId The identifier for the report document. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getReportDocumentAsync(String reportDocumentId, final ApiCallback<ReportDocument> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getReportDocumentValidateBeforeCall(reportDocumentId, progressListener, progressRequestListener);
        if (getReportDocumentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ReportDocument>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getReportDocument operation exceeds rate limit");
    }

    private okhttp3.Call getReportScheduleCall(
            String reportScheduleId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/2021-06-30/schedules/{reportScheduleId}"
                .replaceAll("\\{" + "reportScheduleId" + "\\}", apiClient.escapeString(reportScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getReportScheduleValidateBeforeCall(
            String reportScheduleId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'reportScheduleId' is set
        if (reportScheduleId == null) {
            throw new ApiException(
                    "Missing the required parameter 'reportScheduleId' when calling getReportSchedule(Async)");
        }

        return getReportScheduleCall(reportScheduleId, progressListener, progressRequestListener);
    }

    /**
     * Returns report schedule details for the report schedule that you specify. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportScheduleId The identifier for the report schedule. This identifier is unique only in combination
     *     with a seller ID. (required)
     * @return ReportSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ReportSchedule getReportSchedule(String reportScheduleId) throws ApiException, LWAException {
        ApiResponse<ReportSchedule> resp = getReportScheduleWithHttpInfo(reportScheduleId);
        return resp.getData();
    }

    /**
     * Returns report schedule details for the report schedule that you specify. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportScheduleId The identifier for the report schedule. This identifier is unique only in combination
     *     with a seller ID. (required)
     * @return ApiResponse&lt;ReportSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ReportSchedule> getReportScheduleWithHttpInfo(String reportScheduleId)
            throws ApiException, LWAException {
        okhttp3.Call call = getReportScheduleValidateBeforeCall(reportScheduleId, null, null);
        if (getReportScheduleBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ReportSchedule>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getReportSchedule operation exceeds rate limit");
    }

    /**
     * (asynchronously) Returns report schedule details for the report schedule that you specify. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may see higher rate and burst values than those shown here. For more information, refer
     * to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportScheduleId The identifier for the report schedule. This identifier is unique only in combination
     *     with a seller ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getReportScheduleAsync(String reportScheduleId, final ApiCallback<ReportSchedule> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getReportScheduleValidateBeforeCall(reportScheduleId, progressListener, progressRequestListener);
        if (getReportScheduleBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ReportSchedule>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getReportSchedule operation exceeds rate limit");
    }

    private okhttp3.Call getReportSchedulesCall(
            List<String> reportTypes,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/2021-06-30/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reportTypes != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "reportTypes", reportTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getReportSchedulesValidateBeforeCall(
            List<String> reportTypes,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'reportTypes' is set
        if (reportTypes == null) {
            throw new ApiException(
                    "Missing the required parameter 'reportTypes' when calling getReportSchedules(Async)");
        }

        return getReportSchedulesCall(reportTypes, progressListener, progressRequestListener);
    }

    /**
     * Returns report schedule details that match the filters that you specify. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportTypes A list of report types used to filter report schedules. Refer to [Report Type
     *     Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. (required)
     * @return ReportScheduleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ReportScheduleList getReportSchedules(List<String> reportTypes) throws ApiException, LWAException {
        ApiResponse<ReportScheduleList> resp = getReportSchedulesWithHttpInfo(reportTypes);
        return resp.getData();
    }

    /**
     * Returns report schedule details that match the filters that you specify. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportTypes A list of report types used to filter report schedules. Refer to [Report Type
     *     Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. (required)
     * @return ApiResponse&lt;ReportScheduleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ReportScheduleList> getReportSchedulesWithHttpInfo(List<String> reportTypes)
            throws ApiException, LWAException {
        okhttp3.Call call = getReportSchedulesValidateBeforeCall(reportTypes, null, null);
        if (getReportSchedulesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ReportScheduleList>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getReportSchedules operation exceeds rate limit");
    }

    /**
     * (asynchronously) Returns report schedule details that match the filters that you specify. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may see higher rate and burst values than those shown here. For more information, refer
     * to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportTypes A list of report types used to filter report schedules. Refer to [Report Type
     *     Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getReportSchedulesAsync(
            List<String> reportTypes, final ApiCallback<ReportScheduleList> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getReportSchedulesValidateBeforeCall(reportTypes, progressListener, progressRequestListener);
        if (getReportSchedulesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ReportScheduleList>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getReportSchedules operation exceeds rate limit");
    }

    private okhttp3.Call getReportsCall(
            List<String> reportTypes,
            List<String> processingStatuses,
            List<String> marketplaceIds,
            Integer pageSize,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/2021-06-30/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reportTypes != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "reportTypes", reportTypes));
        if (processingStatuses != null)
            localVarCollectionQueryParams.addAll(
                    apiClient.parameterToPairs("csv", "processingStatuses", processingStatuses));
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (createdSince != null) localVarQueryParams.addAll(apiClient.parameterToPair("createdSince", createdSince));
        if (createdUntil != null) localVarQueryParams.addAll(apiClient.parameterToPair("createdUntil", createdUntil));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getReportsValidateBeforeCall(
            List<String> reportTypes,
            List<String> processingStatuses,
            List<String> marketplaceIds,
            Integer pageSize,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {

        return getReportsCall(
                reportTypes,
                processingStatuses,
                marketplaceIds,
                pageSize,
                createdSince,
                createdUntil,
                nextToken,
                progressListener,
                progressRequestListener);
    }

    /**
     * Returns report details for the reports that match the filters that you specify. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportTypes A list of report types used to filter reports. Refer to [Report Type
     *     Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. When
     *     reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince,
     *     createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)
     * @param processingStatuses A list of processing statuses used to filter reports. (optional)
     * @param marketplaceIds A list of marketplace identifiers used to filter reports. The reports returned will match
     *     at least one of the marketplaces that you specify. (optional)
     * @param pageSize The maximum number of reports to return in a single call. (optional, default to 10)
     * @param createdSince The earliest report creation date and time for reports to include in the response, in &lt;a
     *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO 8601&lt;/a&gt; date time
     *     format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)
     * @param createdUntil The latest report creation date and time for reports to include in the response, in &lt;a
     *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO 8601&lt;/a&gt; date time
     *     format. The default is now. (optional)
     * @param nextToken A string token returned in the response to your previous request. &#x60;nextToken&#x60; is
     *     returned when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of
     *     results, call the &#x60;getReports&#x60; operation and include this token as the only parameter. Specifying
     *     &#x60;nextToken&#x60; with any other parameters will cause the request to fail. (optional)
     * @return GetReportsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetReportsResponse getReports(
            List<String> reportTypes,
            List<String> processingStatuses,
            List<String> marketplaceIds,
            Integer pageSize,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken)
            throws ApiException, LWAException {
        ApiResponse<GetReportsResponse> resp = getReportsWithHttpInfo(
                reportTypes, processingStatuses, marketplaceIds, pageSize, createdSince, createdUntil, nextToken);
        return resp.getData();
    }

    /**
     * Returns report details for the reports that match the filters that you specify. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportTypes A list of report types used to filter reports. Refer to [Report Type
     *     Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. When
     *     reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince,
     *     createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)
     * @param processingStatuses A list of processing statuses used to filter reports. (optional)
     * @param marketplaceIds A list of marketplace identifiers used to filter reports. The reports returned will match
     *     at least one of the marketplaces that you specify. (optional)
     * @param pageSize The maximum number of reports to return in a single call. (optional, default to 10)
     * @param createdSince The earliest report creation date and time for reports to include in the response, in &lt;a
     *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO 8601&lt;/a&gt; date time
     *     format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)
     * @param createdUntil The latest report creation date and time for reports to include in the response, in &lt;a
     *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO 8601&lt;/a&gt; date time
     *     format. The default is now. (optional)
     * @param nextToken A string token returned in the response to your previous request. &#x60;nextToken&#x60; is
     *     returned when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of
     *     results, call the &#x60;getReports&#x60; operation and include this token as the only parameter. Specifying
     *     &#x60;nextToken&#x60; with any other parameters will cause the request to fail. (optional)
     * @return ApiResponse&lt;GetReportsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetReportsResponse> getReportsWithHttpInfo(
            List<String> reportTypes,
            List<String> processingStatuses,
            List<String> marketplaceIds,
            Integer pageSize,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getReportsValidateBeforeCall(
                reportTypes,
                processingStatuses,
                marketplaceIds,
                pageSize,
                createdSince,
                createdUntil,
                nextToken,
                null,
                null);
        if (getReportsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetReportsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getReports operation exceeds rate limit");
    }

    /**
     * (asynchronously) Returns report details for the reports that match the filters that you specify. **Usage Plan:**
     * | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param reportTypes A list of report types used to filter reports. Refer to [Report Type
     *     Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. When
     *     reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince,
     *     createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)
     * @param processingStatuses A list of processing statuses used to filter reports. (optional)
     * @param marketplaceIds A list of marketplace identifiers used to filter reports. The reports returned will match
     *     at least one of the marketplaces that you specify. (optional)
     * @param pageSize The maximum number of reports to return in a single call. (optional, default to 10)
     * @param createdSince The earliest report creation date and time for reports to include in the response, in &lt;a
     *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO 8601&lt;/a&gt; date time
     *     format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)
     * @param createdUntil The latest report creation date and time for reports to include in the response, in &lt;a
     *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO 8601&lt;/a&gt; date time
     *     format. The default is now. (optional)
     * @param nextToken A string token returned in the response to your previous request. &#x60;nextToken&#x60; is
     *     returned when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of
     *     results, call the &#x60;getReports&#x60; operation and include this token as the only parameter. Specifying
     *     &#x60;nextToken&#x60; with any other parameters will cause the request to fail. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getReportsAsync(
            List<String> reportTypes,
            List<String> processingStatuses,
            List<String> marketplaceIds,
            Integer pageSize,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken,
            final ApiCallback<GetReportsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getReportsValidateBeforeCall(
                reportTypes,
                processingStatuses,
                marketplaceIds,
                pageSize,
                createdSince,
                createdUntil,
                nextToken,
                progressListener,
                progressRequestListener);
        if (getReportsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetReportsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getReports operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public ReportsApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new ReportsApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint));
        }
    }
}
