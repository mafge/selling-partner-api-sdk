/*
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.vendor.shipments.v1;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A list of the items in this transportation and their associated inner container details. If any of the item detail
 * fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
 */
@Schema(
        description =
                "A list of the items in this transportation and their associated inner container details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.")
public class Containers {
    /** The type of container. */
    @JsonAdapter(ContainerTypeEnum.Adapter.class)
    public enum ContainerTypeEnum {
        @SerializedName("carton")
        CARTON("carton"),
        @SerializedName("pallet")
        PALLET("pallet");

        private String value;

        ContainerTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ContainerTypeEnum fromValue(String input) {
            for (ContainerTypeEnum b : ContainerTypeEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ContainerTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ContainerTypeEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public ContainerTypeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return ContainerTypeEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("containerType")
    private ContainerTypeEnum containerType = null;

    @SerializedName("containerSequenceNumber")
    private String containerSequenceNumber = null;

    @SerializedName("containerIdentifiers")
    private List<ContainerIdentification> containerIdentifiers = new ArrayList<ContainerIdentification>();

    @SerializedName("trackingNumber")
    private String trackingNumber = null;

    @SerializedName("dimensions")
    private Dimensions dimensions = null;

    @SerializedName("weight")
    private Weight weight = null;

    @SerializedName("tier")
    private Integer tier = null;

    @SerializedName("block")
    private Integer block = null;

    @SerializedName("innerContainersDetails")
    private InnerContainersDetails innerContainersDetails = null;

    @SerializedName("packedItems")
    private List<PackedItems> packedItems = null;

    public Containers containerType(ContainerTypeEnum containerType) {
        this.containerType = containerType;
        return this;
    }

    /**
     * The type of container.
     *
     * @return containerType
     */
    @Schema(required = true, description = "The type of container.")
    public ContainerTypeEnum getContainerType() {
        return containerType;
    }

    public void setContainerType(ContainerTypeEnum containerType) {
        this.containerType = containerType;
    }

    public Containers containerSequenceNumber(String containerSequenceNumber) {
        this.containerSequenceNumber = containerSequenceNumber;
        return this;
    }

    /**
     * An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.
     *
     * @return containerSequenceNumber
     */
    @Schema(
            description =
                    "An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.")
    public String getContainerSequenceNumber() {
        return containerSequenceNumber;
    }

    public void setContainerSequenceNumber(String containerSequenceNumber) {
        this.containerSequenceNumber = containerSequenceNumber;
    }

    public Containers containerIdentifiers(List<ContainerIdentification> containerIdentifiers) {
        this.containerIdentifiers = containerIdentifiers;
        return this;
    }

    public Containers addContainerIdentifiersItem(ContainerIdentification containerIdentifiersItem) {
        this.containerIdentifiers.add(containerIdentifiersItem);
        return this;
    }

    /**
     * A list of carton identifiers.
     *
     * @return containerIdentifiers
     */
    @Schema(required = true, description = "A list of carton identifiers.")
    public List<ContainerIdentification> getContainerIdentifiers() {
        return containerIdentifiers;
    }

    public void setContainerIdentifiers(List<ContainerIdentification> containerIdentifiers) {
        this.containerIdentifiers = containerIdentifiers;
    }

    public Containers trackingNumber(String trackingNumber) {
        this.trackingNumber = trackingNumber;
        return this;
    }

    /**
     * The tracking number used for identifying the shipment.
     *
     * @return trackingNumber
     */
    @Schema(description = "The tracking number used for identifying the shipment.")
    public String getTrackingNumber() {
        return trackingNumber;
    }

    public void setTrackingNumber(String trackingNumber) {
        this.trackingNumber = trackingNumber;
    }

    public Containers dimensions(Dimensions dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    /**
     * Get dimensions
     *
     * @return dimensions
     */
    @Schema(description = "")
    public Dimensions getDimensions() {
        return dimensions;
    }

    public void setDimensions(Dimensions dimensions) {
        this.dimensions = dimensions;
    }

    public Containers weight(Weight weight) {
        this.weight = weight;
        return this;
    }

    /**
     * Get weight
     *
     * @return weight
     */
    @Schema(description = "")
    public Weight getWeight() {
        return weight;
    }

    public void setWeight(Weight weight) {
        this.weight = weight;
    }

    public Containers tier(Integer tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Number of layers per pallet.
     *
     * @return tier
     */
    @Schema(description = "Number of layers per pallet.")
    public Integer getTier() {
        return tier;
    }

    public void setTier(Integer tier) {
        this.tier = tier;
    }

    public Containers block(Integer block) {
        this.block = block;
        return this;
    }

    /**
     * Number of cartons per layer on the pallet.
     *
     * @return block
     */
    @Schema(description = "Number of cartons per layer on the pallet.")
    public Integer getBlock() {
        return block;
    }

    public void setBlock(Integer block) {
        this.block = block;
    }

    public Containers innerContainersDetails(InnerContainersDetails innerContainersDetails) {
        this.innerContainersDetails = innerContainersDetails;
        return this;
    }

    /**
     * Get innerContainersDetails
     *
     * @return innerContainersDetails
     */
    @Schema(description = "")
    public InnerContainersDetails getInnerContainersDetails() {
        return innerContainersDetails;
    }

    public void setInnerContainersDetails(InnerContainersDetails innerContainersDetails) {
        this.innerContainersDetails = innerContainersDetails;
    }

    public Containers packedItems(List<PackedItems> packedItems) {
        this.packedItems = packedItems;
        return this;
    }

    public Containers addPackedItemsItem(PackedItems packedItemsItem) {
        if (this.packedItems == null) {
            this.packedItems = new ArrayList<PackedItems>();
        }
        this.packedItems.add(packedItemsItem);
        return this;
    }

    /**
     * A list of packed items.
     *
     * @return packedItems
     */
    @Schema(description = "A list of packed items.")
    public List<PackedItems> getPackedItems() {
        return packedItems;
    }

    public void setPackedItems(List<PackedItems> packedItems) {
        this.packedItems = packedItems;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Containers containers = (Containers) o;
        return Objects.equals(this.containerType, containers.containerType)
                && Objects.equals(this.containerSequenceNumber, containers.containerSequenceNumber)
                && Objects.equals(this.containerIdentifiers, containers.containerIdentifiers)
                && Objects.equals(this.trackingNumber, containers.trackingNumber)
                && Objects.equals(this.dimensions, containers.dimensions)
                && Objects.equals(this.weight, containers.weight)
                && Objects.equals(this.tier, containers.tier)
                && Objects.equals(this.block, containers.block)
                && Objects.equals(this.innerContainersDetails, containers.innerContainersDetails)
                && Objects.equals(this.packedItems, containers.packedItems);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                containerType,
                containerSequenceNumber,
                containerIdentifiers,
                trackingNumber,
                dimensions,
                weight,
                tier,
                block,
                innerContainersDetails,
                packedItems);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Containers {\n");

        sb.append("    containerType: ").append(toIndentedString(containerType)).append("\n");
        sb.append("    containerSequenceNumber: ")
                .append(toIndentedString(containerSequenceNumber))
                .append("\n");
        sb.append("    containerIdentifiers: ")
                .append(toIndentedString(containerIdentifiers))
                .append("\n");
        sb.append("    trackingNumber: ")
                .append(toIndentedString(trackingNumber))
                .append("\n");
        sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
        sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
        sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
        sb.append("    block: ").append(toIndentedString(block)).append("\n");
        sb.append("    innerContainersDetails: ")
                .append(toIndentedString(innerContainersDetails))
                .append("\n");
        sb.append("    packedItems: ").append(toIndentedString(packedItems)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
