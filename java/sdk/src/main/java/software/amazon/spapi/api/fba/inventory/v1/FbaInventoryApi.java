/*
 * Selling Partner API for FBA Inventory
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.fba.inventory.v1;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.fba.inventory.v1.AddInventoryRequest;
import software.amazon.spapi.models.fba.inventory.v1.AddInventoryResponse;
import software.amazon.spapi.models.fba.inventory.v1.CreateInventoryItemRequest;
import software.amazon.spapi.models.fba.inventory.v1.CreateInventoryItemResponse;
import software.amazon.spapi.models.fba.inventory.v1.DeleteInventoryItemResponse;
import software.amazon.spapi.models.fba.inventory.v1.GetInventorySummariesResponse;

public class FbaInventoryApi {
    private ApiClient apiClient;

    public FbaInventoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    private final Configuration config = Configuration.get();

    private final Bucket addInventoryBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInventoryApi-addInventory"))
            .build();

    private final Bucket createInventoryItemBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInventoryApi-createInventoryItem"))
            .build();

    private final Bucket deleteInventoryItemBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInventoryApi-deleteInventoryItem"))
            .build();

    private final Bucket getInventorySummariesBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInventoryApi-getInventorySummaries"))
            .build();

    private okhttp3.Call addInventoryCall(
            AddInventoryRequest body,
            String xAmznIdempotencyToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fba/inventory/v1/items/inventory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAmznIdempotencyToken != null)
            localVarHeaderParams.put("x-amzn-idempotency-token", apiClient.parameterToString(xAmznIdempotencyToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call addInventoryValidateBeforeCall(
            AddInventoryRequest body,
            String xAmznIdempotencyToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addInventory(Async)");
        }
        // verify the required parameter 'xAmznIdempotencyToken' is set
        if (xAmznIdempotencyToken == null) {
            throw new ApiException(
                    "Missing the required parameter 'xAmznIdempotencyToken' when calling addInventory(Async)");
        }

        return addInventoryCall(body, xAmznIdempotencyToken, progressListener, progressRequestListener);
    }

    /**
     * Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox
     * environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling
     * Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more
     * information.
     *
     * @param body List of items to add to Sandbox inventory. (required)
     * @param xAmznIdempotencyToken A unique token/requestId provided with each call to ensure idempotency. (required)
     * @return AddInventoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public AddInventoryResponse addInventory(AddInventoryRequest body, String xAmznIdempotencyToken)
            throws ApiException, LWAException {
        ApiResponse<AddInventoryResponse> resp = addInventoryWithHttpInfo(body, xAmznIdempotencyToken);
        return resp.getData();
    }

    /**
     * Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the sandbox
     * environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling
     * Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more
     * information.
     *
     * @param body List of items to add to Sandbox inventory. (required)
     * @param xAmznIdempotencyToken A unique token/requestId provided with each call to ensure idempotency. (required)
     * @return ApiResponse&lt;AddInventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<AddInventoryResponse> addInventoryWithHttpInfo(
            AddInventoryRequest body, String xAmznIdempotencyToken) throws ApiException, LWAException {
        okhttp3.Call call = addInventoryValidateBeforeCall(body, xAmznIdempotencyToken, null, null);
        if (addInventoryBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<AddInventoryResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("addInventory operation exceeds rate limit");
    }

    /**
     * (asynchronously) Requests that Amazon add items to the Sandbox Inventory with desired amount of quantity in the
     * sandbox environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to
     * [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for
     * more information.
     *
     * @param body List of items to add to Sandbox inventory. (required)
     * @param xAmznIdempotencyToken A unique token/requestId provided with each call to ensure idempotency. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call addInventoryAsync(
            AddInventoryRequest body, String xAmznIdempotencyToken, final ApiCallback<AddInventoryResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                addInventoryValidateBeforeCall(body, xAmznIdempotencyToken, progressListener, progressRequestListener);
        if (addInventoryBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<AddInventoryResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("addInventory operation exceeds rate limit");
    }

    private okhttp3.Call createInventoryItemCall(
            CreateInventoryItemRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fba/inventory/v1/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call createInventoryItemValidateBeforeCall(
            CreateInventoryItemRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createInventoryItem(Async)");
        }

        return createInventoryItemCall(body, progressListener, progressRequestListener);
    }

    /**
     * Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a
     * sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API
     * sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
     *
     * @param body CreateInventoryItem Request Body Parameter. (required)
     * @return CreateInventoryItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateInventoryItemResponse createInventoryItem(CreateInventoryItemRequest body)
            throws ApiException, LWAException {
        ApiResponse<CreateInventoryItemResponse> resp = createInventoryItemWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment. This is a
     * sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API
     * sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
     *
     * @param body CreateInventoryItem Request Body Parameter. (required)
     * @return ApiResponse&lt;CreateInventoryItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateInventoryItemResponse> createInventoryItemWithHttpInfo(CreateInventoryItemRequest body)
            throws ApiException, LWAException {
        okhttp3.Call call = createInventoryItemValidateBeforeCall(body, null, null);
        if (createInventoryItemBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateInventoryItemResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createInventoryItem operation exceeds rate limit");
    }

    /**
     * (asynchronously) Requests that Amazon create product-details in the Sandbox Inventory in the sandbox environment.
     * This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API
     * sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
     *
     * @param body CreateInventoryItem Request Body Parameter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createInventoryItemAsync(
            CreateInventoryItemRequest body, final ApiCallback<CreateInventoryItemResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = createInventoryItemValidateBeforeCall(body, progressListener, progressRequestListener);
        if (createInventoryItemBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateInventoryItemResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createInventoryItem operation exceeds rate limit");
    }

    private okhttp3.Call deleteInventoryItemCall(
            String sellerSku,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/inventory/v1/items/{sellerSku}"
                .replaceAll("\\{" + "sellerSku" + "\\}", apiClient.escapeString(sellerSku.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call deleteInventoryItemValidateBeforeCall(
            String sellerSku,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'sellerSku' is set
        if (sellerSku == null) {
            throw new ApiException(
                    "Missing the required parameter 'sellerSku' when calling deleteInventoryItem(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling deleteInventoryItem(Async)");
        }

        return deleteInventoryItemCall(sellerSku, marketplaceId, progressListener, progressRequestListener);
    }

    /**
     * Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a
     * sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API
     * sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
     *
     * @param sellerSku A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
     * @param marketplaceId The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
     * @return DeleteInventoryItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public DeleteInventoryItemResponse deleteInventoryItem(String sellerSku, String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<DeleteInventoryItemResponse> resp = deleteInventoryItemWithHttpInfo(sellerSku, marketplaceId);
        return resp.getData();
    }

    /**
     * Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This is a
     * sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API
     * sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
     *
     * @param sellerSku A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
     * @param marketplaceId The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
     * @return ApiResponse&lt;DeleteInventoryItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<DeleteInventoryItemResponse> deleteInventoryItemWithHttpInfo(
            String sellerSku, String marketplaceId) throws ApiException, LWAException {
        okhttp3.Call call = deleteInventoryItemValidateBeforeCall(sellerSku, marketplaceId, null, null);
        if (deleteInventoryItemBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<DeleteInventoryItemResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("deleteInventoryItem operation exceeds rate limit");
    }

    /**
     * (asynchronously) Requests that Amazon Deletes an item from the Sandbox Inventory in the sandbox environment. This
     * is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Selling Partner API
     * sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
     *
     * @param sellerSku A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
     * @param marketplaceId The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call deleteInventoryItemAsync(
            String sellerSku, String marketplaceId, final ApiCallback<DeleteInventoryItemResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = deleteInventoryItemValidateBeforeCall(
                sellerSku, marketplaceId, progressListener, progressRequestListener);
        if (deleteInventoryItemBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<DeleteInventoryItemResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("deleteInventoryItem operation exceeds rate limit");
    }

    private okhttp3.Call getInventorySummariesCall(
            String granularityType,
            String granularityId,
            List<String> marketplaceIds,
            Boolean details,
            OffsetDateTime startDateTime,
            List<String> sellerSkus,
            String sellerSku,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/inventory/v1/summaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (details != null) localVarQueryParams.addAll(apiClient.parameterToPair("details", details));
        if (granularityType != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("granularityType", granularityType));
        if (granularityId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("granularityId", granularityId));
        if (startDateTime != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("startDateTime", startDateTime));
        if (sellerSkus != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sellerSkus", sellerSkus));
        if (sellerSku != null) localVarQueryParams.addAll(apiClient.parameterToPair("sellerSku", sellerSku));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getInventorySummariesValidateBeforeCall(
            String granularityType,
            String granularityId,
            List<String> marketplaceIds,
            Boolean details,
            OffsetDateTime startDateTime,
            List<String> sellerSkus,
            String sellerSku,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'granularityType' is set
        if (granularityType == null) {
            throw new ApiException(
                    "Missing the required parameter 'granularityType' when calling getInventorySummaries(Async)");
        }
        // verify the required parameter 'granularityId' is set
        if (granularityId == null) {
            throw new ApiException(
                    "Missing the required parameter 'granularityId' when calling getInventorySummaries(Async)");
        }
        // verify the required parameter 'marketplaceIds' is set
        if (marketplaceIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceIds' when calling getInventorySummaries(Async)");
        }

        return getInventorySummariesCall(
                granularityType,
                granularityId,
                marketplaceIds,
                details,
                startDateTime,
                sellerSkus,
                sellerSku,
                nextToken,
                progressListener,
                progressRequestListener);
    }

    /**
     * Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the
     * startDateTime, sellerSkus and sellerSku parameters: - All inventory summaries with available details are returned
     * when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the
     * operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and
     * sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the
     * next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus
     * parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku
     * parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for
     * only the specified sellerSku. Note: The parameters associated with this operation may contain special characters
     * that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL
     * Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). Usage Plan: | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 2 | The x-amzn-RateLimit-Limit response header returns the usage plan rate limits
     * that were applied to the requested operation, when available. The table above indicates the default rate and
     * burst values for this operation. Selling partners whose business demands require higher throughput may see higher
     * rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param granularityType The granularity type for the inventory aggregation level. (required)
     * @param granularityId The granularity ID for the inventory aggregation level. (required)
     * @param marketplaceIds The marketplace ID for the marketplace for which to return inventory summaries. (required)
     * @param details true to return inventory summaries with additional summarized inventory details and quantities.
     *     Otherwise, returns inventory summaries only (default value). (optional, default to false)
     * @param startDateTime A start date and time in ISO8601 format. If specified, all inventory summaries that have
     *     changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to
     *     the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and
     *     inboundReceivingQuantity are not detected. (optional)
     * @param sellerSkus A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.
     *     (optional)
     * @param sellerSku A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)
     * @param nextToken String token returned in the response of your previous request. The string token will expire 30
     *     seconds after being created. (optional)
     * @return GetInventorySummariesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetInventorySummariesResponse getInventorySummaries(
            String granularityType,
            String granularityId,
            List<String> marketplaceIds,
            Boolean details,
            OffsetDateTime startDateTime,
            List<String> sellerSkus,
            String sellerSku,
            String nextToken)
            throws ApiException, LWAException {
        ApiResponse<GetInventorySummariesResponse> resp = getInventorySummariesWithHttpInfo(
                granularityType,
                granularityId,
                marketplaceIds,
                details,
                startDateTime,
                sellerSkus,
                sellerSku,
                nextToken);
        return resp.getData();
    }

    /**
     * Returns a list of inventory summaries. The summaries returned depend on the presence or absence of the
     * startDateTime, sellerSkus and sellerSku parameters: - All inventory summaries with available details are returned
     * when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is provided, the
     * operation returns inventory summaries that have had changes after the date and time specified. The sellerSkus and
     * sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken to get the
     * next page of inventory summaries that have changed after the date and time specified. - When the sellerSkus
     * parameter is provided, the operation returns inventory summaries for only the specified sellerSkus. The sellerSku
     * parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory summaries for
     * only the specified sellerSku. Note: The parameters associated with this operation may contain special characters
     * that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL
     * Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). Usage Plan: | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 2 | The x-amzn-RateLimit-Limit response header returns the usage plan rate limits
     * that were applied to the requested operation, when available. The table above indicates the default rate and
     * burst values for this operation. Selling partners whose business demands require higher throughput may see higher
     * rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param granularityType The granularity type for the inventory aggregation level. (required)
     * @param granularityId The granularity ID for the inventory aggregation level. (required)
     * @param marketplaceIds The marketplace ID for the marketplace for which to return inventory summaries. (required)
     * @param details true to return inventory summaries with additional summarized inventory details and quantities.
     *     Otherwise, returns inventory summaries only (default value). (optional, default to false)
     * @param startDateTime A start date and time in ISO8601 format. If specified, all inventory summaries that have
     *     changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to
     *     the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and
     *     inboundReceivingQuantity are not detected. (optional)
     * @param sellerSkus A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.
     *     (optional)
     * @param sellerSku A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)
     * @param nextToken String token returned in the response of your previous request. The string token will expire 30
     *     seconds after being created. (optional)
     * @return ApiResponse&lt;GetInventorySummariesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetInventorySummariesResponse> getInventorySummariesWithHttpInfo(
            String granularityType,
            String granularityId,
            List<String> marketplaceIds,
            Boolean details,
            OffsetDateTime startDateTime,
            List<String> sellerSkus,
            String sellerSku,
            String nextToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getInventorySummariesValidateBeforeCall(
                granularityType,
                granularityId,
                marketplaceIds,
                details,
                startDateTime,
                sellerSkus,
                sellerSku,
                nextToken,
                null,
                null);
        if (getInventorySummariesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetInventorySummariesResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getInventorySummaries operation exceeds rate limit");
    }

    /**
     * (asynchronously) Returns a list of inventory summaries. The summaries returned depend on the presence or absence
     * of the startDateTime, sellerSkus and sellerSku parameters: - All inventory summaries with available details are
     * returned when the startDateTime, sellerSkus and sellerSku parameters are omitted. - When startDateTime is
     * provided, the operation returns inventory summaries that have had changes after the date and time specified. The
     * sellerSkus and sellerSku parameters are ignored. Important: To avoid errors, use both startDateTime and nextToken
     * to get the next page of inventory summaries that have changed after the date and time specified. - When the
     * sellerSkus parameter is provided, the operation returns inventory summaries for only the specified sellerSkus.
     * The sellerSku parameter is ignored. - When the sellerSku parameter is provided, the operation returns inventory
     * summaries for only the specified sellerSku. Note: The parameters associated with this operation may contain
     * special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding
     * URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). Usage Plan: | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The x-amzn-RateLimit-Limit response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param granularityType The granularity type for the inventory aggregation level. (required)
     * @param granularityId The granularity ID for the inventory aggregation level. (required)
     * @param marketplaceIds The marketplace ID for the marketplace for which to return inventory summaries. (required)
     * @param details true to return inventory summaries with additional summarized inventory details and quantities.
     *     Otherwise, returns inventory summaries only (default value). (optional, default to false)
     * @param startDateTime A start date and time in ISO8601 format. If specified, all inventory summaries that have
     *     changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to
     *     the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and
     *     inboundReceivingQuantity are not detected. (optional)
     * @param sellerSkus A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs.
     *     (optional)
     * @param sellerSku A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)
     * @param nextToken String token returned in the response of your previous request. The string token will expire 30
     *     seconds after being created. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getInventorySummariesAsync(
            String granularityType,
            String granularityId,
            List<String> marketplaceIds,
            Boolean details,
            OffsetDateTime startDateTime,
            List<String> sellerSkus,
            String sellerSku,
            String nextToken,
            final ApiCallback<GetInventorySummariesResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getInventorySummariesValidateBeforeCall(
                granularityType,
                granularityId,
                marketplaceIds,
                details,
                startDateTime,
                sellerSkus,
                sellerSku,
                nextToken,
                progressListener,
                progressRequestListener);
        if (getInventorySummariesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetInventorySummariesResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getInventorySummaries operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public FbaInventoryApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new FbaInventoryApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint));
        }
    }
}
