/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.pricing.v2022_05_01;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Objects;

/** The input required for building &#x60;LowestPricedOffers&#x60; data in the response. */
@Schema(description = "The input required for building `LowestPricedOffers` data in the response.")
public class LowestPricedOffersInput {
    @SerializedName("itemCondition")
    private Condition itemCondition = null;

    /**
     * The input parameter specifies the type of offers requested for &#x60;LowestPricedOffers&#x60;. This applies to
     * &#x60;Consumer&#x60; and &#x60;Business&#x60; offers. &#x60;Consumer&#x60; is the default &#x60;offerType&#x60;.
     */
    @JsonAdapter(OfferTypeEnum.Adapter.class)
    public enum OfferTypeEnum {
        @SerializedName("CONSUMER")
        CONSUMER("CONSUMER");

        private String value;

        OfferTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static OfferTypeEnum fromValue(String input) {
            for (OfferTypeEnum b : OfferTypeEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<OfferTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final OfferTypeEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public OfferTypeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return OfferTypeEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("offerType")
    private OfferTypeEnum offerType = null;

    public LowestPricedOffersInput itemCondition(Condition itemCondition) {
        this.itemCondition = itemCondition;
        return this;
    }

    /**
     * Get itemCondition
     *
     * @return itemCondition
     */
    @Schema(required = true, description = "")
    public Condition getItemCondition() {
        return itemCondition;
    }

    public void setItemCondition(Condition itemCondition) {
        this.itemCondition = itemCondition;
    }

    public LowestPricedOffersInput offerType(OfferTypeEnum offerType) {
        this.offerType = offerType;
        return this;
    }

    /**
     * The input parameter specifies the type of offers requested for &#x60;LowestPricedOffers&#x60;. This applies to
     * &#x60;Consumer&#x60; and &#x60;Business&#x60; offers. &#x60;Consumer&#x60; is the default &#x60;offerType&#x60;.
     *
     * @return offerType
     */
    @Schema(
            required = true,
            description =
                    "The input parameter specifies the type of offers requested for `LowestPricedOffers`. This applies to `Consumer` and `Business` offers. `Consumer` is the default `offerType`.")
    public OfferTypeEnum getOfferType() {
        return offerType;
    }

    public void setOfferType(OfferTypeEnum offerType) {
        this.offerType = offerType;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LowestPricedOffersInput lowestPricedOffersInput = (LowestPricedOffersInput) o;
        return Objects.equals(this.itemCondition, lowestPricedOffersInput.itemCondition)
                && Objects.equals(this.offerType, lowestPricedOffersInput.offerType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(itemCondition, offerType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class LowestPricedOffersInput {\n");

        sb.append("    itemCondition: ").append(toIndentedString(itemCondition)).append("\n");
        sb.append("    offerType: ").append(toIndentedString(offerType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
