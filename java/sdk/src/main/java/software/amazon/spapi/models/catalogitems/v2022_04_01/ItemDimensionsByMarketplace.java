/*
 * Selling Partner API for Catalog Items
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-04-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.catalogitems.v2022_04_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/** Dimensions that are associated with the item in the Amazon catalog for the indicated &#x60;marketplaceId&#x60;. */
@Schema(
        description =
                "Dimensions that are associated with the item in the Amazon catalog for the indicated `marketplaceId`.")
public class ItemDimensionsByMarketplace {
    @SerializedName("marketplaceId")
    private String marketplaceId = null;

    @SerializedName("item")
    private Dimensions item = null;

    @SerializedName("package")
    private Dimensions _package = null;

    public ItemDimensionsByMarketplace marketplaceId(String marketplaceId) {
        this.marketplaceId = marketplaceId;
        return this;
    }

    /**
     * Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace
     * IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     *
     * @return marketplaceId
     */
    @Schema(
            required = true,
            description =
                    "Amazon marketplace identifier. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).")
    public String getMarketplaceId() {
        return marketplaceId;
    }

    public void setMarketplaceId(String marketplaceId) {
        this.marketplaceId = marketplaceId;
    }

    public ItemDimensionsByMarketplace item(Dimensions item) {
        this.item = item;
        return this;
    }

    /**
     * Get item
     *
     * @return item
     */
    @Schema(description = "")
    public Dimensions getItem() {
        return item;
    }

    public void setItem(Dimensions item) {
        this.item = item;
    }

    public ItemDimensionsByMarketplace _package(Dimensions _package) {
        this._package = _package;
        return this;
    }

    /**
     * Get _package
     *
     * @return _package
     */
    @Schema(description = "")
    public Dimensions getPackage() {
        return _package;
    }

    public void setPackage(Dimensions _package) {
        this._package = _package;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ItemDimensionsByMarketplace itemDimensionsByMarketplace = (ItemDimensionsByMarketplace) o;
        return Objects.equals(this.marketplaceId, itemDimensionsByMarketplace.marketplaceId)
                && Objects.equals(this.item, itemDimensionsByMarketplace.item)
                && Objects.equals(this._package, itemDimensionsByMarketplace._package);
    }

    @Override
    public int hashCode() {
        return Objects.hash(marketplaceId, item, _package);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ItemDimensionsByMarketplace {\n");

        sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
        sb.append("    item: ").append(toIndentedString(item)).append("\n");
        sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
