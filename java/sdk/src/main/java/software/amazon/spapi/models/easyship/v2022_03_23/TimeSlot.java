/*
 * Selling Partner API for Easy Ship
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * OpenAPI spec version: 2022-03-23
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.easyship.v2022_03_23;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;
import org.threeten.bp.OffsetDateTime;

/** A time window to hand over an Easy Ship package to Amazon Logistics. */
@Schema(description = "A time window to hand over an Easy Ship package to Amazon Logistics.")
public class TimeSlot {
    @SerializedName("slotId")
    private String slotId = null;

    @SerializedName("startTime")
    private OffsetDateTime startTime = null;

    @SerializedName("endTime")
    private OffsetDateTime endTime = null;

    @SerializedName("handoverMethod")
    private HandoverMethod handoverMethod = null;

    public TimeSlot slotId(String slotId) {
        this.slotId = slotId;
        return this;
    }

    /**
     * Get slotId
     *
     * @return slotId
     */
    @Schema(required = true, description = "")
    public String getSlotId() {
        return slotId;
    }

    public void setSlotId(String slotId) {
        this.slotId = slotId;
    }

    public TimeSlot startTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get startTime
     *
     * @return startTime
     */
    @Schema(description = "")
    public OffsetDateTime getStartTime() {
        return startTime;
    }

    public void setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
    }

    public TimeSlot endTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get endTime
     *
     * @return endTime
     */
    @Schema(description = "")
    public OffsetDateTime getEndTime() {
        return endTime;
    }

    public void setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
    }

    public TimeSlot handoverMethod(HandoverMethod handoverMethod) {
        this.handoverMethod = handoverMethod;
        return this;
    }

    /**
     * Get handoverMethod
     *
     * @return handoverMethod
     */
    @Schema(description = "")
    public HandoverMethod getHandoverMethod() {
        return handoverMethod;
    }

    public void setHandoverMethod(HandoverMethod handoverMethod) {
        this.handoverMethod = handoverMethod;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TimeSlot timeSlot = (TimeSlot) o;
        return Objects.equals(this.slotId, timeSlot.slotId)
                && Objects.equals(this.startTime, timeSlot.startTime)
                && Objects.equals(this.endTime, timeSlot.endTime)
                && Objects.equals(this.handoverMethod, timeSlot.handoverMethod);
    }

    @Override
    public int hashCode() {
        return Objects.hash(slotId, startTime, endTime, handoverMethod);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TimeSlot {\n");

        sb.append("    slotId: ").append(toIndentedString(slotId)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("    handoverMethod: ")
                .append(toIndentedString(handoverMethod))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
