/*
 * The Selling Partner API for Transfers.
 * The Selling Partner API for Transfers enables selling partners to retrieve payment methods and initiate payouts for their seller accounts. This API supports the following marketplaces: DE, FR, IT, ES, SE, NL, PL, and BE.
 *
 * OpenAPI spec version: 2024-06-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.transfers.v2024_06_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/** The details of a payment method. */
@Schema(description = "The details of a payment method.")
public class PaymentMethodDetails {
    @SerializedName("accountHolderName")
    private String accountHolderName = null;

    @SerializedName("paymentMethodId")
    private String paymentMethodId = null;

    @SerializedName("tail")
    private String tail = null;

    @SerializedName("expiryDate")
    private ExpiryDate expiryDate = null;

    @SerializedName("countryCode")
    private String countryCode = null;

    @SerializedName("paymentMethodType")
    private PaymentMethodType paymentMethodType = null;

    @SerializedName("assignmentType")
    private AssignmentType assignmentType = null;

    public PaymentMethodDetails accountHolderName(String accountHolderName) {
        this.accountHolderName = accountHolderName;
        return this;
    }

    /**
     * The name of the account holder who is registered for the payment method.
     *
     * @return accountHolderName
     */
    @Schema(description = "The name of the account holder who is registered for the payment method.")
    public String getAccountHolderName() {
        return accountHolderName;
    }

    public void setAccountHolderName(String accountHolderName) {
        this.accountHolderName = accountHolderName;
    }

    public PaymentMethodDetails paymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }

    /**
     * The payment method identifier.
     *
     * @return paymentMethodId
     */
    @Schema(example = "0h_TU_CUS_4058fe2a-da6b-4b82-8e48-b20ff2eb4f6d", description = "The payment method identifier.")
    public String getPaymentMethodId() {
        return paymentMethodId;
    }

    public void setPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
    }

    public PaymentMethodDetails tail(String tail) {
        this.tail = tail;
        return this;
    }

    /**
     * The last three or four digits of the payment method.
     *
     * @return tail
     */
    @Schema(example = "321", description = "The last three or four digits of the payment method.")
    public String getTail() {
        return tail;
    }

    public void setTail(String tail) {
        this.tail = tail;
    }

    public PaymentMethodDetails expiryDate(ExpiryDate expiryDate) {
        this.expiryDate = expiryDate;
        return this;
    }

    /**
     * Get expiryDate
     *
     * @return expiryDate
     */
    @Schema(description = "")
    public ExpiryDate getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(ExpiryDate expiryDate) {
        this.expiryDate = expiryDate;
    }

    public PaymentMethodDetails countryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    /**
     * The two-letter country code in ISO 3166-1 alpha-2 format. For payment methods in the &#x60;card&#x60; category,
     * the code is for the country where the card was issued. For payment methods in the &#x60;bank account&#x60;
     * category, the code is for the country where the account is located.
     *
     * @return countryCode
     */
    @Schema(
            example = "US",
            description =
                    "The two-letter country code in ISO 3166-1 alpha-2 format. For payment methods in the `card` category, the code is for the country where the card was issued. For payment methods in the `bank account` category, the code is for the country where the account is located.")
    public String getCountryCode() {
        return countryCode;
    }

    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    public PaymentMethodDetails paymentMethodType(PaymentMethodType paymentMethodType) {
        this.paymentMethodType = paymentMethodType;
        return this;
    }

    /**
     * Get paymentMethodType
     *
     * @return paymentMethodType
     */
    @Schema(description = "")
    public PaymentMethodType getPaymentMethodType() {
        return paymentMethodType;
    }

    public void setPaymentMethodType(PaymentMethodType paymentMethodType) {
        this.paymentMethodType = paymentMethodType;
    }

    public PaymentMethodDetails assignmentType(AssignmentType assignmentType) {
        this.assignmentType = assignmentType;
        return this;
    }

    /**
     * Get assignmentType
     *
     * @return assignmentType
     */
    @Schema(description = "")
    public AssignmentType getAssignmentType() {
        return assignmentType;
    }

    public void setAssignmentType(AssignmentType assignmentType) {
        this.assignmentType = assignmentType;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentMethodDetails paymentMethodDetails = (PaymentMethodDetails) o;
        return Objects.equals(this.accountHolderName, paymentMethodDetails.accountHolderName)
                && Objects.equals(this.paymentMethodId, paymentMethodDetails.paymentMethodId)
                && Objects.equals(this.tail, paymentMethodDetails.tail)
                && Objects.equals(this.expiryDate, paymentMethodDetails.expiryDate)
                && Objects.equals(this.countryCode, paymentMethodDetails.countryCode)
                && Objects.equals(this.paymentMethodType, paymentMethodDetails.paymentMethodType)
                && Objects.equals(this.assignmentType, paymentMethodDetails.assignmentType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                accountHolderName, paymentMethodId, tail, expiryDate, countryCode, paymentMethodType, assignmentType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PaymentMethodDetails {\n");

        sb.append("    accountHolderName: ")
                .append(toIndentedString(accountHolderName))
                .append("\n");
        sb.append("    paymentMethodId: ")
                .append(toIndentedString(paymentMethodId))
                .append("\n");
        sb.append("    tail: ").append(toIndentedString(tail)).append("\n");
        sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
        sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
        sb.append("    paymentMethodType: ")
                .append(toIndentedString(paymentMethodType))
                .append("\n");
        sb.append("    assignmentType: ")
                .append(toIndentedString(assignmentType))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
