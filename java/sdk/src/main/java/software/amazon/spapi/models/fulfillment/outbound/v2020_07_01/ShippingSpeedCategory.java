/*
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.fulfillment.outbound.v2020_07_01;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * The shipping method used for the fulfillment order. When this value is &#x60;ScheduledDelivery&#x60;, choose
 * &#x60;Ship&#x60; for the &#x60;fulfillmentAction&#x60;. &#x60;Hold&#x60; is not a valid &#x60;fulfillmentAction&#x60;
 * value when the &#x60;shippingSpeedCategory&#x60; value is &#x60;ScheduledDelivery&#x60;. Note: Shipping method
 * service level agreements vary by marketplace. Sellers should refer to the [Seller
 * Central](https://developer-docs.amazon.com/sp-api/docs/seller-central-urls) website in their marketplace for shipping
 * method service level agreements and fulfillment fees.
 */
@JsonAdapter(ShippingSpeedCategory.Adapter.class)
public enum ShippingSpeedCategory {
    @SerializedName("Standard")
    STANDARD("Standard"),
    @SerializedName("Expedited")
    EXPEDITED("Expedited"),
    @SerializedName("Priority")
    PRIORITY("Priority"),
    @SerializedName("ScheduledDelivery")
    SCHEDULEDDELIVERY("ScheduledDelivery");

    private String value;

    ShippingSpeedCategory(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static ShippingSpeedCategory fromValue(String input) {
        for (ShippingSpeedCategory b : ShippingSpeedCategory.values()) {
            if (b.value.equals(input)) {
                return b;
            }
        }
        return null;
    }

    public static class Adapter extends TypeAdapter<ShippingSpeedCategory> {
        @Override
        public void write(final JsonWriter jsonWriter, final ShippingSpeedCategory enumeration) throws IOException {
            jsonWriter.value(String.valueOf(enumeration.getValue()));
        }

        @Override
        public ShippingSpeedCategory read(final JsonReader jsonReader) throws IOException {
            Object value = jsonReader.nextString();
            return ShippingSpeedCategory.fromValue((String) (value));
        }
    }
}
