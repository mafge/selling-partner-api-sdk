/*
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.listings.items.v2021_08_01;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** An issue with a listings item. */
@Schema(description = "An issue with a listings item.")
public class Issue {
    @SerializedName("code")
    private String code = null;

    @SerializedName("message")
    private String message = null;

    /** The severity of the issue. */
    @JsonAdapter(SeverityEnum.Adapter.class)
    public enum SeverityEnum {
        @SerializedName("ERROR")
        ERROR("ERROR"),
        @SerializedName("WARNING")
        WARNING("WARNING"),
        @SerializedName("INFO")
        INFO("INFO");

        private String value;

        SeverityEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static SeverityEnum fromValue(String input) {
            for (SeverityEnum b : SeverityEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<SeverityEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public SeverityEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return SeverityEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("severity")
    private SeverityEnum severity = null;

    @SerializedName("attributeNames")
    private List<String> attributeNames = null;

    @SerializedName("categories")
    private List<String> categories = new ArrayList<String>();

    @SerializedName("enforcements")
    private IssueEnforcements enforcements = null;

    public Issue code(String code) {
        this.code = code;
        return this;
    }

    /**
     * An issue code that identifies the type of issue.
     *
     * @return code
     */
    @Schema(required = true, description = "An issue code that identifies the type of issue.")
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public Issue message(String message) {
        this.message = message;
        return this;
    }

    /**
     * A message that describes the issue.
     *
     * @return message
     */
    @Schema(required = true, description = "A message that describes the issue.")
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public Issue severity(SeverityEnum severity) {
        this.severity = severity;
        return this;
    }

    /**
     * The severity of the issue.
     *
     * @return severity
     */
    @Schema(required = true, description = "The severity of the issue.")
    public SeverityEnum getSeverity() {
        return severity;
    }

    public void setSeverity(SeverityEnum severity) {
        this.severity = severity;
    }

    public Issue attributeNames(List<String> attributeNames) {
        this.attributeNames = attributeNames;
        return this;
    }

    public Issue addAttributeNamesItem(String attributeNamesItem) {
        if (this.attributeNames == null) {
            this.attributeNames = new ArrayList<String>();
        }
        this.attributeNames.add(attributeNamesItem);
        return this;
    }

    /**
     * The names of the attributes associated with the issue, if applicable.
     *
     * @return attributeNames
     */
    @Schema(description = "The names of the attributes associated with the issue, if applicable.")
    public List<String> getAttributeNames() {
        return attributeNames;
    }

    public void setAttributeNames(List<String> attributeNames) {
        this.attributeNames = attributeNames;
    }

    public Issue categories(List<String> categories) {
        this.categories = categories;
        return this;
    }

    public Issue addCategoriesItem(String categoriesItem) {
        this.categories.add(categoriesItem);
        return this;
    }

    /**
     * List of issue categories. Possible vales: * &#x60;INVALID_ATTRIBUTE&#x60; - Indicating an invalid attribute in
     * the listing. * &#x60;MISSING_ATTRIBUTE&#x60; - Highlighting a missing attribute in the listing. *
     * &#x60;INVALID_IMAGE&#x60; - Signifying an invalid image in the listing. * &#x60;MISSING_IMAGE&#x60; - Noting the
     * absence of an image in the listing. * &#x60;INVALID_PRICE&#x60; - Pertaining to issues with the listing&#x27;s
     * price-related attributes. * &#x60;MISSING_PRICE&#x60; - Pointing out the absence of a price attribute in the
     * listing. * &#x60;DUPLICATE&#x60; - Identifying listings with potential duplicate problems, such as this ASIN
     * potentially being a duplicate of another ASIN. * &#x60;QUALIFICATION_REQUIRED&#x60; - Indicating that the listing
     * requires qualification-related approval.
     *
     * @return categories
     */
    @Schema(
            example = "[\"INVALID_ATTRIBUTE\"]",
            required = true,
            description =
                    "List of issue categories.   Possible vales:   * `INVALID_ATTRIBUTE` - Indicating an invalid attribute in the listing.   * `MISSING_ATTRIBUTE` - Highlighting a missing attribute in the listing.   * `INVALID_IMAGE` - Signifying an invalid image in the listing.   * `MISSING_IMAGE` - Noting the absence of an image in the listing.   * `INVALID_PRICE` - Pertaining to issues with the listing's price-related attributes.   * `MISSING_PRICE` - Pointing out the absence of a price attribute in the listing.   * `DUPLICATE` - Identifying listings with potential duplicate problems, such as this ASIN potentially being a duplicate of another ASIN.   * `QUALIFICATION_REQUIRED` - Indicating that the listing requires qualification-related approval.")
    public List<String> getCategories() {
        return categories;
    }

    public void setCategories(List<String> categories) {
        this.categories = categories;
    }

    public Issue enforcements(IssueEnforcements enforcements) {
        this.enforcements = enforcements;
        return this;
    }

    /**
     * Get enforcements
     *
     * @return enforcements
     */
    @Schema(description = "")
    public IssueEnforcements getEnforcements() {
        return enforcements;
    }

    public void setEnforcements(IssueEnforcements enforcements) {
        this.enforcements = enforcements;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Issue issue = (Issue) o;
        return Objects.equals(this.code, issue.code)
                && Objects.equals(this.message, issue.message)
                && Objects.equals(this.severity, issue.severity)
                && Objects.equals(this.attributeNames, issue.attributeNames)
                && Objects.equals(this.categories, issue.categories)
                && Objects.equals(this.enforcements, issue.enforcements);
    }

    @Override
    public int hashCode() {
        return Objects.hash(code, message, severity, attributeNames, categories, enforcements);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Issue {\n");

        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
        sb.append("    attributeNames: ")
                .append(toIndentedString(attributeNames))
                .append("\n");
        sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
        sb.append("    enforcements: ").append(toIndentedString(enforcements)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
