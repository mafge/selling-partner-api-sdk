/*
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * OpenAPI spec version: 2021-08-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.listings.items.v2021_08_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** A variation theme that indicates the combination of listing item attributes that define the variation family. */
@Schema(
        description =
                "A variation theme that indicates the combination of listing item attributes that define the variation family.")
public class ItemVariationTheme {
    @SerializedName("attributes")
    private List<String> attributes = new ArrayList<String>();

    @SerializedName("theme")
    private String theme = null;

    public ItemVariationTheme attributes(List<String> attributes) {
        this.attributes = attributes;
        return this;
    }

    public ItemVariationTheme addAttributesItem(String attributesItem) {
        this.attributes.add(attributesItem);
        return this;
    }

    /**
     * The names of the listing item attributes that are associated with the variation theme.
     *
     * @return attributes
     */
    @Schema(
            required = true,
            description = "The names of the listing item attributes that are associated with the variation theme.")
    public List<String> getAttributes() {
        return attributes;
    }

    public void setAttributes(List<String> attributes) {
        this.attributes = attributes;
    }

    public ItemVariationTheme theme(String theme) {
        this.theme = theme;
        return this;
    }

    /**
     * The variation theme that indicates the combination of listing item attributes that define the variation family.
     *
     * @return theme
     */
    @Schema(
            example = "COLOR_NAME/STYLE_NAME",
            required = true,
            description =
                    "The variation theme that indicates the combination of listing item attributes that define the variation family.")
    public String getTheme() {
        return theme;
    }

    public void setTheme(String theme) {
        this.theme = theme;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ItemVariationTheme itemVariationTheme = (ItemVariationTheme) o;
        return Objects.equals(this.attributes, itemVariationTheme.attributes)
                && Objects.equals(this.theme, itemVariationTheme.theme);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attributes, theme);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ItemVariationTheme {\n");

        sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
        sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
