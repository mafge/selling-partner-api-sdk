/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.fulfillment.inbound.v0;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.fulfillment.inbound.v0.GetBillOfLadingResponse;
import software.amazon.spapi.models.fulfillment.inbound.v0.GetLabelsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v0.GetPrepInstructionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v0.GetShipmentItemsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v0.GetShipmentsResponse;

public class FbaInboundApi {
    private ApiClient apiClient;

    FbaInboundApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FbaInboundApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getBillOfLading
     *
     * @param shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     *     (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getBillOfLadingCall(
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/billOfLading"
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillOfLadingValidateBeforeCall(
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling getBillOfLading(Async)");
        }

        okhttp3.Call call = getBillOfLadingCall(shipmentId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading
     * operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than
     * Truckload/Full Truckload (LTL/FTL) inbound shipment. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     *     (required)
     * @return GetBillOfLadingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetBillOfLadingResponse getBillOfLading(String shipmentId) throws ApiException, LWAException {
        ApiResponse<GetBillOfLadingResponse> resp = getBillOfLadingWithHttpInfo(shipmentId);
        return resp.getData();
    }

    /**
     * Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading
     * operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than
     * Truckload/Full Truckload (LTL/FTL) inbound shipment. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     *     (required)
     * @return ApiResponse&lt;GetBillOfLadingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetBillOfLadingResponse> getBillOfLadingWithHttpInfo(String shipmentId)
            throws ApiException, LWAException {
        okhttp3.Call call = getBillOfLadingValidateBeforeCall(shipmentId, null, null);
        Type localVarReturnType = new TypeToken<GetBillOfLadingResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The
     * getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less
     * Than Truckload/Full Truckload (LTL/FTL) inbound shipment. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getBillOfLadingAsync(String shipmentId, final ApiCallback<GetBillOfLadingResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getBillOfLadingValidateBeforeCall(shipmentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetBillOfLadingResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLabels
     *
     * @param shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     *     (required)
     * @param pageType The page type to use to print the labels. Submitting a PageType value that is not supported in
     *     your marketplace returns an error. (required)
     * @param labelType The type of labels requested. (required)
     * @param numberOfPackages The number of packages in the shipment. (optional)
     * @param packageLabelsToPrint A list of identifiers that specify packages for which you want package labels
     *     printed. If you provide box content information with the [FBA Inbound Shipment Carton Information
     *     Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed),
     *     then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that
     *     feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then
     *     &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the
     *     [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/docs/fulfillment-inbound-api-v2024-03-20-reference#listshipmentboxes)
     *     response. If these values do not match as required, the operation returns the
     *     &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)
     * @param numberOfPallets The number of pallets in the shipment. This returns four identical labels for each pallet.
     *     (optional)
     * @param pageSize The page size for paginating through the total packages&#x27; labels. This is a required
     *     parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)
     * @param pageStartIndex The page start index for paginating through the total packages&#x27; labels. This is a
     *     required parameter for Non-Partnered LTL Shipments. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getLabelsCall(
            String shipmentId,
            String pageType,
            String labelType,
            Integer numberOfPackages,
            List<String> packageLabelsToPrint,
            Integer numberOfPallets,
            Integer pageSize,
            Integer pageStartIndex,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/labels"
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageType != null) localVarQueryParams.addAll(apiClient.parameterToPair("PageType", pageType));
        if (labelType != null) localVarQueryParams.addAll(apiClient.parameterToPair("LabelType", labelType));
        if (numberOfPackages != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("NumberOfPackages", numberOfPackages));
        if (packageLabelsToPrint != null)
            localVarCollectionQueryParams.addAll(
                    apiClient.parameterToPairs("csv", "PackageLabelsToPrint", packageLabelsToPrint));
        if (numberOfPallets != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("NumberOfPallets", numberOfPallets));
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (pageStartIndex != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("PageStartIndex", pageStartIndex));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLabelsValidateBeforeCall(
            String shipmentId,
            String pageType,
            String labelType,
            Integer numberOfPackages,
            List<String> packageLabelsToPrint,
            Integer numberOfPallets,
            Integer pageSize,
            Integer pageStartIndex,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling getLabels(Async)");
        }
        // verify the required parameter 'pageType' is set
        if (pageType == null) {
            throw new ApiException("Missing the required parameter 'pageType' when calling getLabels(Async)");
        }
        // verify the required parameter 'labelType' is set
        if (labelType == null) {
            throw new ApiException("Missing the required parameter 'labelType' when calling getLabels(Async)");
        }

        okhttp3.Call call = getLabelsCall(
                shipmentId,
                pageType,
                labelType,
                numberOfPackages,
                packageLabelsToPrint,
                numberOfPallets,
                pageSize,
                pageStartIndex,
                progressListener,
                progressRequestListener);
        return call;
    }

    /**
     * Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     *     (required)
     * @param pageType The page type to use to print the labels. Submitting a PageType value that is not supported in
     *     your marketplace returns an error. (required)
     * @param labelType The type of labels requested. (required)
     * @param numberOfPackages The number of packages in the shipment. (optional)
     * @param packageLabelsToPrint A list of identifiers that specify packages for which you want package labels
     *     printed. If you provide box content information with the [FBA Inbound Shipment Carton Information
     *     Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed),
     *     then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that
     *     feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then
     *     &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the
     *     [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/docs/fulfillment-inbound-api-v2024-03-20-reference#listshipmentboxes)
     *     response. If these values do not match as required, the operation returns the
     *     &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)
     * @param numberOfPallets The number of pallets in the shipment. This returns four identical labels for each pallet.
     *     (optional)
     * @param pageSize The page size for paginating through the total packages&#x27; labels. This is a required
     *     parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)
     * @param pageStartIndex The page start index for paginating through the total packages&#x27; labels. This is a
     *     required parameter for Non-Partnered LTL Shipments. (optional)
     * @return GetLabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetLabelsResponse getLabels(
            String shipmentId,
            String pageType,
            String labelType,
            Integer numberOfPackages,
            List<String> packageLabelsToPrint,
            Integer numberOfPallets,
            Integer pageSize,
            Integer pageStartIndex)
            throws ApiException, LWAException {
        ApiResponse<GetLabelsResponse> resp = getLabelsWithHttpInfo(
                shipmentId,
                pageType,
                labelType,
                numberOfPackages,
                packageLabelsToPrint,
                numberOfPallets,
                pageSize,
                pageStartIndex);
        return resp.getData();
    }

    /**
     * Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     *     (required)
     * @param pageType The page type to use to print the labels. Submitting a PageType value that is not supported in
     *     your marketplace returns an error. (required)
     * @param labelType The type of labels requested. (required)
     * @param numberOfPackages The number of packages in the shipment. (optional)
     * @param packageLabelsToPrint A list of identifiers that specify packages for which you want package labels
     *     printed. If you provide box content information with the [FBA Inbound Shipment Carton Information
     *     Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed),
     *     then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that
     *     feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then
     *     &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the
     *     [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/docs/fulfillment-inbound-api-v2024-03-20-reference#listshipmentboxes)
     *     response. If these values do not match as required, the operation returns the
     *     &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)
     * @param numberOfPallets The number of pallets in the shipment. This returns four identical labels for each pallet.
     *     (optional)
     * @param pageSize The page size for paginating through the total packages&#x27; labels. This is a required
     *     parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)
     * @param pageStartIndex The page start index for paginating through the total packages&#x27; labels. This is a
     *     required parameter for Non-Partnered LTL Shipments. (optional)
     * @return ApiResponse&lt;GetLabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetLabelsResponse> getLabelsWithHttpInfo(
            String shipmentId,
            String pageType,
            String labelType,
            Integer numberOfPackages,
            List<String> packageLabelsToPrint,
            Integer numberOfPallets,
            Integer pageSize,
            Integer pageStartIndex)
            throws ApiException, LWAException {
        okhttp3.Call call = getLabelsValidateBeforeCall(
                shipmentId,
                pageType,
                labelType,
                numberOfPackages,
                packageLabelsToPrint,
                numberOfPallets,
                pageSize,
                pageStartIndex,
                null,
                null);
        Type localVarReturnType = new TypeToken<GetLabelsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns package/pallet labels for faster and more accurate shipment processing at the Amazon
     * fulfillment center. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId A shipment identifier originally returned by the createInboundShipmentPlan operation.
     *     (required)
     * @param pageType The page type to use to print the labels. Submitting a PageType value that is not supported in
     *     your marketplace returns an error. (required)
     * @param labelType The type of labels requested. (required)
     * @param numberOfPackages The number of packages in the shipment. (optional)
     * @param packageLabelsToPrint A list of identifiers that specify packages for which you want package labels
     *     printed. If you provide box content information with the [FBA Inbound Shipment Carton Information
     *     Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed),
     *     then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that
     *     feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then
     *     &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the
     *     [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/docs/fulfillment-inbound-api-v2024-03-20-reference#listshipmentboxes)
     *     response. If these values do not match as required, the operation returns the
     *     &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)
     * @param numberOfPallets The number of pallets in the shipment. This returns four identical labels for each pallet.
     *     (optional)
     * @param pageSize The page size for paginating through the total packages&#x27; labels. This is a required
     *     parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)
     * @param pageStartIndex The page start index for paginating through the total packages&#x27; labels. This is a
     *     required parameter for Non-Partnered LTL Shipments. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getLabelsAsync(
            String shipmentId,
            String pageType,
            String labelType,
            Integer numberOfPackages,
            List<String> packageLabelsToPrint,
            Integer numberOfPallets,
            Integer pageSize,
            Integer pageStartIndex,
            final ApiCallback<GetLabelsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getLabelsValidateBeforeCall(
                shipmentId,
                pageType,
                labelType,
                numberOfPackages,
                packageLabelsToPrint,
                numberOfPallets,
                pageSize,
                pageStartIndex,
                progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<GetLabelsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPrepInstructions
     *
     * @param shipToCountryCode The country code of the country to which the items will be shipped. Note that labeling
     *     requirements and item preparation instructions can vary by country. (required)
     * @param sellerSKUList A list of SellerSKU values. Used to identify items for which you want labeling requirements
     *     and item preparation instructions for shipment to Amazon&#x27;s fulfillment network. The SellerSKU is
     *     qualified by the Seller ID, which is included with every call to the Seller Partner API. Note: Include seller
     *     SKUs that you have used to list items on Amazon&#x27;s retail website. If you include a seller SKU that you
     *     have never used to list an item on Amazon&#x27;s retail website, the seller SKU is returned in the
     *     InvalidSKUList property in the response. (optional)
     * @param asINList A list of ASIN values. Used to identify items for which you want item preparation instructions to
     *     help with item sourcing decisions. Note: ASINs must be included in the product catalog for at least one of
     *     the marketplaces that the seller participates in. Any ASIN that is not included in the product catalog for at
     *     least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in
     *     the response. You can find out which marketplaces a seller participates in by calling the
     *     getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPrepInstructionsCall(
            String shipToCountryCode,
            List<String> sellerSKUList,
            List<String> asINList,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/inbound/v0/prepInstructions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (shipToCountryCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("ShipToCountryCode", shipToCountryCode));
        if (sellerSKUList != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "SellerSKUList", sellerSKUList));
        if (asINList != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "ASINList", asINList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrepInstructionsValidateBeforeCall(
            String shipToCountryCode,
            List<String> sellerSKUList,
            List<String> asINList,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'shipToCountryCode' is set
        if (shipToCountryCode == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipToCountryCode' when calling getPrepInstructions(Async)");
        }

        okhttp3.Call call = getPrepInstructionsCall(
                shipToCountryCode, sellerSKUList, asINList, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Returns labeling requirements and item preparation instructions to help prepare items for shipment to
     * Amazon&#x27;s fulfillment network. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 |
     * 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied
     * to the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipToCountryCode The country code of the country to which the items will be shipped. Note that labeling
     *     requirements and item preparation instructions can vary by country. (required)
     * @param sellerSKUList A list of SellerSKU values. Used to identify items for which you want labeling requirements
     *     and item preparation instructions for shipment to Amazon&#x27;s fulfillment network. The SellerSKU is
     *     qualified by the Seller ID, which is included with every call to the Seller Partner API. Note: Include seller
     *     SKUs that you have used to list items on Amazon&#x27;s retail website. If you include a seller SKU that you
     *     have never used to list an item on Amazon&#x27;s retail website, the seller SKU is returned in the
     *     InvalidSKUList property in the response. (optional)
     * @param asINList A list of ASIN values. Used to identify items for which you want item preparation instructions to
     *     help with item sourcing decisions. Note: ASINs must be included in the product catalog for at least one of
     *     the marketplaces that the seller participates in. Any ASIN that is not included in the product catalog for at
     *     least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in
     *     the response. You can find out which marketplaces a seller participates in by calling the
     *     getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)
     * @return GetPrepInstructionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetPrepInstructionsResponse getPrepInstructions(
            String shipToCountryCode, List<String> sellerSKUList, List<String> asINList)
            throws ApiException, LWAException {
        ApiResponse<GetPrepInstructionsResponse> resp =
                getPrepInstructionsWithHttpInfo(shipToCountryCode, sellerSKUList, asINList);
        return resp.getData();
    }

    /**
     * Returns labeling requirements and item preparation instructions to help prepare items for shipment to
     * Amazon&#x27;s fulfillment network. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 |
     * 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied
     * to the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipToCountryCode The country code of the country to which the items will be shipped. Note that labeling
     *     requirements and item preparation instructions can vary by country. (required)
     * @param sellerSKUList A list of SellerSKU values. Used to identify items for which you want labeling requirements
     *     and item preparation instructions for shipment to Amazon&#x27;s fulfillment network. The SellerSKU is
     *     qualified by the Seller ID, which is included with every call to the Seller Partner API. Note: Include seller
     *     SKUs that you have used to list items on Amazon&#x27;s retail website. If you include a seller SKU that you
     *     have never used to list an item on Amazon&#x27;s retail website, the seller SKU is returned in the
     *     InvalidSKUList property in the response. (optional)
     * @param asINList A list of ASIN values. Used to identify items for which you want item preparation instructions to
     *     help with item sourcing decisions. Note: ASINs must be included in the product catalog for at least one of
     *     the marketplaces that the seller participates in. Any ASIN that is not included in the product catalog for at
     *     least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in
     *     the response. You can find out which marketplaces a seller participates in by calling the
     *     getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)
     * @return ApiResponse&lt;GetPrepInstructionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetPrepInstructionsResponse> getPrepInstructionsWithHttpInfo(
            String shipToCountryCode, List<String> sellerSKUList, List<String> asINList)
            throws ApiException, LWAException {
        okhttp3.Call call =
                getPrepInstructionsValidateBeforeCall(shipToCountryCode, sellerSKUList, asINList, null, null);
        Type localVarReturnType = new TypeToken<GetPrepInstructionsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns labeling requirements and item preparation instructions to help prepare items for
     * shipment to Amazon&#x27;s fulfillment network. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The table above indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may see higher rate
     * and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling
     * Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipToCountryCode The country code of the country to which the items will be shipped. Note that labeling
     *     requirements and item preparation instructions can vary by country. (required)
     * @param sellerSKUList A list of SellerSKU values. Used to identify items for which you want labeling requirements
     *     and item preparation instructions for shipment to Amazon&#x27;s fulfillment network. The SellerSKU is
     *     qualified by the Seller ID, which is included with every call to the Seller Partner API. Note: Include seller
     *     SKUs that you have used to list items on Amazon&#x27;s retail website. If you include a seller SKU that you
     *     have never used to list an item on Amazon&#x27;s retail website, the seller SKU is returned in the
     *     InvalidSKUList property in the response. (optional)
     * @param asINList A list of ASIN values. Used to identify items for which you want item preparation instructions to
     *     help with item sourcing decisions. Note: ASINs must be included in the product catalog for at least one of
     *     the marketplaces that the seller participates in. Any ASIN that is not included in the product catalog for at
     *     least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in
     *     the response. You can find out which marketplaces a seller participates in by calling the
     *     getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPrepInstructionsAsync(
            String shipToCountryCode,
            List<String> sellerSKUList,
            List<String> asINList,
            final ApiCallback<GetPrepInstructionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getPrepInstructionsValidateBeforeCall(
                shipToCountryCode, sellerSKUList, asINList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPrepInstructionsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShipmentItems
     *
     * @param queryType Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and
     *     LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous
     *     request. (required)
     * @param marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     *     (required)
     * @param lastUpdatedAfter A date used for selecting inbound shipment items that were last updated after (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param lastUpdatedBefore A date used for selecting inbound shipment items that were last updated before (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShipmentItemsCall(
            String queryType,
            String marketplaceId,
            OffsetDateTime lastUpdatedAfter,
            OffsetDateTime lastUpdatedBefore,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/inbound/v0/shipmentItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lastUpdatedAfter != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("LastUpdatedAfter", lastUpdatedAfter));
        if (lastUpdatedBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("LastUpdatedBefore", lastUpdatedBefore));
        if (queryType != null) localVarQueryParams.addAll(apiClient.parameterToPair("QueryType", queryType));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("NextToken", nextToken));
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("MarketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipmentItemsValidateBeforeCall(
            String queryType,
            String marketplaceId,
            OffsetDateTime lastUpdatedAfter,
            OffsetDateTime lastUpdatedBefore,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'queryType' is set
        if (queryType == null) {
            throw new ApiException("Missing the required parameter 'queryType' when calling getShipmentItems(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling getShipmentItems(Async)");
        }

        okhttp3.Call call = getShipmentItemsCall(
                queryType,
                marketplaceId,
                lastUpdatedAfter,
                lastUpdatedBefore,
                nextToken,
                progressListener,
                progressRequestListener);
        return call;
    }

    /**
     * Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified
     * time frame. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param queryType Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and
     *     LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous
     *     request. (required)
     * @param marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     *     (required)
     * @param lastUpdatedAfter A date used for selecting inbound shipment items that were last updated after (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param lastUpdatedBefore A date used for selecting inbound shipment items that were last updated before (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @return GetShipmentItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetShipmentItemsResponse getShipmentItems(
            String queryType,
            String marketplaceId,
            OffsetDateTime lastUpdatedAfter,
            OffsetDateTime lastUpdatedBefore,
            String nextToken)
            throws ApiException, LWAException {
        ApiResponse<GetShipmentItemsResponse> resp =
                getShipmentItemsWithHttpInfo(queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken);
        return resp.getData();
    }

    /**
     * Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified
     * time frame. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param queryType Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and
     *     LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous
     *     request. (required)
     * @param marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     *     (required)
     * @param lastUpdatedAfter A date used for selecting inbound shipment items that were last updated after (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param lastUpdatedBefore A date used for selecting inbound shipment items that were last updated before (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @return ApiResponse&lt;GetShipmentItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetShipmentItemsResponse> getShipmentItemsWithHttpInfo(
            String queryType,
            String marketplaceId,
            OffsetDateTime lastUpdatedAfter,
            OffsetDateTime lastUpdatedBefore,
            String nextToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getShipmentItemsValidateBeforeCall(
                queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken, null, null);
        Type localVarReturnType = new TypeToken<GetShipmentItemsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns a list of items in a specified inbound shipment, or a list of items that were updated
     * within a specified time frame. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param queryType Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and
     *     LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous
     *     request. (required)
     * @param marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     *     (required)
     * @param lastUpdatedAfter A date used for selecting inbound shipment items that were last updated after (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param lastUpdatedBefore A date used for selecting inbound shipment items that were last updated before (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShipmentItemsAsync(
            String queryType,
            String marketplaceId,
            OffsetDateTime lastUpdatedAfter,
            OffsetDateTime lastUpdatedBefore,
            String nextToken,
            final ApiCallback<GetShipmentItemsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getShipmentItemsValidateBeforeCall(
                queryType,
                marketplaceId,
                lastUpdatedAfter,
                lastUpdatedBefore,
                nextToken,
                progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<GetShipmentItemsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShipmentItemsByShipmentId
     *
     * @param shipmentId A shipment identifier used for selecting items in a specific inbound shipment. (required)
     * @param marketplaceId Deprecated. Do not use. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShipmentItemsByShipmentIdCall(
            String shipmentId,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/items"
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("MarketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipmentItemsByShipmentIdValidateBeforeCall(
            String shipmentId,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling getShipmentItemsByShipmentId(Async)");
        }

        okhttp3.Call call =
                getShipmentItemsByShipmentIdCall(shipmentId, marketplaceId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Returns a list of items in a specified inbound shipment. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId A shipment identifier used for selecting items in a specific inbound shipment. (required)
     * @param marketplaceId Deprecated. Do not use. (optional)
     * @return GetShipmentItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetShipmentItemsResponse getShipmentItemsByShipmentId(String shipmentId, String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<GetShipmentItemsResponse> resp =
                getShipmentItemsByShipmentIdWithHttpInfo(shipmentId, marketplaceId);
        return resp.getData();
    }

    /**
     * Returns a list of items in a specified inbound shipment. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId A shipment identifier used for selecting items in a specific inbound shipment. (required)
     * @param marketplaceId Deprecated. Do not use. (optional)
     * @return ApiResponse&lt;GetShipmentItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetShipmentItemsResponse> getShipmentItemsByShipmentIdWithHttpInfo(
            String shipmentId, String marketplaceId) throws ApiException, LWAException {
        okhttp3.Call call = getShipmentItemsByShipmentIdValidateBeforeCall(shipmentId, marketplaceId, null, null);
        Type localVarReturnType = new TypeToken<GetShipmentItemsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns a list of items in a specified inbound shipment. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId A shipment identifier used for selecting items in a specific inbound shipment. (required)
     * @param marketplaceId Deprecated. Do not use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShipmentItemsByShipmentIdAsync(
            String shipmentId, String marketplaceId, final ApiCallback<GetShipmentItemsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getShipmentItemsByShipmentIdValidateBeforeCall(
                shipmentId, marketplaceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetShipmentItemsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShipments
     *
     * @param queryType Indicates whether shipments are returned using shipment information (by providing the
     *     ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and
     *     LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous
     *     request. (required)
     * @param marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     *     (required)
     * @param shipmentStatusList A list of ShipmentStatus values. Used to select shipments with a current status that
     *     matches the status values that you specify. (optional)
     * @param shipmentIdList A list of shipment IDs used to select the shipments that you want. If both
     *     ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.
     *     (optional)
     * @param lastUpdatedAfter A date used for selecting inbound shipments that were last updated after (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param lastUpdatedBefore A date used for selecting inbound shipments that were last updated before (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShipmentsCall(
            String queryType,
            String marketplaceId,
            List<String> shipmentStatusList,
            List<String> shipmentIdList,
            OffsetDateTime lastUpdatedAfter,
            OffsetDateTime lastUpdatedBefore,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/inbound/v0/shipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (shipmentStatusList != null)
            localVarCollectionQueryParams.addAll(
                    apiClient.parameterToPairs("csv", "ShipmentStatusList", shipmentStatusList));
        if (shipmentIdList != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "ShipmentIdList", shipmentIdList));
        if (lastUpdatedAfter != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("LastUpdatedAfter", lastUpdatedAfter));
        if (lastUpdatedBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("LastUpdatedBefore", lastUpdatedBefore));
        if (queryType != null) localVarQueryParams.addAll(apiClient.parameterToPair("QueryType", queryType));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("NextToken", nextToken));
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("MarketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipmentsValidateBeforeCall(
            String queryType,
            String marketplaceId,
            List<String> shipmentStatusList,
            List<String> shipmentIdList,
            OffsetDateTime lastUpdatedAfter,
            OffsetDateTime lastUpdatedBefore,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'queryType' is set
        if (queryType == null) {
            throw new ApiException("Missing the required parameter 'queryType' when calling getShipments(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException("Missing the required parameter 'marketplaceId' when calling getShipments(Async)");
        }

        okhttp3.Call call = getShipmentsCall(
                queryType,
                marketplaceId,
                shipmentStatusList,
                shipmentIdList,
                lastUpdatedAfter,
                lastUpdatedBefore,
                nextToken,
                progressListener,
                progressRequestListener);
        return call;
    }

    /**
     * Returns a list of inbound shipments based on criteria that you specify. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param queryType Indicates whether shipments are returned using shipment information (by providing the
     *     ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and
     *     LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous
     *     request. (required)
     * @param marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     *     (required)
     * @param shipmentStatusList A list of ShipmentStatus values. Used to select shipments with a current status that
     *     matches the status values that you specify. (optional)
     * @param shipmentIdList A list of shipment IDs used to select the shipments that you want. If both
     *     ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.
     *     (optional)
     * @param lastUpdatedAfter A date used for selecting inbound shipments that were last updated after (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param lastUpdatedBefore A date used for selecting inbound shipments that were last updated before (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @return GetShipmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetShipmentsResponse getShipments(
            String queryType,
            String marketplaceId,
            List<String> shipmentStatusList,
            List<String> shipmentIdList,
            OffsetDateTime lastUpdatedAfter,
            OffsetDateTime lastUpdatedBefore,
            String nextToken)
            throws ApiException, LWAException {
        ApiResponse<GetShipmentsResponse> resp = getShipmentsWithHttpInfo(
                queryType,
                marketplaceId,
                shipmentStatusList,
                shipmentIdList,
                lastUpdatedAfter,
                lastUpdatedBefore,
                nextToken);
        return resp.getData();
    }

    /**
     * Returns a list of inbound shipments based on criteria that you specify. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and
     * Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param queryType Indicates whether shipments are returned using shipment information (by providing the
     *     ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and
     *     LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous
     *     request. (required)
     * @param marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     *     (required)
     * @param shipmentStatusList A list of ShipmentStatus values. Used to select shipments with a current status that
     *     matches the status values that you specify. (optional)
     * @param shipmentIdList A list of shipment IDs used to select the shipments that you want. If both
     *     ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.
     *     (optional)
     * @param lastUpdatedAfter A date used for selecting inbound shipments that were last updated after (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param lastUpdatedBefore A date used for selecting inbound shipments that were last updated before (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @return ApiResponse&lt;GetShipmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetShipmentsResponse> getShipmentsWithHttpInfo(
            String queryType,
            String marketplaceId,
            List<String> shipmentStatusList,
            List<String> shipmentIdList,
            OffsetDateTime lastUpdatedAfter,
            OffsetDateTime lastUpdatedBefore,
            String nextToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getShipmentsValidateBeforeCall(
                queryType,
                marketplaceId,
                shipmentStatusList,
                shipmentIdList,
                lastUpdatedAfter,
                lastUpdatedBefore,
                nextToken,
                null,
                null);
        Type localVarReturnType = new TypeToken<GetShipmentsResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns a list of inbound shipments based on criteria that you specify. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param queryType Indicates whether shipments are returned using shipment information (by providing the
     *     ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and
     *     LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous
     *     request. (required)
     * @param marketplaceId A marketplace identifier. Specifies the marketplace where the product would be stored.
     *     (required)
     * @param shipmentStatusList A list of ShipmentStatus values. Used to select shipments with a current status that
     *     matches the status values that you specify. (optional)
     * @param shipmentIdList A list of shipment IDs used to select the shipments that you want. If both
     *     ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned.
     *     (optional)
     * @param lastUpdatedAfter A date used for selecting inbound shipments that were last updated after (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param lastUpdatedBefore A date used for selecting inbound shipments that were last updated before (or at) a
     *     specified time. The selection includes updates made by Amazon and by the seller. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShipmentsAsync(
            String queryType,
            String marketplaceId,
            List<String> shipmentStatusList,
            List<String> shipmentIdList,
            OffsetDateTime lastUpdatedAfter,
            OffsetDateTime lastUpdatedBefore,
            String nextToken,
            final ApiCallback<GetShipmentsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getShipmentsValidateBeforeCall(
                queryType,
                marketplaceId,
                shipmentStatusList,
                shipmentIdList,
                lastUpdatedAfter,
                lastUpdatedBefore,
                nextToken,
                progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<GetShipmentsResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private RateLimitConfiguration rateLimitConfiguration;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration) {
            this.rateLimitConfiguration = rateLimitConfiguration;
            return this;
        }

        public Builder disableRateLimitOnRequests() {
            this.rateLimitConfiguration = null;
            return this;
        }

        public FbaInboundApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new FbaInboundApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint)
                    .setRateLimiter(rateLimitConfiguration));
        }
    }
}
