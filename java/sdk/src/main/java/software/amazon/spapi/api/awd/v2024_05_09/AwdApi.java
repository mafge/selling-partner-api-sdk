/*
 * The Selling Partner API for Amazon Warehousing and Distribution
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * OpenAPI spec version: 2024-05-09
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.awd.v2024_05_09;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.awd.v2024_05_09.InboundEligibility;
import software.amazon.spapi.models.awd.v2024_05_09.InboundOrder;
import software.amazon.spapi.models.awd.v2024_05_09.InboundOrderCreationData;
import software.amazon.spapi.models.awd.v2024_05_09.InboundOrderReference;
import software.amazon.spapi.models.awd.v2024_05_09.InboundPackages;
import software.amazon.spapi.models.awd.v2024_05_09.InboundShipment;
import software.amazon.spapi.models.awd.v2024_05_09.InventoryListing;
import software.amazon.spapi.models.awd.v2024_05_09.ShipmentLabels;
import software.amazon.spapi.models.awd.v2024_05_09.ShipmentListing;
import software.amazon.spapi.models.awd.v2024_05_09.TransportationDetails;

public class AwdApi {
    private ApiClient apiClient;

    AwdApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AwdApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelInbound
     *
     * @param orderId The ID of the inbound order you want to cancel. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelInboundCall(
            String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inboundOrders/{orderId}/cancellation"
                .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelInboundValidateBeforeCall(
            String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelInbound(Async)");
        }

        okhttp3.Call call = cancelInboundCall(orderId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Cancels an AWD Inbound order and its associated shipment. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table indicates the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param orderId The ID of the inbound order you want to cancel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public void cancelInbound(String orderId) throws ApiException, LWAException {
        cancelInboundWithHttpInfo(orderId);
    }

    /**
     * Cancels an AWD Inbound order and its associated shipment. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table indicates the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param orderId The ID of the inbound order you want to cancel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Void> cancelInboundWithHttpInfo(String orderId) throws ApiException, LWAException {
        okhttp3.Call call = cancelInboundValidateBeforeCall(orderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously) Cancels an AWD Inbound order and its associated shipment. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param orderId The ID of the inbound order you want to cancel. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelInboundAsync(String orderId, final ApiCallback<Void> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = cancelInboundValidateBeforeCall(orderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for checkInboundEligibility
     *
     * @param body Represents the packages you want to inbound. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call checkInboundEligibilityCall(
            InboundPackages body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inboundEligibility";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkInboundEligibilityValidateBeforeCall(
            InboundPackages body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling checkInboundEligibility(Async)");
        }

        okhttp3.Call call = checkInboundEligibilityCall(body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Determines if the packages you specify are eligible for an AWD inbound order and contains error details for
     * ineligible packages. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Represents the packages you want to inbound. (required)
     * @return InboundEligibility
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public InboundEligibility checkInboundEligibility(InboundPackages body) throws ApiException, LWAException {
        ApiResponse<InboundEligibility> resp = checkInboundEligibilityWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Determines if the packages you specify are eligible for an AWD inbound order and contains error details for
     * ineligible packages. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Represents the packages you want to inbound. (required)
     * @return ApiResponse&lt;InboundEligibility&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<InboundEligibility> checkInboundEligibilityWithHttpInfo(InboundPackages body)
            throws ApiException, LWAException {
        okhttp3.Call call = checkInboundEligibilityValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InboundEligibility>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Determines if the packages you specify are eligible for an AWD inbound order and contains error
     * details for ineligible packages. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Represents the packages you want to inbound. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call checkInboundEligibilityAsync(
            InboundPackages body, final ApiCallback<InboundEligibility> callback) throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = checkInboundEligibilityValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InboundEligibility>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for confirmInbound
     *
     * @param orderId The ID of the inbound order that you want to confirm. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call confirmInboundCall(
            String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inboundOrders/{orderId}/confirmation"
                .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmInboundValidateBeforeCall(
            String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling confirmInbound(Async)");
        }

        okhttp3.Call call = confirmInboundCall(orderId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Confirms an AWD inbound order in &#x60;DRAFT&#x60; status. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits
     * in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param orderId The ID of the inbound order that you want to confirm. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public void confirmInbound(String orderId) throws ApiException, LWAException {
        confirmInboundWithHttpInfo(orderId);
    }

    /**
     * Confirms an AWD inbound order in &#x60;DRAFT&#x60; status. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The table above indicates the default rate
     * and burst values for this operation. Selling partners whose business demands require higher throughput may see
     * higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits
     * in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param orderId The ID of the inbound order that you want to confirm. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Void> confirmInboundWithHttpInfo(String orderId) throws ApiException, LWAException {
        okhttp3.Call call = confirmInboundValidateBeforeCall(orderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously) Confirms an AWD inbound order in &#x60;DRAFT&#x60; status. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param orderId The ID of the inbound order that you want to confirm. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call confirmInboundAsync(String orderId, final ApiCallback<Void> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = confirmInboundValidateBeforeCall(orderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createInbound
     *
     * @param body Payload for creating an inbound order. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createInboundCall(
            InboundOrderCreationData body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inboundOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInboundValidateBeforeCall(
            InboundOrderCreationData body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createInbound(Async)");
        }

        okhttp3.Call call = createInboundCall(body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Creates a draft AWD inbound order with a list of packages for inbound shipment. The operation creates one
     * shipment per order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Payload for creating an inbound order. (required)
     * @return InboundOrderReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public InboundOrderReference createInbound(InboundOrderCreationData body) throws ApiException, LWAException {
        ApiResponse<InboundOrderReference> resp = createInboundWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a draft AWD inbound order with a list of packages for inbound shipment. The operation creates one
     * shipment per order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Payload for creating an inbound order. (required)
     * @return ApiResponse&lt;InboundOrderReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<InboundOrderReference> createInboundWithHttpInfo(InboundOrderCreationData body)
            throws ApiException, LWAException {
        okhttp3.Call call = createInboundValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<InboundOrderReference>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Creates a draft AWD inbound order with a list of packages for inbound shipment. The operation
     * creates one shipment per order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Payload for creating an inbound order. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createInboundAsync(
            InboundOrderCreationData body, final ApiCallback<InboundOrderReference> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createInboundValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InboundOrderReference>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInbound
     *
     * @param orderId The ID of the inbound order that you want to retrieve. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getInboundCall(
            String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inboundOrders/{orderId}"
                .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboundValidateBeforeCall(
            String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getInbound(Async)");
        }

        okhttp3.Call call = getInboundCall(orderId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Retrieves an AWD inbound order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param orderId The ID of the inbound order that you want to retrieve. (required)
     * @return InboundOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public InboundOrder getInbound(String orderId) throws ApiException, LWAException {
        ApiResponse<InboundOrder> resp = getInboundWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Retrieves an AWD inbound order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param orderId The ID of the inbound order that you want to retrieve. (required)
     * @return ApiResponse&lt;InboundOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<InboundOrder> getInboundWithHttpInfo(String orderId) throws ApiException, LWAException {
        okhttp3.Call call = getInboundValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<InboundOrder>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Retrieves an AWD inbound order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param orderId The ID of the inbound order that you want to retrieve. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getInboundAsync(String orderId, final ApiCallback<InboundOrder> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getInboundValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InboundOrder>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInboundShipment
     *
     * @param shipmentId ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param skuQuantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.
     *     Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getInboundShipmentCall(
            String shipmentId,
            String skuQuantities,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inboundShipments/{shipmentId}"
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skuQuantities != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("skuQuantities", skuQuantities));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboundShipmentValidateBeforeCall(
            String shipmentId,
            String skuQuantities,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling getInboundShipment(Async)");
        }

        okhttp3.Call call =
                getInboundShipmentCall(shipmentId, skuQuantities, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Retrieves an AWD inbound shipment. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2
     * | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param shipmentId ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param skuQuantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.
     *     Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     * @return InboundShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public InboundShipment getInboundShipment(String shipmentId, String skuQuantities)
            throws ApiException, LWAException {
        ApiResponse<InboundShipment> resp = getInboundShipmentWithHttpInfo(shipmentId, skuQuantities);
        return resp.getData();
    }

    /**
     * Retrieves an AWD inbound shipment. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2
     * | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param shipmentId ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param skuQuantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.
     *     Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     * @return ApiResponse&lt;InboundShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<InboundShipment> getInboundShipmentWithHttpInfo(String shipmentId, String skuQuantities)
            throws ApiException, LWAException {
        okhttp3.Call call = getInboundShipmentValidateBeforeCall(shipmentId, skuQuantities, null, null);
        Type localVarReturnType = new TypeToken<InboundShipment>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Retrieves an AWD inbound shipment. **Usage Plan:** | Rate (requests per second) | Burst | | ----
     * | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The table above indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may see higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param shipmentId ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param skuQuantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.
     *     Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getInboundShipmentAsync(
            String shipmentId, String skuQuantities, final ApiCallback<InboundShipment> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getInboundShipmentValidateBeforeCall(
                shipmentId, skuQuantities, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InboundShipment>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInboundShipmentLabels
     *
     * @param shipmentId ID for the shipment. (required)
     * @param pageType Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;. (optional)
     * @param formatType The format type of the output file that contains your labels. The default format type is
     *     &#x60;PDF&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getInboundShipmentLabelsCall(
            String shipmentId,
            String pageType,
            String formatType,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inboundShipments/{shipmentId}/labels"
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageType != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageType", pageType));
        if (formatType != null) localVarQueryParams.addAll(apiClient.parameterToPair("formatType", formatType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboundShipmentLabelsValidateBeforeCall(
            String shipmentId,
            String pageType,
            String formatType,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling getInboundShipmentLabels(Async)");
        }

        okhttp3.Call call = getInboundShipmentLabelsCall(
                shipmentId, pageType, formatType, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Retrieves the box labels for a shipment ID that you specify. This is an asynchronous operation. If the label
     * status is &#x60;GENERATED&#x60;, then the label URL is available. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 1 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table indicates the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId ID for the shipment. (required)
     * @param pageType Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;. (optional)
     * @param formatType The format type of the output file that contains your labels. The default format type is
     *     &#x60;PDF&#x60;. (optional)
     * @return ShipmentLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ShipmentLabels getInboundShipmentLabels(String shipmentId, String pageType, String formatType)
            throws ApiException, LWAException {
        ApiResponse<ShipmentLabels> resp = getInboundShipmentLabelsWithHttpInfo(shipmentId, pageType, formatType);
        return resp.getData();
    }

    /**
     * Retrieves the box labels for a shipment ID that you specify. This is an asynchronous operation. If the label
     * status is &#x60;GENERATED&#x60;, then the label URL is available. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 1 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table indicates the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId ID for the shipment. (required)
     * @param pageType Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;. (optional)
     * @param formatType The format type of the output file that contains your labels. The default format type is
     *     &#x60;PDF&#x60;. (optional)
     * @return ApiResponse&lt;ShipmentLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ShipmentLabels> getInboundShipmentLabelsWithHttpInfo(
            String shipmentId, String pageType, String formatType) throws ApiException, LWAException {
        okhttp3.Call call = getInboundShipmentLabelsValidateBeforeCall(shipmentId, pageType, formatType, null, null);
        Type localVarReturnType = new TypeToken<ShipmentLabels>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Retrieves the box labels for a shipment ID that you specify. This is an asynchronous operation.
     * If the label status is &#x60;GENERATED&#x60;, then the label URL is available. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 1 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param shipmentId ID for the shipment. (required)
     * @param pageType Page type for the generated labels. The default is &#x60;PLAIN_PAPER&#x60;. (optional)
     * @param formatType The format type of the output file that contains your labels. The default format type is
     *     &#x60;PDF&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getInboundShipmentLabelsAsync(
            String shipmentId, String pageType, String formatType, final ApiCallback<ShipmentLabels> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getInboundShipmentLabelsValidateBeforeCall(
                shipmentId, pageType, formatType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShipmentLabels>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listInboundShipments
     *
     * @param sortBy Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param sortOrder Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in
     *     DESCENDING order. (optional)
     * @param shipmentStatus Filter by inbound shipment status. (optional)
     * @param updatedAfter List the inbound shipments that were updated after a certain time (inclusive). The date must
     *     be in &lt;a href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
     *     8601&lt;/a&gt; format. (optional)
     * @param updatedBefore List the inbound shipments that were updated before a certain time (inclusive). The date
     *     must be in &lt;a href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
     *     8601&lt;/a&gt; format. (optional)
     * @param maxResults Maximum number of results to return. (optional, default to 25)
     * @param nextToken A token that is used to retrieve the next page of results. The response includes
     *     &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listInboundShipmentsCall(
            String sortBy,
            String sortOrder,
            String shipmentStatus,
            OffsetDateTime updatedAfter,
            OffsetDateTime updatedBefore,
            Integer maxResults,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inboundShipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sortBy != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        if (sortOrder != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (shipmentStatus != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("shipmentStatus", shipmentStatus));
        if (updatedAfter != null) localVarQueryParams.addAll(apiClient.parameterToPair("updatedAfter", updatedAfter));
        if (updatedBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("updatedBefore", updatedBefore));
        if (maxResults != null) localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInboundShipmentsValidateBeforeCall(
            String sortBy,
            String sortOrder,
            String shipmentStatus,
            OffsetDateTime updatedAfter,
            OffsetDateTime updatedBefore,
            Integer maxResults,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {

        okhttp3.Call call = listInboundShipmentsCall(
                sortBy,
                sortOrder,
                shipmentStatus,
                updatedAfter,
                updatedBefore,
                maxResults,
                nextToken,
                progressListener,
                progressRequestListener);
        return call;
    }

    /**
     * Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply
     * optional filters. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sortBy Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param sortOrder Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in
     *     DESCENDING order. (optional)
     * @param shipmentStatus Filter by inbound shipment status. (optional)
     * @param updatedAfter List the inbound shipments that were updated after a certain time (inclusive). The date must
     *     be in &lt;a href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
     *     8601&lt;/a&gt; format. (optional)
     * @param updatedBefore List the inbound shipments that were updated before a certain time (inclusive). The date
     *     must be in &lt;a href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
     *     8601&lt;/a&gt; format. (optional)
     * @param maxResults Maximum number of results to return. (optional, default to 25)
     * @param nextToken A token that is used to retrieve the next page of results. The response includes
     *     &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @return ShipmentListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ShipmentListing listInboundShipments(
            String sortBy,
            String sortOrder,
            String shipmentStatus,
            OffsetDateTime updatedAfter,
            OffsetDateTime updatedBefore,
            Integer maxResults,
            String nextToken)
            throws ApiException, LWAException {
        ApiResponse<ShipmentListing> resp = listInboundShipmentsWithHttpInfo(
                sortBy, sortOrder, shipmentStatus, updatedAfter, updatedBefore, maxResults, nextToken);
        return resp.getData();
    }

    /**
     * Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the ability to apply
     * optional filters. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sortBy Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param sortOrder Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in
     *     DESCENDING order. (optional)
     * @param shipmentStatus Filter by inbound shipment status. (optional)
     * @param updatedAfter List the inbound shipments that were updated after a certain time (inclusive). The date must
     *     be in &lt;a href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
     *     8601&lt;/a&gt; format. (optional)
     * @param updatedBefore List the inbound shipments that were updated before a certain time (inclusive). The date
     *     must be in &lt;a href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
     *     8601&lt;/a&gt; format. (optional)
     * @param maxResults Maximum number of results to return. (optional, default to 25)
     * @param nextToken A token that is used to retrieve the next page of results. The response includes
     *     &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @return ApiResponse&lt;ShipmentListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ShipmentListing> listInboundShipmentsWithHttpInfo(
            String sortBy,
            String sortOrder,
            String shipmentStatus,
            OffsetDateTime updatedAfter,
            OffsetDateTime updatedBefore,
            Integer maxResults,
            String nextToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listInboundShipmentsValidateBeforeCall(
                sortBy, sortOrder, shipmentStatus, updatedAfter, updatedBefore, maxResults, nextToken, null, null);
        Type localVarReturnType = new TypeToken<ShipmentListing>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Retrieves a summary of all the inbound AWD shipments associated with a merchant, with the
     * ability to apply optional filters. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1
     * | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sortBy Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param sortOrder Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in
     *     DESCENDING order. (optional)
     * @param shipmentStatus Filter by inbound shipment status. (optional)
     * @param updatedAfter List the inbound shipments that were updated after a certain time (inclusive). The date must
     *     be in &lt;a href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
     *     8601&lt;/a&gt; format. (optional)
     * @param updatedBefore List the inbound shipments that were updated before a certain time (inclusive). The date
     *     must be in &lt;a href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
     *     8601&lt;/a&gt; format. (optional)
     * @param maxResults Maximum number of results to return. (optional, default to 25)
     * @param nextToken A token that is used to retrieve the next page of results. The response includes
     *     &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listInboundShipmentsAsync(
            String sortBy,
            String sortOrder,
            String shipmentStatus,
            OffsetDateTime updatedAfter,
            OffsetDateTime updatedBefore,
            Integer maxResults,
            String nextToken,
            final ApiCallback<ShipmentListing> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listInboundShipmentsValidateBeforeCall(
                sortBy,
                sortOrder,
                shipmentStatus,
                updatedAfter,
                updatedBefore,
                maxResults,
                nextToken,
                progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<ShipmentListing>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listInventory
     *
     * @param sku Filter by seller or merchant SKU for the item. (optional)
     * @param sortOrder Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to
     *     &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param nextToken A token that is used to retrieve the next page of results. The response includes
     *     &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @param maxResults Maximum number of results to return. (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listInventoryCall(
            String sku,
            String sortOrder,
            String details,
            String nextToken,
            Integer maxResults,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inventory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sku != null) localVarQueryParams.addAll(apiClient.parameterToPair("sku", sku));
        if (sortOrder != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (details != null) localVarQueryParams.addAll(apiClient.parameterToPair("details", details));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));
        if (maxResults != null) localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInventoryValidateBeforeCall(
            String sku,
            String sortOrder,
            String details,
            String nextToken,
            Integer maxResults,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {

        okhttp3.Call call = listInventoryCall(
                sku, sortOrder, details, nextToken, maxResults, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Lists AWD inventory associated with a merchant with the ability to apply optional filters. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sku Filter by seller or merchant SKU for the item. (optional)
     * @param sortOrder Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to
     *     &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param nextToken A token that is used to retrieve the next page of results. The response includes
     *     &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @param maxResults Maximum number of results to return. (optional, default to 25)
     * @return InventoryListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public InventoryListing listInventory(
            String sku, String sortOrder, String details, String nextToken, Integer maxResults)
            throws ApiException, LWAException {
        ApiResponse<InventoryListing> resp = listInventoryWithHttpInfo(sku, sortOrder, details, nextToken, maxResults);
        return resp.getData();
    }

    /**
     * Lists AWD inventory associated with a merchant with the ability to apply optional filters. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may see higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sku Filter by seller or merchant SKU for the item. (optional)
     * @param sortOrder Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to
     *     &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param nextToken A token that is used to retrieve the next page of results. The response includes
     *     &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @param maxResults Maximum number of results to return. (optional, default to 25)
     * @return ApiResponse&lt;InventoryListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<InventoryListing> listInventoryWithHttpInfo(
            String sku, String sortOrder, String details, String nextToken, Integer maxResults)
            throws ApiException, LWAException {
        okhttp3.Call call = listInventoryValidateBeforeCall(sku, sortOrder, details, nextToken, maxResults, null, null);
        Type localVarReturnType = new TypeToken<InventoryListing>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Lists AWD inventory associated with a merchant with the ability to apply optional filters.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sku Filter by seller or merchant SKU for the item. (optional)
     * @param sortOrder Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to
     *     &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param nextToken A token that is used to retrieve the next page of results. The response includes
     *     &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;maxResults&#x60; value. To get
     *     the next page of results, call the operation with this token and include the same arguments as the call that
     *     produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note
     *     that this operation can return empty pages. (optional)
     * @param maxResults Maximum number of results to return. (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listInventoryAsync(
            String sku,
            String sortOrder,
            String details,
            String nextToken,
            Integer maxResults,
            final ApiCallback<InventoryListing> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listInventoryValidateBeforeCall(
                sku, sortOrder, details, nextToken, maxResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventoryListing>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateInbound
     *
     * @param body Represents an AWD inbound order. (required)
     * @param orderId The ID of the inbound order that you want to update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateInboundCall(
            InboundOrder body,
            String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inboundOrders/{orderId}"
                .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInboundValidateBeforeCall(
            InboundOrder body,
            String orderId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInbound(Async)");
        }
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateInbound(Async)");
        }

        okhttp3.Call call = updateInboundCall(body, orderId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Updates an AWD inbound order that is in &#x60;DRAFT&#x60; status and not yet confirmed. Use this operation to
     * update the &#x60;packagesToInbound&#x60;, &#x60;originAddress&#x60; and &#x60;preferences&#x60; attributes.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Represents an AWD inbound order. (required)
     * @param orderId The ID of the inbound order that you want to update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public void updateInbound(InboundOrder body, String orderId) throws ApiException, LWAException {
        updateInboundWithHttpInfo(body, orderId);
    }

    /**
     * Updates an AWD inbound order that is in &#x60;DRAFT&#x60; status and not yet confirmed. Use this operation to
     * update the &#x60;packagesToInbound&#x60;, &#x60;originAddress&#x60; and &#x60;preferences&#x60; attributes.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Represents an AWD inbound order. (required)
     * @param orderId The ID of the inbound order that you want to update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Void> updateInboundWithHttpInfo(InboundOrder body, String orderId)
            throws ApiException, LWAException {
        okhttp3.Call call = updateInboundValidateBeforeCall(body, orderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously) Updates an AWD inbound order that is in &#x60;DRAFT&#x60; status and not yet confirmed. Use this
     * operation to update the &#x60;packagesToInbound&#x60;, &#x60;originAddress&#x60; and &#x60;preferences&#x60;
     * attributes. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Represents an AWD inbound order. (required)
     * @param orderId The ID of the inbound order that you want to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateInboundAsync(InboundOrder body, String orderId, final ApiCallback<Void> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateInboundValidateBeforeCall(body, orderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateInboundShipmentTransportDetails
     *
     * @param body Transportation details for the shipment. (required)
     * @param shipmentId The shipment ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateInboundShipmentTransportDetailsCall(
            TransportationDetails body,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/awd/2024-05-09/inboundShipments/{shipmentId}/transport"
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInboundShipmentTransportDetailsValidateBeforeCall(
            TransportationDetails body,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling updateInboundShipmentTransportDetails(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling updateInboundShipmentTransportDetails(Async)");
        }

        okhttp3.Call call =
                updateInboundShipmentTransportDetailsCall(body, shipmentId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Updates transport details for an AWD shipment. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The table above indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may see higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Transportation details for the shipment. (required)
     * @param shipmentId The shipment ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public void updateInboundShipmentTransportDetails(TransportationDetails body, String shipmentId)
            throws ApiException, LWAException {
        updateInboundShipmentTransportDetailsWithHttpInfo(body, shipmentId);
    }

    /**
     * Updates transport details for an AWD shipment. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The table above indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may see higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Transportation details for the shipment. (required)
     * @param shipmentId The shipment ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Void> updateInboundShipmentTransportDetailsWithHttpInfo(
            TransportationDetails body, String shipmentId) throws ApiException, LWAException {
        okhttp3.Call call = updateInboundShipmentTransportDetailsValidateBeforeCall(body, shipmentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously) Updates transport details for an AWD shipment. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 1 | 1 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The table above indicates the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Transportation details for the shipment. (required)
     * @param shipmentId The shipment ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateInboundShipmentTransportDetailsAsync(
            TransportationDetails body, String shipmentId, final ApiCallback<Void> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateInboundShipmentTransportDetailsValidateBeforeCall(
                body, shipmentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private RateLimitConfiguration rateLimitConfiguration;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration) {
            this.rateLimitConfiguration = rateLimitConfiguration;
            return this;
        }

        public Builder disableRateLimitOnRequests() {
            this.rateLimitConfiguration = null;
            return this;
        }

        public AwdApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new AwdApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint)
                    .setRateLimiter(rateLimitConfiguration));
        }
    }
}
