/*
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.fulfillment.inbound.v2024_03_20;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.CancelInboundPlanResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.CancelSelfShipAppointmentRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.CancelSelfShipAppointmentResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ConfirmDeliveryWindowOptionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ConfirmPackingOptionResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ConfirmPlacementOptionResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ConfirmShipmentContentUpdatePreviewResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ConfirmTransportationOptionsRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ConfirmTransportationOptionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ContentUpdatePreview;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.CreateInboundPlanRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.CreateInboundPlanResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.CreateMarketplaceItemLabelsRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.CreateMarketplaceItemLabelsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GenerateDeliveryWindowOptionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GeneratePackingOptionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GeneratePlacementOptionsRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GeneratePlacementOptionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GenerateSelfShipAppointmentSlotsRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GenerateSelfShipAppointmentSlotsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GenerateShipmentContentUpdatePreviewsRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GenerateShipmentContentUpdatePreviewsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GenerateTransportationOptionsRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GenerateTransportationOptionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GetDeliveryChallanDocumentResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.GetSelfShipAppointmentSlotsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.InboundOperationStatus;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.InboundPlan;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListDeliveryWindowOptionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListInboundPlanBoxesResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListInboundPlanItemsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListInboundPlanPalletsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListInboundPlansResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListItemComplianceDetailsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListPackingGroupBoxesResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListPackingGroupItemsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListPackingOptionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListPlacementOptionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListPrepDetailsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListShipmentBoxesResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListShipmentContentUpdatePreviewsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListShipmentItemsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListShipmentPalletsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ListTransportationOptionsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ScheduleSelfShipAppointmentRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.ScheduleSelfShipAppointmentResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.SetPackingInformationRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.SetPackingInformationResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.SetPrepDetailsRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.SetPrepDetailsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.Shipment;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.UpdateInboundPlanNameRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.UpdateItemComplianceDetailsRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.UpdateItemComplianceDetailsResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.UpdateShipmentNameRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.UpdateShipmentSourceAddressRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.UpdateShipmentSourceAddressResponse;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.UpdateShipmentTrackingDetailsRequest;
import software.amazon.spapi.models.fulfillment.inbound.v2024_03_20.UpdateShipmentTrackingDetailsResponse;

public class FbaInboundApi {
    private ApiClient apiClient;

    public FbaInboundApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    private final Configuration config = Configuration.get();

    private final Bucket cancelInboundPlanBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-cancelInboundPlan"))
            .build();

    private final Bucket cancelSelfShipAppointmentBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-cancelSelfShipAppointment"))
            .build();

    private final Bucket confirmDeliveryWindowOptionsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-confirmDeliveryWindowOptions"))
            .build();

    private final Bucket confirmPackingOptionBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-confirmPackingOption"))
            .build();

    private final Bucket confirmPlacementOptionBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-confirmPlacementOption"))
            .build();

    private final Bucket confirmShipmentContentUpdatePreviewBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-confirmShipmentContentUpdatePreview"))
            .build();

    private final Bucket confirmTransportationOptionsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-confirmTransportationOptions"))
            .build();

    private final Bucket createInboundPlanBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-createInboundPlan"))
            .build();

    private final Bucket createMarketplaceItemLabelsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-createMarketplaceItemLabels"))
            .build();

    private final Bucket generateDeliveryWindowOptionsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-generateDeliveryWindowOptions"))
            .build();

    private final Bucket generatePackingOptionsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-generatePackingOptions"))
            .build();

    private final Bucket generatePlacementOptionsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-generatePlacementOptions"))
            .build();

    private final Bucket generateSelfShipAppointmentSlotsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-generateSelfShipAppointmentSlots"))
            .build();

    private final Bucket generateShipmentContentUpdatePreviewsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-generateShipmentContentUpdatePreviews"))
            .build();

    private final Bucket generateTransportationOptionsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-generateTransportationOptions"))
            .build();

    private final Bucket getDeliveryChallanDocumentBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-getDeliveryChallanDocument"))
            .build();

    private final Bucket getInboundOperationStatusBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-getInboundOperationStatus"))
            .build();

    private final Bucket getInboundPlanBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-getInboundPlan"))
            .build();

    private final Bucket getSelfShipAppointmentSlotsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-getSelfShipAppointmentSlots"))
            .build();

    private final Bucket getShipmentBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-getShipment"))
            .build();

    private final Bucket getShipmentContentUpdatePreviewBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-getShipmentContentUpdatePreview"))
            .build();

    private final Bucket listDeliveryWindowOptionsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listDeliveryWindowOptions"))
            .build();

    private final Bucket listInboundPlanBoxesBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listInboundPlanBoxes"))
            .build();

    private final Bucket listInboundPlanItemsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listInboundPlanItems"))
            .build();

    private final Bucket listInboundPlanPalletsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listInboundPlanPallets"))
            .build();

    private final Bucket listInboundPlansBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listInboundPlans"))
            .build();

    private final Bucket listItemComplianceDetailsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listItemComplianceDetails"))
            .build();

    private final Bucket listPackingGroupBoxesBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listPackingGroupBoxes"))
            .build();

    private final Bucket listPackingGroupItemsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listPackingGroupItems"))
            .build();

    private final Bucket listPackingOptionsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listPackingOptions"))
            .build();

    private final Bucket listPlacementOptionsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listPlacementOptions"))
            .build();

    private final Bucket listPrepDetailsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listPrepDetails"))
            .build();

    private final Bucket listShipmentBoxesBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listShipmentBoxes"))
            .build();

    private final Bucket listShipmentContentUpdatePreviewsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listShipmentContentUpdatePreviews"))
            .build();

    private final Bucket listShipmentItemsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listShipmentItems"))
            .build();

    private final Bucket listShipmentPalletsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listShipmentPallets"))
            .build();

    private final Bucket listTransportationOptionsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-listTransportationOptions"))
            .build();

    private final Bucket scheduleSelfShipAppointmentBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-scheduleSelfShipAppointment"))
            .build();

    private final Bucket setPackingInformationBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-setPackingInformation"))
            .build();

    private final Bucket setPrepDetailsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-setPrepDetails"))
            .build();

    private final Bucket updateInboundPlanNameBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-updateInboundPlanName"))
            .build();

    private final Bucket updateItemComplianceDetailsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-updateItemComplianceDetails"))
            .build();

    private final Bucket updateShipmentNameBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-updateShipmentName"))
            .build();

    private final Bucket updateShipmentSourceAddressBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-updateShipmentSourceAddress"))
            .build();

    private final Bucket updateShipmentTrackingDetailsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaInboundApi-updateShipmentTrackingDetails"))
            .build();

    private okhttp3.Call cancelInboundPlanCall(
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call cancelInboundPlanValidateBeforeCall(
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling cancelInboundPlan(Async)");
        }

        return cancelInboundPlanCall(inboundPlanId, progressListener, progressRequestListener);
    }

    /**
     * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window
     * for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload
     * (LTL) carrier shipments. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return CancelInboundPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CancelInboundPlanResponse cancelInboundPlan(String inboundPlanId) throws ApiException, LWAException {
        ApiResponse<CancelInboundPlanResponse> resp = cancelInboundPlanWithHttpInfo(inboundPlanId);
        return resp.getData();
    }

    /**
     * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window
     * for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload
     * (LTL) carrier shipments. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return ApiResponse&lt;CancelInboundPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CancelInboundPlanResponse> cancelInboundPlanWithHttpInfo(String inboundPlanId)
            throws ApiException, LWAException {
        okhttp3.Call call = cancelInboundPlanValidateBeforeCall(inboundPlanId, null, null);
        if (cancelInboundPlanBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CancelInboundPlanResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("cancelInboundPlan operation exceeds rate limit");
    }

    /**
     * (asynchronously) Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void
     * window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for
     * Less-Than-Truckload (LTL) carrier shipments. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ----
     * | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelInboundPlanAsync(
            String inboundPlanId, final ApiCallback<CancelInboundPlanResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                cancelInboundPlanValidateBeforeCall(inboundPlanId, progressListener, progressRequestListener);
        if (cancelInboundPlanBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CancelInboundPlanResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("cancelInboundPlan operation exceeds rate limit");
    }

    private okhttp3.Call cancelSelfShipAppointmentCall(
            CancelSelfShipAppointmentRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentCancellation"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call cancelSelfShipAppointmentValidateBeforeCall(
            CancelSelfShipAppointmentRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling cancelSelfShipAppointment(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling cancelSelfShipAppointment(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling cancelSelfShipAppointment(Async)");
        }

        return cancelSelfShipAppointmentCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
    }

    /**
     * Cancels a self-ship appointment slot against a shipment. Only available in the following
     * [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return CancelSelfShipAppointmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CancelSelfShipAppointmentResponse cancelSelfShipAppointment(
            CancelSelfShipAppointmentRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        ApiResponse<CancelSelfShipAppointmentResponse> resp =
                cancelSelfShipAppointmentWithHttpInfo(body, inboundPlanId, shipmentId);
        return resp.getData();
    }

    /**
     * Cancels a self-ship appointment slot against a shipment. Only available in the following
     * [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return ApiResponse&lt;CancelSelfShipAppointmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CancelSelfShipAppointmentResponse> cancelSelfShipAppointmentWithHttpInfo(
            CancelSelfShipAppointmentRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        okhttp3.Call call = cancelSelfShipAppointmentValidateBeforeCall(body, inboundPlanId, shipmentId, null, null);
        if (cancelSelfShipAppointmentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CancelSelfShipAppointmentResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("cancelSelfShipAppointment operation exceeds rate limit");
    }

    /**
     * (asynchronously) Cancels a self-ship appointment slot against a shipment. Only available in the following
     * [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelSelfShipAppointmentAsync(
            CancelSelfShipAppointmentRequest body,
            String inboundPlanId,
            String shipmentId,
            final ApiCallback<CancelSelfShipAppointmentResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = cancelSelfShipAppointmentValidateBeforeCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
        if (cancelSelfShipAppointmentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CancelSelfShipAppointmentResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("cancelSelfShipAppointment operation exceeds rate limit");
    }

    private okhttp3.Call confirmDeliveryWindowOptionsCall(
            String inboundPlanId,
            String shipmentId,
            String deliveryWindowOptionId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()))
                        .replaceAll(
                                "\\{" + "deliveryWindowOptionId" + "\\}",
                                apiClient.escapeString(deliveryWindowOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call confirmDeliveryWindowOptionsValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            String deliveryWindowOptionId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling confirmDeliveryWindowOptions(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling confirmDeliveryWindowOptions(Async)");
        }
        // verify the required parameter 'deliveryWindowOptionId' is set
        if (deliveryWindowOptionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'deliveryWindowOptionId' when calling confirmDeliveryWindowOptions(Async)");
        }

        return confirmDeliveryWindowOptionsCall(
                inboundPlanId, shipmentId, deliveryWindowOptionId, progressListener, progressRequestListener);
    }

    /**
     * Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be
     * confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the
     * chosen delivery window option can be updated before shipment closure. The window is used to provide the expected
     * time when a shipment will arrive at the warehouse. All transportation options which have the program
     * &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option
     * confirmation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId The shipment to confirm the delivery window option for. (required)
     * @param deliveryWindowOptionId The id of the delivery window option to be confirmed. (required)
     * @return ConfirmDeliveryWindowOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ConfirmDeliveryWindowOptionsResponse confirmDeliveryWindowOptions(
            String inboundPlanId, String shipmentId, String deliveryWindowOptionId) throws ApiException, LWAException {
        ApiResponse<ConfirmDeliveryWindowOptionsResponse> resp =
                confirmDeliveryWindowOptionsWithHttpInfo(inboundPlanId, shipmentId, deliveryWindowOptionId);
        return resp.getData();
    }

    /**
     * Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be
     * confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the
     * chosen delivery window option can be updated before shipment closure. The window is used to provide the expected
     * time when a shipment will arrive at the warehouse. All transportation options which have the program
     * &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option
     * confirmation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId The shipment to confirm the delivery window option for. (required)
     * @param deliveryWindowOptionId The id of the delivery window option to be confirmed. (required)
     * @return ApiResponse&lt;ConfirmDeliveryWindowOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ConfirmDeliveryWindowOptionsResponse> confirmDeliveryWindowOptionsWithHttpInfo(
            String inboundPlanId, String shipmentId, String deliveryWindowOptionId) throws ApiException, LWAException {
        okhttp3.Call call = confirmDeliveryWindowOptionsValidateBeforeCall(
                inboundPlanId, shipmentId, deliveryWindowOptionId, null, null);
        if (confirmDeliveryWindowOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ConfirmDeliveryWindowOptionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("confirmDeliveryWindowOptions operation exceeds rate limit");
    }

    /**
     * (asynchronously) Confirms the delivery window option for chosen shipment within an inbound plan. A placement
     * option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be
     * generated, but the chosen delivery window option can be updated before shipment closure. The window is used to
     * provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the
     * program &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation
     * option confirmation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId The shipment to confirm the delivery window option for. (required)
     * @param deliveryWindowOptionId The id of the delivery window option to be confirmed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call confirmDeliveryWindowOptionsAsync(
            String inboundPlanId,
            String shipmentId,
            String deliveryWindowOptionId,
            final ApiCallback<ConfirmDeliveryWindowOptionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = confirmDeliveryWindowOptionsValidateBeforeCall(
                inboundPlanId, shipmentId, deliveryWindowOptionId, progressListener, progressRequestListener);
        if (confirmDeliveryWindowOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ConfirmDeliveryWindowOptionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("confirmDeliveryWindowOptions operation exceeds rate limit");
    }

    private okhttp3.Call confirmPackingOptionCall(
            String inboundPlanId,
            String packingOptionId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll(
                                "\\{" + "packingOptionId" + "\\}", apiClient.escapeString(packingOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call confirmPackingOptionValidateBeforeCall(
            String inboundPlanId,
            String packingOptionId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling confirmPackingOption(Async)");
        }
        // verify the required parameter 'packingOptionId' is set
        if (packingOptionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'packingOptionId' when calling confirmPackingOption(Async)");
        }

        return confirmPackingOptionCall(inboundPlanId, packingOptionId, progressListener, progressRequestListener);
    }

    /**
     * Confirms the packing option for an inbound plan. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param packingOptionId Identifier of a packing option. (required)
     * @return ConfirmPackingOptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ConfirmPackingOptionResponse confirmPackingOption(String inboundPlanId, String packingOptionId)
            throws ApiException, LWAException {
        ApiResponse<ConfirmPackingOptionResponse> resp =
                confirmPackingOptionWithHttpInfo(inboundPlanId, packingOptionId);
        return resp.getData();
    }

    /**
     * Confirms the packing option for an inbound plan. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param packingOptionId Identifier of a packing option. (required)
     * @return ApiResponse&lt;ConfirmPackingOptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ConfirmPackingOptionResponse> confirmPackingOptionWithHttpInfo(
            String inboundPlanId, String packingOptionId) throws ApiException, LWAException {
        okhttp3.Call call = confirmPackingOptionValidateBeforeCall(inboundPlanId, packingOptionId, null, null);
        if (confirmPackingOptionBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ConfirmPackingOptionResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("confirmPackingOption operation exceeds rate limit");
    }

    /**
     * (asynchronously) Confirms the packing option for an inbound plan. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param packingOptionId Identifier of a packing option. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call confirmPackingOptionAsync(
            String inboundPlanId, String packingOptionId, final ApiCallback<ConfirmPackingOptionResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = confirmPackingOptionValidateBeforeCall(
                inboundPlanId, packingOptionId, progressListener, progressRequestListener);
        if (confirmPackingOptionBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ConfirmPackingOptionResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("confirmPackingOption operation exceeds rate limit");
    }

    private okhttp3.Call confirmPlacementOptionCall(
            String inboundPlanId,
            String placementOptionId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll(
                                "\\{" + "placementOptionId" + "\\}",
                                apiClient.escapeString(placementOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call confirmPlacementOptionValidateBeforeCall(
            String inboundPlanId,
            String placementOptionId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling confirmPlacementOption(Async)");
        }
        // verify the required parameter 'placementOptionId' is set
        if (placementOptionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'placementOptionId' when calling confirmPlacementOption(Async)");
        }

        return confirmPlacementOptionCall(inboundPlanId, placementOptionId, progressListener, progressRequestListener);
    }

    /**
     * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param placementOptionId The identifier of a placement option. A placement option represents the shipment splits
     *     and destinations of SKUs. (required)
     * @return ConfirmPlacementOptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ConfirmPlacementOptionResponse confirmPlacementOption(String inboundPlanId, String placementOptionId)
            throws ApiException, LWAException {
        ApiResponse<ConfirmPlacementOptionResponse> resp =
                confirmPlacementOptionWithHttpInfo(inboundPlanId, placementOptionId);
        return resp.getData();
    }

    /**
     * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param placementOptionId The identifier of a placement option. A placement option represents the shipment splits
     *     and destinations of SKUs. (required)
     * @return ApiResponse&lt;ConfirmPlacementOptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ConfirmPlacementOptionResponse> confirmPlacementOptionWithHttpInfo(
            String inboundPlanId, String placementOptionId) throws ApiException, LWAException {
        okhttp3.Call call = confirmPlacementOptionValidateBeforeCall(inboundPlanId, placementOptionId, null, null);
        if (confirmPlacementOptionBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ConfirmPlacementOptionResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("confirmPlacementOption operation exceeds rate limit");
    }

    /**
     * (asynchronously) Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the
     * Inbound Plan. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param placementOptionId The identifier of a placement option. A placement option represents the shipment splits
     *     and destinations of SKUs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call confirmPlacementOptionAsync(
            String inboundPlanId, String placementOptionId, final ApiCallback<ConfirmPlacementOptionResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = confirmPlacementOptionValidateBeforeCall(
                inboundPlanId, placementOptionId, progressListener, progressRequestListener);
        if (confirmPlacementOptionBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ConfirmPlacementOptionResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("confirmPlacementOption operation exceeds rate limit");
    }

    private okhttp3.Call confirmShipmentContentUpdatePreviewCall(
            String inboundPlanId,
            String shipmentId,
            String contentUpdatePreviewId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()))
                        .replaceAll(
                                "\\{" + "contentUpdatePreviewId" + "\\}",
                                apiClient.escapeString(contentUpdatePreviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call confirmShipmentContentUpdatePreviewValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            String contentUpdatePreviewId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling confirmShipmentContentUpdatePreview(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling confirmShipmentContentUpdatePreview(Async)");
        }
        // verify the required parameter 'contentUpdatePreviewId' is set
        if (contentUpdatePreviewId == null) {
            throw new ApiException(
                    "Missing the required parameter 'contentUpdatePreviewId' when calling confirmShipmentContentUpdatePreview(Async)");
        }

        return confirmShipmentContentUpdatePreviewCall(
                inboundPlanId, shipmentId, contentUpdatePreviewId, progressListener, progressRequestListener);
    }

    /**
     * Confirm a shipment content update preview and accept the changes in transportation cost. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param contentUpdatePreviewId Identifier of a content update preview. (required)
     * @return ConfirmShipmentContentUpdatePreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ConfirmShipmentContentUpdatePreviewResponse confirmShipmentContentUpdatePreview(
            String inboundPlanId, String shipmentId, String contentUpdatePreviewId) throws ApiException, LWAException {
        ApiResponse<ConfirmShipmentContentUpdatePreviewResponse> resp =
                confirmShipmentContentUpdatePreviewWithHttpInfo(inboundPlanId, shipmentId, contentUpdatePreviewId);
        return resp.getData();
    }

    /**
     * Confirm a shipment content update preview and accept the changes in transportation cost. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param contentUpdatePreviewId Identifier of a content update preview. (required)
     * @return ApiResponse&lt;ConfirmShipmentContentUpdatePreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ConfirmShipmentContentUpdatePreviewResponse> confirmShipmentContentUpdatePreviewWithHttpInfo(
            String inboundPlanId, String shipmentId, String contentUpdatePreviewId) throws ApiException, LWAException {
        okhttp3.Call call = confirmShipmentContentUpdatePreviewValidateBeforeCall(
                inboundPlanId, shipmentId, contentUpdatePreviewId, null, null);
        if (confirmShipmentContentUpdatePreviewBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ConfirmShipmentContentUpdatePreviewResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else
            throw new ApiException.RateLimitExceeded(
                    "confirmShipmentContentUpdatePreview operation exceeds rate limit");
    }

    /**
     * (asynchronously) Confirm a shipment content update preview and accept the changes in transportation cost. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table contains the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param contentUpdatePreviewId Identifier of a content update preview. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call confirmShipmentContentUpdatePreviewAsync(
            String inboundPlanId,
            String shipmentId,
            String contentUpdatePreviewId,
            final ApiCallback<ConfirmShipmentContentUpdatePreviewResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = confirmShipmentContentUpdatePreviewValidateBeforeCall(
                inboundPlanId, shipmentId, contentUpdatePreviewId, progressListener, progressRequestListener);
        if (confirmShipmentContentUpdatePreviewBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ConfirmShipmentContentUpdatePreviewResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else
            throw new ApiException.RateLimitExceeded(
                    "confirmShipmentContentUpdatePreview operation exceeds rate limit");
    }

    private okhttp3.Call confirmTransportationOptionsCall(
            ConfirmTransportationOptionsRequest body,
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call confirmTransportationOptionsValidateBeforeCall(
            ConfirmTransportationOptionsRequest body,
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling confirmTransportationOptions(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling confirmTransportationOptions(Async)");
        }

        return confirmTransportationOptionsCall(body, inboundPlanId, progressListener, progressRequestListener);
    }

    /**
     * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of
     * this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return ConfirmTransportationOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ConfirmTransportationOptionsResponse confirmTransportationOptions(
            ConfirmTransportationOptionsRequest body, String inboundPlanId) throws ApiException, LWAException {
        ApiResponse<ConfirmTransportationOptionsResponse> resp =
                confirmTransportationOptionsWithHttpInfo(body, inboundPlanId);
        return resp.getData();
    }

    /**
     * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of
     * this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return ApiResponse&lt;ConfirmTransportationOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ConfirmTransportationOptionsResponse> confirmTransportationOptionsWithHttpInfo(
            ConfirmTransportationOptionsRequest body, String inboundPlanId) throws ApiException, LWAException {
        okhttp3.Call call = confirmTransportationOptionsValidateBeforeCall(body, inboundPlanId, null, null);
        if (confirmTransportationOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ConfirmTransportationOptionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("confirmTransportationOptions operation exceeds rate limit");
    }

    /**
     * (asynchronously) Confirms all the transportation options for an inbound plan. A placement option must be
     * confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed
     * for the Inbound Plan. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call confirmTransportationOptionsAsync(
            ConfirmTransportationOptionsRequest body,
            String inboundPlanId,
            final ApiCallback<ConfirmTransportationOptionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = confirmTransportationOptionsValidateBeforeCall(
                body, inboundPlanId, progressListener, progressRequestListener);
        if (confirmTransportationOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ConfirmTransportationOptionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("confirmTransportationOptions operation exceeds rate limit");
    }

    private okhttp3.Call createInboundPlanCall(
            CreateInboundPlanRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call createInboundPlanValidateBeforeCall(
            CreateInboundPlanRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createInboundPlan(Async)");
        }

        return createInboundPlanCall(body, progressListener, progressRequestListener);
    }

    /**
     * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into
     * Amazon&#x27;s fufillment network. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2
     * | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     * @return CreateInboundPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateInboundPlanResponse createInboundPlan(CreateInboundPlanRequest body)
            throws ApiException, LWAException {
        ApiResponse<CreateInboundPlanResponse> resp = createInboundPlanWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into
     * Amazon&#x27;s fufillment network. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2
     * | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     * @return ApiResponse&lt;CreateInboundPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateInboundPlanResponse> createInboundPlanWithHttpInfo(CreateInboundPlanRequest body)
            throws ApiException, LWAException {
        okhttp3.Call call = createInboundPlanValidateBeforeCall(body, null, null);
        if (createInboundPlanBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateInboundPlanResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createInboundPlan operation exceeds rate limit");
    }

    /**
     * (asynchronously) Creates an inbound plan. An inbound plan contains all the necessary information to send
     * shipments into Amazon&#x27;s fufillment network. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createInboundPlanAsync(
            CreateInboundPlanRequest body, final ApiCallback<CreateInboundPlanResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = createInboundPlanValidateBeforeCall(body, progressListener, progressRequestListener);
        if (createInboundPlanBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateInboundPlanResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createInboundPlan operation exceeds rate limit");
    }

    private okhttp3.Call createMarketplaceItemLabelsCall(
            CreateMarketplaceItemLabelsRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/items/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call createMarketplaceItemLabelsValidateBeforeCall(
            CreateMarketplaceItemLabelsRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling createMarketplaceItemLabels(Async)");
        }

        return createMarketplaceItemLabelsCall(body, progressListener, progressRequestListener);
    }

    /**
     * For a given marketplace - creates labels for a list of MSKUs. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     * @return CreateMarketplaceItemLabelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateMarketplaceItemLabelsResponse createMarketplaceItemLabels(CreateMarketplaceItemLabelsRequest body)
            throws ApiException, LWAException {
        ApiResponse<CreateMarketplaceItemLabelsResponse> resp = createMarketplaceItemLabelsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * For a given marketplace - creates labels for a list of MSKUs. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     * @return ApiResponse&lt;CreateMarketplaceItemLabelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateMarketplaceItemLabelsResponse> createMarketplaceItemLabelsWithHttpInfo(
            CreateMarketplaceItemLabelsRequest body) throws ApiException, LWAException {
        okhttp3.Call call = createMarketplaceItemLabelsValidateBeforeCall(body, null, null);
        if (createMarketplaceItemLabelsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateMarketplaceItemLabelsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createMarketplaceItemLabels operation exceeds rate limit");
    }

    /**
     * (asynchronously) For a given marketplace - creates labels for a list of MSKUs. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createMarketplaceItemLabelsAsync(
            CreateMarketplaceItemLabelsRequest body, final ApiCallback<CreateMarketplaceItemLabelsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                createMarketplaceItemLabelsValidateBeforeCall(body, progressListener, progressRequestListener);
        if (createMarketplaceItemLabelsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateMarketplaceItemLabelsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createMarketplaceItemLabels operation exceeds rate limit");
    }

    private okhttp3.Call generateDeliveryWindowOptionsCall(
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call generateDeliveryWindowOptionsValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling generateDeliveryWindowOptions(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling generateDeliveryWindowOptions(Async)");
        }

        return generateDeliveryWindowOptionsCall(inboundPlanId, shipmentId, progressListener, progressRequestListener);
    }

    /**
     * Generates available delivery window options for a given shipment. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId The shipment to generate delivery window options for. (required)
     * @return GenerateDeliveryWindowOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GenerateDeliveryWindowOptionsResponse generateDeliveryWindowOptions(String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        ApiResponse<GenerateDeliveryWindowOptionsResponse> resp =
                generateDeliveryWindowOptionsWithHttpInfo(inboundPlanId, shipmentId);
        return resp.getData();
    }

    /**
     * Generates available delivery window options for a given shipment. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId The shipment to generate delivery window options for. (required)
     * @return ApiResponse&lt;GenerateDeliveryWindowOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GenerateDeliveryWindowOptionsResponse> generateDeliveryWindowOptionsWithHttpInfo(
            String inboundPlanId, String shipmentId) throws ApiException, LWAException {
        okhttp3.Call call = generateDeliveryWindowOptionsValidateBeforeCall(inboundPlanId, shipmentId, null, null);
        if (generateDeliveryWindowOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GenerateDeliveryWindowOptionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("generateDeliveryWindowOptions operation exceeds rate limit");
    }

    /**
     * (asynchronously) Generates available delivery window options for a given shipment. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId The shipment to generate delivery window options for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call generateDeliveryWindowOptionsAsync(
            String inboundPlanId, String shipmentId, final ApiCallback<GenerateDeliveryWindowOptionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = generateDeliveryWindowOptionsValidateBeforeCall(
                inboundPlanId, shipmentId, progressListener, progressRequestListener);
        if (generateDeliveryWindowOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GenerateDeliveryWindowOptionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("generateDeliveryWindowOptions operation exceeds rate limit");
    }

    private okhttp3.Call generatePackingOptionsCall(
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call generatePackingOptionsValidateBeforeCall(
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling generatePackingOptions(Async)");
        }

        return generatePackingOptionsCall(inboundPlanId, progressListener, progressRequestListener);
    }

    /**
     * Generates available packing options for the inbound plan. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table contains the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return GeneratePackingOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GeneratePackingOptionsResponse generatePackingOptions(String inboundPlanId)
            throws ApiException, LWAException {
        ApiResponse<GeneratePackingOptionsResponse> resp = generatePackingOptionsWithHttpInfo(inboundPlanId);
        return resp.getData();
    }

    /**
     * Generates available packing options for the inbound plan. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table contains the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return ApiResponse&lt;GeneratePackingOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GeneratePackingOptionsResponse> generatePackingOptionsWithHttpInfo(String inboundPlanId)
            throws ApiException, LWAException {
        okhttp3.Call call = generatePackingOptionsValidateBeforeCall(inboundPlanId, null, null);
        if (generatePackingOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GeneratePackingOptionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("generatePackingOptions operation exceeds rate limit");
    }

    /**
     * (asynchronously) Generates available packing options for the inbound plan. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call generatePackingOptionsAsync(
            String inboundPlanId, final ApiCallback<GeneratePackingOptionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                generatePackingOptionsValidateBeforeCall(inboundPlanId, progressListener, progressRequestListener);
        if (generatePackingOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GeneratePackingOptionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("generatePackingOptions operation exceeds rate limit");
    }

    private okhttp3.Call generatePlacementOptionsCall(
            GeneratePlacementOptionsRequest body,
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call generatePlacementOptionsValidateBeforeCall(
            GeneratePlacementOptionsRequest body,
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling generatePlacementOptions(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling generatePlacementOptions(Async)");
        }

        return generatePlacementOptionsCall(body, inboundPlanId, progressListener, progressRequestListener);
    }

    /**
     * Generates placement options for the inbound plan. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return GeneratePlacementOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GeneratePlacementOptionsResponse generatePlacementOptions(
            GeneratePlacementOptionsRequest body, String inboundPlanId) throws ApiException, LWAException {
        ApiResponse<GeneratePlacementOptionsResponse> resp = generatePlacementOptionsWithHttpInfo(body, inboundPlanId);
        return resp.getData();
    }

    /**
     * Generates placement options for the inbound plan. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return ApiResponse&lt;GeneratePlacementOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GeneratePlacementOptionsResponse> generatePlacementOptionsWithHttpInfo(
            GeneratePlacementOptionsRequest body, String inboundPlanId) throws ApiException, LWAException {
        okhttp3.Call call = generatePlacementOptionsValidateBeforeCall(body, inboundPlanId, null, null);
        if (generatePlacementOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GeneratePlacementOptionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("generatePlacementOptions operation exceeds rate limit");
    }

    /**
     * (asynchronously) Generates placement options for the inbound plan. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call generatePlacementOptionsAsync(
            GeneratePlacementOptionsRequest body,
            String inboundPlanId,
            final ApiCallback<GeneratePlacementOptionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = generatePlacementOptionsValidateBeforeCall(
                body, inboundPlanId, progressListener, progressRequestListener);
        if (generatePlacementOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GeneratePlacementOptionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("generatePlacementOptions operation exceeds rate limit");
    }

    private okhttp3.Call generateSelfShipAppointmentSlotsCall(
            GenerateSelfShipAppointmentSlotsRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call generateSelfShipAppointmentSlotsValidateBeforeCall(
            GenerateSelfShipAppointmentSlotsRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling generateSelfShipAppointmentSlots(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling generateSelfShipAppointmentSlots(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling generateSelfShipAppointmentSlots(Async)");
        }

        return generateSelfShipAppointmentSlotsCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
    }

    /**
     * Initiates the process of generating the appointment slots list. Only available in the following
     * [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return GenerateSelfShipAppointmentSlotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GenerateSelfShipAppointmentSlotsResponse generateSelfShipAppointmentSlots(
            GenerateSelfShipAppointmentSlotsRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        ApiResponse<GenerateSelfShipAppointmentSlotsResponse> resp =
                generateSelfShipAppointmentSlotsWithHttpInfo(body, inboundPlanId, shipmentId);
        return resp.getData();
    }

    /**
     * Initiates the process of generating the appointment slots list. Only available in the following
     * [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return ApiResponse&lt;GenerateSelfShipAppointmentSlotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GenerateSelfShipAppointmentSlotsResponse> generateSelfShipAppointmentSlotsWithHttpInfo(
            GenerateSelfShipAppointmentSlotsRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        okhttp3.Call call =
                generateSelfShipAppointmentSlotsValidateBeforeCall(body, inboundPlanId, shipmentId, null, null);
        if (generateSelfShipAppointmentSlotsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GenerateSelfShipAppointmentSlotsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else
            throw new ApiException.RateLimitExceeded("generateSelfShipAppointmentSlots operation exceeds rate limit");
    }

    /**
     * (asynchronously) Initiates the process of generating the appointment slots list. Only available in the following
     * [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call generateSelfShipAppointmentSlotsAsync(
            GenerateSelfShipAppointmentSlotsRequest body,
            String inboundPlanId,
            String shipmentId,
            final ApiCallback<GenerateSelfShipAppointmentSlotsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = generateSelfShipAppointmentSlotsValidateBeforeCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
        if (generateSelfShipAppointmentSlotsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GenerateSelfShipAppointmentSlotsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else
            throw new ApiException.RateLimitExceeded("generateSelfShipAppointmentSlots operation exceeds rate limit");
    }

    private okhttp3.Call generateShipmentContentUpdatePreviewsCall(
            GenerateShipmentContentUpdatePreviewsRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call generateShipmentContentUpdatePreviewsValidateBeforeCall(
            GenerateShipmentContentUpdatePreviewsRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling generateShipmentContentUpdatePreviews(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling generateShipmentContentUpdatePreviews(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling generateShipmentContentUpdatePreviews(Async)");
        }

        return generateShipmentContentUpdatePreviewsCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
    }

    /**
     * Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a
     * confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior
     * to confirmation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return GenerateShipmentContentUpdatePreviewsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GenerateShipmentContentUpdatePreviewsResponse generateShipmentContentUpdatePreviews(
            GenerateShipmentContentUpdatePreviewsRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        ApiResponse<GenerateShipmentContentUpdatePreviewsResponse> resp =
                generateShipmentContentUpdatePreviewsWithHttpInfo(body, inboundPlanId, shipmentId);
        return resp.getData();
    }

    /**
     * Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a
     * confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior
     * to confirmation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return ApiResponse&lt;GenerateShipmentContentUpdatePreviewsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GenerateShipmentContentUpdatePreviewsResponse> generateShipmentContentUpdatePreviewsWithHttpInfo(
            GenerateShipmentContentUpdatePreviewsRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        okhttp3.Call call =
                generateShipmentContentUpdatePreviewsValidateBeforeCall(body, inboundPlanId, shipmentId, null, null);
        if (generateShipmentContentUpdatePreviewsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GenerateShipmentContentUpdatePreviewsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else
            throw new ApiException.RateLimitExceeded(
                    "generateShipmentContentUpdatePreviews operation exceeds rate limit");
    }

    /**
     * (asynchronously) Generate a shipment content update preview given a set of intended boxes and/or items for a
     * shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs
     * and contents prior to confirmation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 |
     * 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied
     * to the requested operation, when available. The preceding table contains the default rate and burst values for
     * this operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call generateShipmentContentUpdatePreviewsAsync(
            GenerateShipmentContentUpdatePreviewsRequest body,
            String inboundPlanId,
            String shipmentId,
            final ApiCallback<GenerateShipmentContentUpdatePreviewsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = generateShipmentContentUpdatePreviewsValidateBeforeCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
        if (generateShipmentContentUpdatePreviewsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GenerateShipmentContentUpdatePreviewsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else
            throw new ApiException.RateLimitExceeded(
                    "generateShipmentContentUpdatePreviews operation exceeds rate limit");
    }

    private okhttp3.Call generateTransportationOptionsCall(
            GenerateTransportationOptionsRequest body,
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call generateTransportationOptionsValidateBeforeCall(
            GenerateTransportationOptionsRequest body,
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling generateTransportationOptions(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling generateTransportationOptions(Async)");
        }

        return generateTransportationOptionsCall(body, inboundPlanId, progressListener, progressRequestListener);
    }

    /**
     * Generates available transportation options for a given placement option. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return GenerateTransportationOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GenerateTransportationOptionsResponse generateTransportationOptions(
            GenerateTransportationOptionsRequest body, String inboundPlanId) throws ApiException, LWAException {
        ApiResponse<GenerateTransportationOptionsResponse> resp =
                generateTransportationOptionsWithHttpInfo(body, inboundPlanId);
        return resp.getData();
    }

    /**
     * Generates available transportation options for a given placement option. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return ApiResponse&lt;GenerateTransportationOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GenerateTransportationOptionsResponse> generateTransportationOptionsWithHttpInfo(
            GenerateTransportationOptionsRequest body, String inboundPlanId) throws ApiException, LWAException {
        okhttp3.Call call = generateTransportationOptionsValidateBeforeCall(body, inboundPlanId, null, null);
        if (generateTransportationOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GenerateTransportationOptionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("generateTransportationOptions operation exceeds rate limit");
    }

    /**
     * (asynchronously) Generates available transportation options for a given placement option. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call generateTransportationOptionsAsync(
            GenerateTransportationOptionsRequest body,
            String inboundPlanId,
            final ApiCallback<GenerateTransportationOptionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = generateTransportationOptionsValidateBeforeCall(
                body, inboundPlanId, progressListener, progressRequestListener);
        if (generateTransportationOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GenerateTransportationOptionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("generateTransportationOptions operation exceeds rate limit");
    }

    private okhttp3.Call getDeliveryChallanDocumentCall(
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getDeliveryChallanDocumentValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling getDeliveryChallanDocument(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling getDeliveryChallanDocument(Async)");
        }

        return getDeliveryChallanDocumentCall(inboundPlanId, shipmentId, progressListener, progressRequestListener);
    }

    /**
     * Provide delivery challan document for PCP transportation in IN marketplace. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return GetDeliveryChallanDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetDeliveryChallanDocumentResponse getDeliveryChallanDocument(String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        ApiResponse<GetDeliveryChallanDocumentResponse> resp =
                getDeliveryChallanDocumentWithHttpInfo(inboundPlanId, shipmentId);
        return resp.getData();
    }

    /**
     * Provide delivery challan document for PCP transportation in IN marketplace. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return ApiResponse&lt;GetDeliveryChallanDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetDeliveryChallanDocumentResponse> getDeliveryChallanDocumentWithHttpInfo(
            String inboundPlanId, String shipmentId) throws ApiException, LWAException {
        okhttp3.Call call = getDeliveryChallanDocumentValidateBeforeCall(inboundPlanId, shipmentId, null, null);
        if (getDeliveryChallanDocumentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetDeliveryChallanDocumentResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getDeliveryChallanDocument operation exceeds rate limit");
    }

    /**
     * (asynchronously) Provide delivery challan document for PCP transportation in IN marketplace. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table contains the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getDeliveryChallanDocumentAsync(
            String inboundPlanId, String shipmentId, final ApiCallback<GetDeliveryChallanDocumentResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getDeliveryChallanDocumentValidateBeforeCall(
                inboundPlanId, shipmentId, progressListener, progressRequestListener);
        if (getDeliveryChallanDocumentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetDeliveryChallanDocumentResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getDeliveryChallanDocument operation exceeds rate limit");
    }

    private okhttp3.Call getInboundOperationStatusCall(
            String operationId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/operations/{operationId}"
                .replaceAll("\\{" + "operationId" + "\\}", apiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getInboundOperationStatusValidateBeforeCall(
            String operationId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'operationId' when calling getInboundOperationStatus(Async)");
        }

        return getInboundOperationStatusCall(operationId, progressListener, progressRequestListener);
    }

    /**
     * Gets the status of the processing of an asynchronous API call. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param operationId Identifier of an asynchronous operation. (required)
     * @return InboundOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public InboundOperationStatus getInboundOperationStatus(String operationId) throws ApiException, LWAException {
        ApiResponse<InboundOperationStatus> resp = getInboundOperationStatusWithHttpInfo(operationId);
        return resp.getData();
    }

    /**
     * Gets the status of the processing of an asynchronous API call. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param operationId Identifier of an asynchronous operation. (required)
     * @return ApiResponse&lt;InboundOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<InboundOperationStatus> getInboundOperationStatusWithHttpInfo(String operationId)
            throws ApiException, LWAException {
        okhttp3.Call call = getInboundOperationStatusValidateBeforeCall(operationId, null, null);
        if (getInboundOperationStatusBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<InboundOperationStatus>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getInboundOperationStatus operation exceeds rate limit");
    }

    /**
     * (asynchronously) Gets the status of the processing of an asynchronous API call. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param operationId Identifier of an asynchronous operation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getInboundOperationStatusAsync(
            String operationId, final ApiCallback<InboundOperationStatus> callback) throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getInboundOperationStatusValidateBeforeCall(operationId, progressListener, progressRequestListener);
        if (getInboundOperationStatusBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<InboundOperationStatus>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getInboundOperationStatus operation exceeds rate limit");
    }

    private okhttp3.Call getInboundPlanCall(
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getInboundPlanValidateBeforeCall(
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException("Missing the required parameter 'inboundPlanId' when calling getInboundPlan(Async)");
        }

        return getInboundPlanCall(inboundPlanId, progressListener, progressRequestListener);
    }

    /**
     * Fetches the top level information about an inbound plan. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
     * that were applied to the requested operation, when available. The preceding table contains the default rate and
     * burst values for this operation. Selling partners whose business demands require higher throughput may have
     * higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits
     * in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return InboundPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public InboundPlan getInboundPlan(String inboundPlanId) throws ApiException, LWAException {
        ApiResponse<InboundPlan> resp = getInboundPlanWithHttpInfo(inboundPlanId);
        return resp.getData();
    }

    /**
     * Fetches the top level information about an inbound plan. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
     * that were applied to the requested operation, when available. The preceding table contains the default rate and
     * burst values for this operation. Selling partners whose business demands require higher throughput may have
     * higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits
     * in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return ApiResponse&lt;InboundPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<InboundPlan> getInboundPlanWithHttpInfo(String inboundPlanId) throws ApiException, LWAException {
        okhttp3.Call call = getInboundPlanValidateBeforeCall(inboundPlanId, null, null);
        if (getInboundPlanBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<InboundPlan>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getInboundPlan operation exceeds rate limit");
    }

    /**
     * (asynchronously) Fetches the top level information about an inbound plan. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getInboundPlanAsync(String inboundPlanId, final ApiCallback<InboundPlan> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getInboundPlanValidateBeforeCall(inboundPlanId, progressListener, progressRequestListener);
        if (getInboundPlanBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<InboundPlan>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getInboundPlan operation exceeds rate limit");
    }

    private okhttp3.Call getSelfShipAppointmentSlotsCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getSelfShipAppointmentSlotsValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling getSelfShipAppointmentSlots(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling getSelfShipAppointmentSlots(Async)");
        }

        return getSelfShipAppointmentSlotsCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse. Only
     * available in the following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR,
     * EG, SA, AE, IN. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of self ship appointment slots to return in the response matching the given query.
     *     (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return GetSelfShipAppointmentSlotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetSelfShipAppointmentSlotsResponse getSelfShipAppointmentSlots(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        ApiResponse<GetSelfShipAppointmentSlotsResponse> resp =
                getSelfShipAppointmentSlotsWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse. Only
     * available in the following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR,
     * EG, SA, AE, IN. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of self ship appointment slots to return in the response matching the given query.
     *     (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;GetSelfShipAppointmentSlotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetSelfShipAppointmentSlotsResponse> getSelfShipAppointmentSlotsWithHttpInfo(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getSelfShipAppointmentSlotsValidateBeforeCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, null, null);
        if (getSelfShipAppointmentSlotsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetSelfShipAppointmentSlotsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getSelfShipAppointmentSlots operation exceeds rate limit");
    }

    /**
     * (asynchronously) Retrieves a list of available self-ship appointment slots used to drop off a shipment at a
     * warehouse. Only available in the following
     * [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of self ship appointment slots to return in the response matching the given query.
     *     (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getSelfShipAppointmentSlotsAsync(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<GetSelfShipAppointmentSlotsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getSelfShipAppointmentSlotsValidateBeforeCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (getSelfShipAppointmentSlotsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetSelfShipAppointmentSlotsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getSelfShipAppointmentSlots operation exceeds rate limit");
    }

    private okhttp3.Call getShipmentCall(
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getShipmentValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException("Missing the required parameter 'inboundPlanId' when calling getShipment(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling getShipment(Async)");
        }

        return getShipmentCall(inboundPlanId, shipmentId, progressListener, progressRequestListener);
    }

    /**
     * Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60;
     * inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the
     * shipment. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return Shipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public Shipment getShipment(String inboundPlanId, String shipmentId) throws ApiException, LWAException {
        ApiResponse<Shipment> resp = getShipmentWithHttpInfo(inboundPlanId, shipmentId);
        return resp.getData();
    }

    /**
     * Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60;
     * inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the
     * shipment. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return ApiResponse&lt;Shipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Shipment> getShipmentWithHttpInfo(String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        okhttp3.Call call = getShipmentValidateBeforeCall(inboundPlanId, shipmentId, null, null);
        if (getShipmentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<Shipment>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getShipment operation exceeds rate limit");
    }

    /**
     * (asynchronously) Provides the full details for a specific shipment within an inbound plan. The
     * &#x60;transportationOptionId&#x60; inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the
     * transportation details for the shipment. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShipmentAsync(String inboundPlanId, String shipmentId, final ApiCallback<Shipment> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getShipmentValidateBeforeCall(inboundPlanId, shipmentId, progressListener, progressRequestListener);
        if (getShipmentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<Shipment>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getShipment operation exceeds rate limit");
    }

    private okhttp3.Call getShipmentContentUpdatePreviewCall(
            String inboundPlanId,
            String shipmentId,
            String contentUpdatePreviewId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()))
                        .replaceAll(
                                "\\{" + "contentUpdatePreviewId" + "\\}",
                                apiClient.escapeString(contentUpdatePreviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getShipmentContentUpdatePreviewValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            String contentUpdatePreviewId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling getShipmentContentUpdatePreview(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling getShipmentContentUpdatePreview(Async)");
        }
        // verify the required parameter 'contentUpdatePreviewId' is set
        if (contentUpdatePreviewId == null) {
            throw new ApiException(
                    "Missing the required parameter 'contentUpdatePreviewId' when calling getShipmentContentUpdatePreview(Async)");
        }

        return getShipmentContentUpdatePreviewCall(
                inboundPlanId, shipmentId, contentUpdatePreviewId, progressListener, progressRequestListener);
    }

    /**
     * Retrieve a shipment content update preview which provides a summary of the requested shipment content changes
     * along with the transportation cost implications of the change that can only be confirmed prior to the expiry date
     * specified. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param contentUpdatePreviewId Identifier of a content update preview. (required)
     * @return ContentUpdatePreview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ContentUpdatePreview getShipmentContentUpdatePreview(
            String inboundPlanId, String shipmentId, String contentUpdatePreviewId) throws ApiException, LWAException {
        ApiResponse<ContentUpdatePreview> resp =
                getShipmentContentUpdatePreviewWithHttpInfo(inboundPlanId, shipmentId, contentUpdatePreviewId);
        return resp.getData();
    }

    /**
     * Retrieve a shipment content update preview which provides a summary of the requested shipment content changes
     * along with the transportation cost implications of the change that can only be confirmed prior to the expiry date
     * specified. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param contentUpdatePreviewId Identifier of a content update preview. (required)
     * @return ApiResponse&lt;ContentUpdatePreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ContentUpdatePreview> getShipmentContentUpdatePreviewWithHttpInfo(
            String inboundPlanId, String shipmentId, String contentUpdatePreviewId) throws ApiException, LWAException {
        okhttp3.Call call = getShipmentContentUpdatePreviewValidateBeforeCall(
                inboundPlanId, shipmentId, contentUpdatePreviewId, null, null);
        if (getShipmentContentUpdatePreviewBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ContentUpdatePreview>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getShipmentContentUpdatePreview operation exceeds rate limit");
    }

    /**
     * (asynchronously) Retrieve a shipment content update preview which provides a summary of the requested shipment
     * content changes along with the transportation cost implications of the change that can only be confirmed prior to
     * the expiry date specified. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param contentUpdatePreviewId Identifier of a content update preview. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShipmentContentUpdatePreviewAsync(
            String inboundPlanId,
            String shipmentId,
            String contentUpdatePreviewId,
            final ApiCallback<ContentUpdatePreview> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getShipmentContentUpdatePreviewValidateBeforeCall(
                inboundPlanId, shipmentId, contentUpdatePreviewId, progressListener, progressRequestListener);
        if (getShipmentContentUpdatePreviewBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ContentUpdatePreview>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getShipmentContentUpdatePreview operation exceeds rate limit");
    }

    private okhttp3.Call listDeliveryWindowOptionsCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listDeliveryWindowOptionsValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listDeliveryWindowOptions(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling listDeliveryWindowOptions(Async)");
        }

        return listDeliveryWindowOptionsCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the
     * &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId The shipment to get delivery window options for. (required)
     * @param pageSize The number of delivery window options to return in the response matching the given query.
     *     (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListDeliveryWindowOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListDeliveryWindowOptionsResponse listDeliveryWindowOptions(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        ApiResponse<ListDeliveryWindowOptionsResponse> resp =
                listDeliveryWindowOptionsWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the
     * &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId The shipment to get delivery window options for. (required)
     * @param pageSize The number of delivery window options to return in the response matching the given query.
     *     (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListDeliveryWindowOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListDeliveryWindowOptionsResponse> listDeliveryWindowOptionsWithHttpInfo(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listDeliveryWindowOptionsValidateBeforeCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, null, null);
        if (listDeliveryWindowOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListDeliveryWindowOptionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listDeliveryWindowOptions operation exceeds rate limit");
    }

    /**
     * (asynchronously) Retrieves all delivery window options for a shipment. Delivery window options must first be
     * generated by the &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table contains the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId The shipment to get delivery window options for. (required)
     * @param pageSize The number of delivery window options to return in the response matching the given query.
     *     (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listDeliveryWindowOptionsAsync(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListDeliveryWindowOptionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listDeliveryWindowOptionsValidateBeforeCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listDeliveryWindowOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListDeliveryWindowOptionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listDeliveryWindowOptions operation exceeds rate limit");
    }

    private okhttp3.Call listInboundPlanBoxesCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listInboundPlanBoxesValidateBeforeCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listInboundPlanBoxes(Async)");
        }

        return listInboundPlanBoxesCall(
                inboundPlanId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Provides a paginated list of box packages in an inbound plan. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListInboundPlanBoxesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListInboundPlanBoxesResponse listInboundPlanBoxes(
            String inboundPlanId, Integer pageSize, String paginationToken) throws ApiException, LWAException {
        ApiResponse<ListInboundPlanBoxesResponse> resp =
                listInboundPlanBoxesWithHttpInfo(inboundPlanId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Provides a paginated list of box packages in an inbound plan. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListInboundPlanBoxesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListInboundPlanBoxesResponse> listInboundPlanBoxesWithHttpInfo(
            String inboundPlanId, Integer pageSize, String paginationToken) throws ApiException, LWAException {
        okhttp3.Call call =
                listInboundPlanBoxesValidateBeforeCall(inboundPlanId, pageSize, paginationToken, null, null);
        if (listInboundPlanBoxesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListInboundPlanBoxesResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listInboundPlanBoxes operation exceeds rate limit");
    }

    /**
     * (asynchronously) Provides a paginated list of box packages in an inbound plan. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listInboundPlanBoxesAsync(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListInboundPlanBoxesResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listInboundPlanBoxesValidateBeforeCall(
                inboundPlanId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listInboundPlanBoxesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListInboundPlanBoxesResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listInboundPlanBoxes operation exceeds rate limit");
    }

    private okhttp3.Call listInboundPlanItemsCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listInboundPlanItemsValidateBeforeCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listInboundPlanItems(Async)");
        }

        return listInboundPlanItemsCall(
                inboundPlanId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Provides a paginated list of item packages in an inbound plan. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListInboundPlanItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListInboundPlanItemsResponse listInboundPlanItems(
            String inboundPlanId, Integer pageSize, String paginationToken) throws ApiException, LWAException {
        ApiResponse<ListInboundPlanItemsResponse> resp =
                listInboundPlanItemsWithHttpInfo(inboundPlanId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Provides a paginated list of item packages in an inbound plan. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListInboundPlanItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListInboundPlanItemsResponse> listInboundPlanItemsWithHttpInfo(
            String inboundPlanId, Integer pageSize, String paginationToken) throws ApiException, LWAException {
        okhttp3.Call call =
                listInboundPlanItemsValidateBeforeCall(inboundPlanId, pageSize, paginationToken, null, null);
        if (listInboundPlanItemsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListInboundPlanItemsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listInboundPlanItems operation exceeds rate limit");
    }

    /**
     * (asynchronously) Provides a paginated list of item packages in an inbound plan. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listInboundPlanItemsAsync(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListInboundPlanItemsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listInboundPlanItemsValidateBeforeCall(
                inboundPlanId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listInboundPlanItemsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListInboundPlanItemsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listInboundPlanItems operation exceeds rate limit");
    }

    private okhttp3.Call listInboundPlanPalletsCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listInboundPlanPalletsValidateBeforeCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listInboundPlanPallets(Async)");
        }

        return listInboundPlanPalletsCall(
                inboundPlanId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the
     * related details are provided after generating Less-Than-Truckload (LTL) carrier shipments. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of pallets to return in the response matching the given query. (optional, default to
     *     10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListInboundPlanPalletsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListInboundPlanPalletsResponse listInboundPlanPallets(
            String inboundPlanId, Integer pageSize, String paginationToken) throws ApiException, LWAException {
        ApiResponse<ListInboundPlanPalletsResponse> resp =
                listInboundPlanPalletsWithHttpInfo(inboundPlanId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the
     * related details are provided after generating Less-Than-Truckload (LTL) carrier shipments. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of pallets to return in the response matching the given query. (optional, default to
     *     10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListInboundPlanPalletsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListInboundPlanPalletsResponse> listInboundPlanPalletsWithHttpInfo(
            String inboundPlanId, Integer pageSize, String paginationToken) throws ApiException, LWAException {
        okhttp3.Call call =
                listInboundPlanPalletsValidateBeforeCall(inboundPlanId, pageSize, paginationToken, null, null);
        if (listInboundPlanPalletsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListInboundPlanPalletsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listInboundPlanPallets operation exceeds rate limit");
    }

    /**
     * (asynchronously) Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have
     * pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of pallets to return in the response matching the given query. (optional, default to
     *     10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listInboundPlanPalletsAsync(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListInboundPlanPalletsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listInboundPlanPalletsValidateBeforeCall(
                inboundPlanId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listInboundPlanPalletsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListInboundPlanPalletsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listInboundPlanPallets operation exceeds rate limit");
    }

    private okhttp3.Call listInboundPlansCall(
            Integer pageSize,
            String paginationToken,
            String status,
            String sortBy,
            String sortOrder,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));
        if (status != null) localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (sortBy != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        if (sortOrder != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listInboundPlansValidateBeforeCall(
            Integer pageSize,
            String paginationToken,
            String status,
            String sortBy,
            String sortOrder,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {

        return listInboundPlansCall(
                pageSize, paginationToken, status, sortBy, sortOrder, progressListener, progressRequestListener);
    }

    /**
     * Provides a list of inbound plans with minimal information. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table contains the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param pageSize The number of inbound plans to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param status The status of an inbound plan. (optional)
     * @param sortBy Sort by field. (optional)
     * @param sortOrder The sort order. (optional)
     * @return ListInboundPlansResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListInboundPlansResponse listInboundPlans(
            Integer pageSize, String paginationToken, String status, String sortBy, String sortOrder)
            throws ApiException, LWAException {
        ApiResponse<ListInboundPlansResponse> resp =
                listInboundPlansWithHttpInfo(pageSize, paginationToken, status, sortBy, sortOrder);
        return resp.getData();
    }

    /**
     * Provides a list of inbound plans with minimal information. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table contains the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param pageSize The number of inbound plans to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param status The status of an inbound plan. (optional)
     * @param sortBy Sort by field. (optional)
     * @param sortOrder The sort order. (optional)
     * @return ApiResponse&lt;ListInboundPlansResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListInboundPlansResponse> listInboundPlansWithHttpInfo(
            Integer pageSize, String paginationToken, String status, String sortBy, String sortOrder)
            throws ApiException, LWAException {
        okhttp3.Call call =
                listInboundPlansValidateBeforeCall(pageSize, paginationToken, status, sortBy, sortOrder, null, null);
        if (listInboundPlansBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListInboundPlansResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listInboundPlans operation exceeds rate limit");
    }

    /**
     * (asynchronously) Provides a list of inbound plans with minimal information. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param pageSize The number of inbound plans to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param status The status of an inbound plan. (optional)
     * @param sortBy Sort by field. (optional)
     * @param sortOrder The sort order. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listInboundPlansAsync(
            Integer pageSize,
            String paginationToken,
            String status,
            String sortBy,
            String sortOrder,
            final ApiCallback<ListInboundPlansResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listInboundPlansValidateBeforeCall(
                pageSize, paginationToken, status, sortBy, sortOrder, progressListener, progressRequestListener);
        if (listInboundPlansBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListInboundPlansResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listInboundPlans operation exceeds rate limit");
    }

    private okhttp3.Call listItemComplianceDetailsCall(
            List<String> mskus,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/items/compliance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mskus != null) localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "mskus", mskus));
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listItemComplianceDetailsValidateBeforeCall(
            List<String> mskus,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'mskus' is set
        if (mskus == null) {
            throw new ApiException(
                    "Missing the required parameter 'mskus' when calling listItemComplianceDetails(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling listItemComplianceDetails(Async)");
        }

        return listItemComplianceDetailsCall(mskus, marketplaceId, progressListener, progressRequestListener);
    }

    /**
     * List the inbound compliance details for MSKUs in a given marketplace. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @param marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @return ListItemComplianceDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListItemComplianceDetailsResponse listItemComplianceDetails(List<String> mskus, String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<ListItemComplianceDetailsResponse> resp =
                listItemComplianceDetailsWithHttpInfo(mskus, marketplaceId);
        return resp.getData();
    }

    /**
     * List the inbound compliance details for MSKUs in a given marketplace. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @param marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @return ApiResponse&lt;ListItemComplianceDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListItemComplianceDetailsResponse> listItemComplianceDetailsWithHttpInfo(
            List<String> mskus, String marketplaceId) throws ApiException, LWAException {
        okhttp3.Call call = listItemComplianceDetailsValidateBeforeCall(mskus, marketplaceId, null, null);
        if (listItemComplianceDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListItemComplianceDetailsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listItemComplianceDetails operation exceeds rate limit");
    }

    /**
     * (asynchronously) List the inbound compliance details for MSKUs in a given marketplace. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @param marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listItemComplianceDetailsAsync(
            List<String> mskus, String marketplaceId, final ApiCallback<ListItemComplianceDetailsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listItemComplianceDetailsValidateBeforeCall(
                mskus, marketplaceId, progressListener, progressRequestListener);
        if (listItemComplianceDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListItemComplianceDetailsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listItemComplianceDetails operation exceeds rate limit");
    }

    private okhttp3.Call listPackingGroupBoxesCall(
            String inboundPlanId,
            String packingGroupId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll(
                                "\\{" + "packingGroupId" + "\\}", apiClient.escapeString(packingGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listPackingGroupBoxesValidateBeforeCall(
            String inboundPlanId,
            String packingGroupId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listPackingGroupBoxes(Async)");
        }
        // verify the required parameter 'packingGroupId' is set
        if (packingGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'packingGroupId' when calling listPackingGroupBoxes(Async)");
        }

        return listPackingGroupBoxesCall(
                inboundPlanId, packingGroupId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Retrieves a page of boxes from a given packing group. These boxes were previously provided through the
     * &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon
     * determines shipment splits. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param packingGroupId Identifier of a packing group. (required)
     * @param pageSize The number of packing group boxes to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListPackingGroupBoxesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListPackingGroupBoxesResponse listPackingGroupBoxes(
            String inboundPlanId, String packingGroupId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        ApiResponse<ListPackingGroupBoxesResponse> resp =
                listPackingGroupBoxesWithHttpInfo(inboundPlanId, packingGroupId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Retrieves a page of boxes from a given packing group. These boxes were previously provided through the
     * &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon
     * determines shipment splits. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param packingGroupId Identifier of a packing group. (required)
     * @param pageSize The number of packing group boxes to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListPackingGroupBoxesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListPackingGroupBoxesResponse> listPackingGroupBoxesWithHttpInfo(
            String inboundPlanId, String packingGroupId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listPackingGroupBoxesValidateBeforeCall(
                inboundPlanId, packingGroupId, pageSize, paginationToken, null, null);
        if (listPackingGroupBoxesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListPackingGroupBoxesResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listPackingGroupBoxes operation exceeds rate limit");
    }

    /**
     * (asynchronously) Retrieves a page of boxes from a given packing group. These boxes were previously provided
     * through the &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed
     * before Amazon determines shipment splits. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- |
     * | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param packingGroupId Identifier of a packing group. (required)
     * @param pageSize The number of packing group boxes to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listPackingGroupBoxesAsync(
            String inboundPlanId,
            String packingGroupId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListPackingGroupBoxesResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listPackingGroupBoxesValidateBeforeCall(
                inboundPlanId, packingGroupId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listPackingGroupBoxesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListPackingGroupBoxesResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listPackingGroupBoxes operation exceeds rate limit");
    }

    private okhttp3.Call listPackingGroupItemsCall(
            String inboundPlanId,
            String packingGroupId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll(
                                "\\{" + "packingGroupId" + "\\}", apiClient.escapeString(packingGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listPackingGroupItemsValidateBeforeCall(
            String inboundPlanId,
            String packingGroupId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listPackingGroupItems(Async)");
        }
        // verify the required parameter 'packingGroupId' is set
        if (packingGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'packingGroupId' when calling listPackingGroupItems(Async)");
        }

        return listPackingGroupItemsCall(
                inboundPlanId, packingGroupId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding
     * operation before packing group items can be listed. **Usage Plan:** | Rate (requests per second) | Burst | | ----
     * | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
     * that were applied to the requested operation, when available. The preceding table contains the default rate and
     * burst values for this operation. Selling partners whose business demands require higher throughput may have
     * higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits
     * in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param packingGroupId Identifier of a packing group. (required)
     * @param pageSize The number of packing group items to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListPackingGroupItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListPackingGroupItemsResponse listPackingGroupItems(
            String inboundPlanId, String packingGroupId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        ApiResponse<ListPackingGroupItemsResponse> resp =
                listPackingGroupItemsWithHttpInfo(inboundPlanId, packingGroupId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding
     * operation before packing group items can be listed. **Usage Plan:** | Rate (requests per second) | Burst | | ----
     * | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
     * that were applied to the requested operation, when available. The preceding table contains the default rate and
     * burst values for this operation. Selling partners whose business demands require higher throughput may have
     * higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits
     * in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param packingGroupId Identifier of a packing group. (required)
     * @param pageSize The number of packing group items to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListPackingGroupItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListPackingGroupItemsResponse> listPackingGroupItemsWithHttpInfo(
            String inboundPlanId, String packingGroupId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listPackingGroupItemsValidateBeforeCall(
                inboundPlanId, packingGroupId, pageSize, paginationToken, null, null);
        if (listPackingGroupItemsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListPackingGroupItemsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listPackingGroupItems operation exceeds rate limit");
    }

    /**
     * (asynchronously) Retrieves a page of items in a given packing group. Packing options must first be generated by
     * the corresponding operation before packing group items can be listed. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param packingGroupId Identifier of a packing group. (required)
     * @param pageSize The number of packing group items to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listPackingGroupItemsAsync(
            String inboundPlanId,
            String packingGroupId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListPackingGroupItemsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listPackingGroupItemsValidateBeforeCall(
                inboundPlanId, packingGroupId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listPackingGroupItemsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListPackingGroupItemsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listPackingGroupItems operation exceeds rate limit");
    }

    private okhttp3.Call listPackingOptionsCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listPackingOptionsValidateBeforeCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listPackingOptions(Async)");
        }

        return listPackingOptionsCall(
                inboundPlanId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the
     * corresponding operation before becoming available. **Usage Plan:** | Rate (requests per second) | Burst | | ----
     * | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of packing options to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListPackingOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListPackingOptionsResponse listPackingOptions(String inboundPlanId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        ApiResponse<ListPackingOptionsResponse> resp =
                listPackingOptionsWithHttpInfo(inboundPlanId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the
     * corresponding operation before becoming available. **Usage Plan:** | Rate (requests per second) | Burst | | ----
     * | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of packing options to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListPackingOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListPackingOptionsResponse> listPackingOptionsWithHttpInfo(
            String inboundPlanId, Integer pageSize, String paginationToken) throws ApiException, LWAException {
        okhttp3.Call call = listPackingOptionsValidateBeforeCall(inboundPlanId, pageSize, paginationToken, null, null);
        if (listPackingOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListPackingOptionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listPackingOptions operation exceeds rate limit");
    }

    /**
     * (asynchronously) Retrieves a list of all packing options for an inbound plan. Packing options must first be
     * generated by the corresponding operation before becoming available. **Usage Plan:** | Rate (requests per second)
     * | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of packing options to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listPackingOptionsAsync(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListPackingOptionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listPackingOptionsValidateBeforeCall(
                inboundPlanId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listPackingOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListPackingOptionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listPackingOptions operation exceeds rate limit");
    }

    private okhttp3.Call listPlacementOptionsCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listPlacementOptionsValidateBeforeCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listPlacementOptions(Async)");
        }

        return listPlacementOptionsCall(
                inboundPlanId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the
     * corresponding operation before becoming available. **Usage Plan:** | Rate (requests per second) | Burst | | ----
     * | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of placement options to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListPlacementOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListPlacementOptionsResponse listPlacementOptions(
            String inboundPlanId, Integer pageSize, String paginationToken) throws ApiException, LWAException {
        ApiResponse<ListPlacementOptionsResponse> resp =
                listPlacementOptionsWithHttpInfo(inboundPlanId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the
     * corresponding operation before becoming available. **Usage Plan:** | Rate (requests per second) | Burst | | ----
     * | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of placement options to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListPlacementOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListPlacementOptionsResponse> listPlacementOptionsWithHttpInfo(
            String inboundPlanId, Integer pageSize, String paginationToken) throws ApiException, LWAException {
        okhttp3.Call call =
                listPlacementOptionsValidateBeforeCall(inboundPlanId, pageSize, paginationToken, null, null);
        if (listPlacementOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListPlacementOptionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listPlacementOptions operation exceeds rate limit");
    }

    /**
     * (asynchronously) Provides a list of all placement options for an inbound plan. Placement options must first be
     * generated by the corresponding operation before becoming available. **Usage Plan:** | Rate (requests per second)
     * | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of placement options to return in the response matching the given query. (optional,
     *     default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listPlacementOptionsAsync(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListPlacementOptionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listPlacementOptionsValidateBeforeCall(
                inboundPlanId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listPlacementOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListPlacementOptionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listPlacementOptions operation exceeds rate limit");
    }

    private okhttp3.Call listPrepDetailsCall(
            String marketplaceId,
            List<String> mskus,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/items/prepDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (mskus != null) localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "mskus", mskus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listPrepDetailsValidateBeforeCall(
            String marketplaceId,
            List<String> mskus,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling listPrepDetails(Async)");
        }
        // verify the required parameter 'mskus' is set
        if (mskus == null) {
            throw new ApiException("Missing the required parameter 'mskus' when calling listPrepDetails(Async)");
        }

        return listPrepDetailsCall(marketplaceId, mskus, progressListener, progressRequestListener);
    }

    /**
     * Get preparation details for a list of MSKUs in a specified marketplace. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace ID. For a list of possible values, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @return ListPrepDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListPrepDetailsResponse listPrepDetails(String marketplaceId, List<String> mskus)
            throws ApiException, LWAException {
        ApiResponse<ListPrepDetailsResponse> resp = listPrepDetailsWithHttpInfo(marketplaceId, mskus);
        return resp.getData();
    }

    /**
     * Get preparation details for a list of MSKUs in a specified marketplace. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace ID. For a list of possible values, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @return ApiResponse&lt;ListPrepDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListPrepDetailsResponse> listPrepDetailsWithHttpInfo(String marketplaceId, List<String> mskus)
            throws ApiException, LWAException {
        okhttp3.Call call = listPrepDetailsValidateBeforeCall(marketplaceId, mskus, null, null);
        if (listPrepDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListPrepDetailsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listPrepDetails operation exceeds rate limit");
    }

    /**
     * (asynchronously) Get preparation details for a list of MSKUs in a specified marketplace. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace ID. For a list of possible values, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listPrepDetailsAsync(
            String marketplaceId, List<String> mskus, final ApiCallback<ListPrepDetailsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                listPrepDetailsValidateBeforeCall(marketplaceId, mskus, progressListener, progressRequestListener);
        if (listPrepDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListPrepDetailsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listPrepDetails operation exceeds rate limit");
    }

    private okhttp3.Call listShipmentBoxesCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listShipmentBoxesValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listShipmentBoxes(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling listShipmentBoxes(Async)");
        }

        return listShipmentBoxesCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Provides a paginated list of box packages in a shipment. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table contains the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListShipmentBoxesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListShipmentBoxesResponse listShipmentBoxes(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        ApiResponse<ListShipmentBoxesResponse> resp =
                listShipmentBoxesWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Provides a paginated list of box packages in a shipment. **Usage Plan:** | Rate (requests per second) | Burst | |
     * ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table contains the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListShipmentBoxesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListShipmentBoxesResponse> listShipmentBoxesWithHttpInfo(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        okhttp3.Call call =
                listShipmentBoxesValidateBeforeCall(inboundPlanId, shipmentId, pageSize, paginationToken, null, null);
        if (listShipmentBoxesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListShipmentBoxesResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listShipmentBoxes operation exceeds rate limit");
    }

    /**
     * (asynchronously) Provides a paginated list of box packages in a shipment. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listShipmentBoxesAsync(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListShipmentBoxesResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listShipmentBoxesValidateBeforeCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listShipmentBoxesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListShipmentBoxesResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listShipmentBoxes operation exceeds rate limit");
    }

    private okhttp3.Call listShipmentContentUpdatePreviewsCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listShipmentContentUpdatePreviewsValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listShipmentContentUpdatePreviews(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling listShipmentContentUpdatePreviews(Async)");
        }

        return listShipmentContentUpdatePreviewsCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update
     * preview is a summary of the requested shipment content changes along with the transportation cost implications of
     * the change that can only be confirmed prior to the expiry date specified. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of content update previews to return. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListShipmentContentUpdatePreviewsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListShipmentContentUpdatePreviewsResponse listShipmentContentUpdatePreviews(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        ApiResponse<ListShipmentContentUpdatePreviewsResponse> resp =
                listShipmentContentUpdatePreviewsWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update
     * preview is a summary of the requested shipment content changes along with the transportation cost implications of
     * the change that can only be confirmed prior to the expiry date specified. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of content update previews to return. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListShipmentContentUpdatePreviewsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListShipmentContentUpdatePreviewsResponse> listShipmentContentUpdatePreviewsWithHttpInfo(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listShipmentContentUpdatePreviewsValidateBeforeCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, null, null);
        if (listShipmentContentUpdatePreviewsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListShipmentContentUpdatePreviewsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else
            throw new ApiException.RateLimitExceeded("listShipmentContentUpdatePreviews operation exceeds rate limit");
    }

    /**
     * (asynchronously) Retrieve a paginated list of shipment content update previews for a given shipment. The shipment
     * content update preview is a summary of the requested shipment content changes along with the transportation cost
     * implications of the change that can only be confirmed prior to the expiry date specified. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of content update previews to return. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listShipmentContentUpdatePreviewsAsync(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListShipmentContentUpdatePreviewsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listShipmentContentUpdatePreviewsValidateBeforeCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listShipmentContentUpdatePreviewsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListShipmentContentUpdatePreviewsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else
            throw new ApiException.RateLimitExceeded("listShipmentContentUpdatePreviews operation exceeds rate limit");
    }

    private okhttp3.Call listShipmentItemsCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listShipmentItemsValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listShipmentItems(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling listShipmentItems(Async)");
        }

        return listShipmentItemsCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Provides a paginated list of item packages in a shipment. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table contains the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListShipmentItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListShipmentItemsResponse listShipmentItems(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        ApiResponse<ListShipmentItemsResponse> resp =
                listShipmentItemsWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Provides a paginated list of item packages in a shipment. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table contains the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListShipmentItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListShipmentItemsResponse> listShipmentItemsWithHttpInfo(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        okhttp3.Call call =
                listShipmentItemsValidateBeforeCall(inboundPlanId, shipmentId, pageSize, paginationToken, null, null);
        if (listShipmentItemsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListShipmentItemsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listShipmentItems operation exceeds rate limit");
    }

    /**
     * (asynchronously) Provides a paginated list of item packages in a shipment. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listShipmentItemsAsync(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListShipmentItemsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listShipmentItemsValidateBeforeCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listShipmentItemsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListShipmentItemsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listShipmentItems operation exceeds rate limit");
    }

    private okhttp3.Call listShipmentPalletsCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/pallets"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listShipmentPalletsValidateBeforeCall(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listShipmentPallets(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling listShipmentPallets(Async)");
        }

        return listShipmentPalletsCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
    }

    /**
     * Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the
     * related details are provided after generating Less-Than-Truckload (LTL) carrier shipments. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of pallets to return in the response matching the given query. (optional, default to
     *     10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ListShipmentPalletsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListShipmentPalletsResponse listShipmentPallets(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        ApiResponse<ListShipmentPalletsResponse> resp =
                listShipmentPalletsWithHttpInfo(inboundPlanId, shipmentId, pageSize, paginationToken);
        return resp.getData();
    }

    /**
     * Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the
     * related details are provided after generating Less-Than-Truckload (LTL) carrier shipments. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table contains the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of pallets to return in the response matching the given query. (optional, default to
     *     10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @return ApiResponse&lt;ListShipmentPalletsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListShipmentPalletsResponse> listShipmentPalletsWithHttpInfo(
            String inboundPlanId, String shipmentId, Integer pageSize, String paginationToken)
            throws ApiException, LWAException {
        okhttp3.Call call =
                listShipmentPalletsValidateBeforeCall(inboundPlanId, shipmentId, pageSize, paginationToken, null, null);
        if (listShipmentPalletsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListShipmentPalletsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listShipmentPallets operation exceeds rate limit");
    }

    /**
     * (asynchronously) Provides a paginated list of pallet packages in a shipment. A palletized shipment will have
     * pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param pageSize The number of pallets to return in the response matching the given query. (optional, default to
     *     10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listShipmentPalletsAsync(
            String inboundPlanId,
            String shipmentId,
            Integer pageSize,
            String paginationToken,
            final ApiCallback<ListShipmentPalletsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listShipmentPalletsValidateBeforeCall(
                inboundPlanId, shipmentId, pageSize, paginationToken, progressListener, progressRequestListener);
        if (listShipmentPalletsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListShipmentPalletsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listShipmentPallets operation exceeds rate limit");
    }

    private okhttp3.Call listTransportationOptionsCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            String placementOptionId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (paginationToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("paginationToken", paginationToken));
        if (placementOptionId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("placementOptionId", placementOptionId));
        if (shipmentId != null) localVarQueryParams.addAll(apiClient.parameterToPair("shipmentId", shipmentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call listTransportationOptionsValidateBeforeCall(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            String placementOptionId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling listTransportationOptions(Async)");
        }

        return listTransportationOptionsCall(
                inboundPlanId,
                pageSize,
                paginationToken,
                placementOptionId,
                shipmentId,
                progressListener,
                progressRequestListener);
    }

    /**
     * Retrieves all transportation options for a shipment. Transportation options must first be generated by the
     * &#x60;generateTransportationOptions&#x60; operation before becoming available. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of transportation options to return in the response matching the given query.
     *     (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param placementOptionId The placement option to get transportation options for. Either
     *     &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param shipmentId The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or
     *     &#x60;shipmentId&#x60; must be specified. (optional)
     * @return ListTransportationOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListTransportationOptionsResponse listTransportationOptions(
            String inboundPlanId, Integer pageSize, String paginationToken, String placementOptionId, String shipmentId)
            throws ApiException, LWAException {
        ApiResponse<ListTransportationOptionsResponse> resp = listTransportationOptionsWithHttpInfo(
                inboundPlanId, pageSize, paginationToken, placementOptionId, shipmentId);
        return resp.getData();
    }

    /**
     * Retrieves all transportation options for a shipment. Transportation options must first be generated by the
     * &#x60;generateTransportationOptions&#x60; operation before becoming available. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of transportation options to return in the response matching the given query.
     *     (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param placementOptionId The placement option to get transportation options for. Either
     *     &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param shipmentId The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or
     *     &#x60;shipmentId&#x60; must be specified. (optional)
     * @return ApiResponse&lt;ListTransportationOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListTransportationOptionsResponse> listTransportationOptionsWithHttpInfo(
            String inboundPlanId, Integer pageSize, String paginationToken, String placementOptionId, String shipmentId)
            throws ApiException, LWAException {
        okhttp3.Call call = listTransportationOptionsValidateBeforeCall(
                inboundPlanId, pageSize, paginationToken, placementOptionId, shipmentId, null, null);
        if (listTransportationOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListTransportationOptionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listTransportationOptions operation exceeds rate limit");
    }

    /**
     * (asynchronously) Retrieves all transportation options for a shipment. Transportation options must first be
     * generated by the &#x60;generateTransportationOptions&#x60; operation before becoming available. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table contains the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param pageSize The number of transportation options to return in the response matching the given query.
     *     (optional, default to 10)
     * @param paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value
     *     of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the
     *     token value from the query parameter the API returns the first page of the result. (optional)
     * @param placementOptionId The placement option to get transportation options for. Either
     *     &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param shipmentId The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or
     *     &#x60;shipmentId&#x60; must be specified. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listTransportationOptionsAsync(
            String inboundPlanId,
            Integer pageSize,
            String paginationToken,
            String placementOptionId,
            String shipmentId,
            final ApiCallback<ListTransportationOptionsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listTransportationOptionsValidateBeforeCall(
                inboundPlanId,
                pageSize,
                paginationToken,
                placementOptionId,
                shipmentId,
                progressListener,
                progressRequestListener);
        if (listTransportationOptionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListTransportationOptionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listTransportationOptions operation exceeds rate limit");
    }

    private okhttp3.Call scheduleSelfShipAppointmentCall(
            ScheduleSelfShipAppointmentRequest body,
            String inboundPlanId,
            String shipmentId,
            String slotId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()))
                        .replaceAll("\\{" + "slotId" + "\\}", apiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call scheduleSelfShipAppointmentValidateBeforeCall(
            ScheduleSelfShipAppointmentRequest body,
            String inboundPlanId,
            String shipmentId,
            String slotId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling scheduleSelfShipAppointment(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling scheduleSelfShipAppointment(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling scheduleSelfShipAppointment(Async)");
        }
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException(
                    "Missing the required parameter 'slotId' when calling scheduleSelfShipAppointment(Async)");
        }

        return scheduleSelfShipAppointmentCall(
                body, inboundPlanId, shipmentId, slotId, progressListener, progressRequestListener);
    }

    /**
     * Confirms or reschedules a self-ship appointment slot against a shipment. Only available in the following
     * [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param slotId An identifier to a self-ship appointment slot. (required)
     * @return ScheduleSelfShipAppointmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ScheduleSelfShipAppointmentResponse scheduleSelfShipAppointment(
            ScheduleSelfShipAppointmentRequest body, String inboundPlanId, String shipmentId, String slotId)
            throws ApiException, LWAException {
        ApiResponse<ScheduleSelfShipAppointmentResponse> resp =
                scheduleSelfShipAppointmentWithHttpInfo(body, inboundPlanId, shipmentId, slotId);
        return resp.getData();
    }

    /**
     * Confirms or reschedules a self-ship appointment slot against a shipment. Only available in the following
     * [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may see higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param slotId An identifier to a self-ship appointment slot. (required)
     * @return ApiResponse&lt;ScheduleSelfShipAppointmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ScheduleSelfShipAppointmentResponse> scheduleSelfShipAppointmentWithHttpInfo(
            ScheduleSelfShipAppointmentRequest body, String inboundPlanId, String shipmentId, String slotId)
            throws ApiException, LWAException {
        okhttp3.Call call =
                scheduleSelfShipAppointmentValidateBeforeCall(body, inboundPlanId, shipmentId, slotId, null, null);
        if (scheduleSelfShipAppointmentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ScheduleSelfShipAppointmentResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("scheduleSelfShipAppointment operation exceeds rate limit");
    }

    /**
     * (asynchronously) Confirms or reschedules a self-ship appointment slot against a shipment. Only available in the
     * following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may see higher rate and burst values
     * than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param slotId An identifier to a self-ship appointment slot. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call scheduleSelfShipAppointmentAsync(
            ScheduleSelfShipAppointmentRequest body,
            String inboundPlanId,
            String shipmentId,
            String slotId,
            final ApiCallback<ScheduleSelfShipAppointmentResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = scheduleSelfShipAppointmentValidateBeforeCall(
                body, inboundPlanId, shipmentId, slotId, progressListener, progressRequestListener);
        if (scheduleSelfShipAppointmentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ScheduleSelfShipAppointmentResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("scheduleSelfShipAppointment operation exceeds rate limit");
    }

    private okhttp3.Call setPackingInformationCall(
            SetPackingInformationRequest body,
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call setPackingInformationValidateBeforeCall(
            SetPackingInformationRequest body,
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setPackingInformation(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling setPackingInformation(Async)");
        }

        return setPackingInformationCall(body, inboundPlanId, progressListener, progressRequestListener);
    }

    /**
     * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate
     * the box level information required for planning and transportation estimates. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return SetPackingInformationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public SetPackingInformationResponse setPackingInformation(SetPackingInformationRequest body, String inboundPlanId)
            throws ApiException, LWAException {
        ApiResponse<SetPackingInformationResponse> resp = setPackingInformationWithHttpInfo(body, inboundPlanId);
        return resp.getData();
    }

    /**
     * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate
     * the box level information required for planning and transportation estimates. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * contains the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return ApiResponse&lt;SetPackingInformationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<SetPackingInformationResponse> setPackingInformationWithHttpInfo(
            SetPackingInformationRequest body, String inboundPlanId) throws ApiException, LWAException {
        okhttp3.Call call = setPackingInformationValidateBeforeCall(body, inboundPlanId, null, null);
        if (setPackingInformationBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<SetPackingInformationResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("setPackingInformation operation exceeds rate limit");
    }

    /**
     * (asynchronously) Sets packing information for an inbound plan. This should be called after an inbound plan is
     * created to populate the box level information required for planning and transportation estimates. **Usage Plan:**
     * | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table contains the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call setPackingInformationAsync(
            SetPackingInformationRequest body,
            String inboundPlanId,
            final ApiCallback<SetPackingInformationResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                setPackingInformationValidateBeforeCall(body, inboundPlanId, progressListener, progressRequestListener);
        if (setPackingInformationBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<SetPackingInformationResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("setPackingInformation operation exceeds rate limit");
    }

    private okhttp3.Call setPrepDetailsCall(
            SetPrepDetailsRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/items/prepDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call setPrepDetailsValidateBeforeCall(
            SetPrepDetailsRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setPrepDetails(Async)");
        }

        return setPrepDetailsCall(body, progressListener, progressRequestListener);
    }

    /**
     * Set the preparation details for a list of MSKUs in a specified marketplace. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;setPrepDetails&#x60;. (required)
     * @return SetPrepDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public SetPrepDetailsResponse setPrepDetails(SetPrepDetailsRequest body) throws ApiException, LWAException {
        ApiResponse<SetPrepDetailsResponse> resp = setPrepDetailsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Set the preparation details for a list of MSKUs in a specified marketplace. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table contains
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;setPrepDetails&#x60;. (required)
     * @return ApiResponse&lt;SetPrepDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<SetPrepDetailsResponse> setPrepDetailsWithHttpInfo(SetPrepDetailsRequest body)
            throws ApiException, LWAException {
        okhttp3.Call call = setPrepDetailsValidateBeforeCall(body, null, null);
        if (setPrepDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<SetPrepDetailsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("setPrepDetails operation exceeds rate limit");
    }

    /**
     * (asynchronously) Set the preparation details for a list of MSKUs in a specified marketplace. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table contains the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;setPrepDetails&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call setPrepDetailsAsync(
            SetPrepDetailsRequest body, final ApiCallback<SetPrepDetailsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = setPrepDetailsValidateBeforeCall(body, progressListener, progressRequestListener);
        if (setPrepDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<SetPrepDetailsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("setPrepDetails operation exceeds rate limit");
    }

    private okhttp3.Call updateInboundPlanNameCall(
            UpdateInboundPlanNameRequest body,
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call updateInboundPlanNameValidateBeforeCall(
            UpdateInboundPlanNameRequest body,
            String inboundPlanId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateInboundPlanName(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling updateInboundPlanName(Async)");
        }

        return updateInboundPlanNameCall(body, inboundPlanId, progressListener, progressRequestListener);
    }

    /**
     * Updates the name of an existing inbound plan. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public void updateInboundPlanName(UpdateInboundPlanNameRequest body, String inboundPlanId)
            throws ApiException, LWAException {
        updateInboundPlanNameWithHttpInfo(body, inboundPlanId);
    }

    /**
     * Updates the name of an existing inbound plan. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Void> updateInboundPlanNameWithHttpInfo(UpdateInboundPlanNameRequest body, String inboundPlanId)
            throws ApiException, LWAException {
        okhttp3.Call call = updateInboundPlanNameValidateBeforeCall(body, inboundPlanId, null, null);
        if (updateInboundPlanNameBucket.tryConsume(1)) {
            return apiClient.execute(call);
        } else throw new ApiException.RateLimitExceeded("updateInboundPlanName operation exceeds rate limit");
    }

    /**
     * (asynchronously) Updates the name of an existing inbound plan. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateInboundPlanNameAsync(
            UpdateInboundPlanNameRequest body, String inboundPlanId, final ApiCallback<Void> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                updateInboundPlanNameValidateBeforeCall(body, inboundPlanId, progressListener, progressRequestListener);
        if (updateInboundPlanNameBucket.tryConsume(1)) {
            apiClient.executeAsync(call, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("updateInboundPlanName operation exceeds rate limit");
    }

    private okhttp3.Call updateItemComplianceDetailsCall(
            UpdateItemComplianceDetailsRequest body,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/items/compliance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call updateItemComplianceDetailsValidateBeforeCall(
            UpdateItemComplianceDetailsRequest body,
            String marketplaceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling updateItemComplianceDetails(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling updateItemComplianceDetails(Async)");
        }

        return updateItemComplianceDetailsCall(body, marketplaceId, progressListener, progressRequestListener);
    }

    /**
     * Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN -
     * A21TJRUUN4KGV) marketplace compliance validation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     * @param marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @return UpdateItemComplianceDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public UpdateItemComplianceDetailsResponse updateItemComplianceDetails(
            UpdateItemComplianceDetailsRequest body, String marketplaceId) throws ApiException, LWAException {
        ApiResponse<UpdateItemComplianceDetailsResponse> resp =
                updateItemComplianceDetailsWithHttpInfo(body, marketplaceId);
        return resp.getData();
    }

    /**
     * Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN -
     * A21TJRUUN4KGV) marketplace compliance validation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     * @param marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @return ApiResponse&lt;UpdateItemComplianceDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<UpdateItemComplianceDetailsResponse> updateItemComplianceDetailsWithHttpInfo(
            UpdateItemComplianceDetailsRequest body, String marketplaceId) throws ApiException, LWAException {
        okhttp3.Call call = updateItemComplianceDetailsValidateBeforeCall(body, marketplaceId, null, null);
        if (updateItemComplianceDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<UpdateItemComplianceDetailsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("updateItemComplianceDetails operation exceeds rate limit");
    }

    /**
     * (asynchronously) Update compliance details for a list of MSKUs. The details provided here are only used for the
     * India (IN - A21TJRUUN4KGV) marketplace compliance validation. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 6 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     * @param marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace
     *     IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateItemComplianceDetailsAsync(
            UpdateItemComplianceDetailsRequest body,
            String marketplaceId,
            final ApiCallback<UpdateItemComplianceDetailsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = updateItemComplianceDetailsValidateBeforeCall(
                body, marketplaceId, progressListener, progressRequestListener);
        if (updateItemComplianceDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<UpdateItemComplianceDetailsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("updateItemComplianceDetails operation exceeds rate limit");
    }

    private okhttp3.Call updateShipmentNameCall(
            UpdateShipmentNameRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name"
                .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call updateShipmentNameValidateBeforeCall(
            UpdateShipmentNameRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateShipmentName(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling updateShipmentName(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling updateShipmentName(Async)");
        }

        return updateShipmentNameCall(body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
    }

    /**
     * Updates the name of an existing shipment. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- |
     * | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public void updateShipmentName(UpdateShipmentNameRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        updateShipmentNameWithHttpInfo(body, inboundPlanId, shipmentId);
    }

    /**
     * Updates the name of an existing shipment. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- |
     * | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Void> updateShipmentNameWithHttpInfo(
            UpdateShipmentNameRequest body, String inboundPlanId, String shipmentId) throws ApiException, LWAException {
        okhttp3.Call call = updateShipmentNameValidateBeforeCall(body, inboundPlanId, shipmentId, null, null);
        if (updateShipmentNameBucket.tryConsume(1)) {
            return apiClient.execute(call);
        } else throw new ApiException.RateLimitExceeded("updateShipmentName operation exceeds rate limit");
    }

    /**
     * (asynchronously) Updates the name of an existing shipment. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table contains the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateShipmentNameAsync(
            UpdateShipmentNameRequest body, String inboundPlanId, String shipmentId, final ApiCallback<Void> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = updateShipmentNameValidateBeforeCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
        if (updateShipmentNameBucket.tryConsume(1)) {
            apiClient.executeAsync(call, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("updateShipmentName operation exceeds rate limit");
    }

    private okhttp3.Call updateShipmentSourceAddressCall(
            UpdateShipmentSourceAddressRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call updateShipmentSourceAddressValidateBeforeCall(
            UpdateShipmentSourceAddressRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling updateShipmentSourceAddress(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling updateShipmentSourceAddress(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling updateShipmentSourceAddress(Async)");
        }

        return updateShipmentSourceAddressCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
    }

    /**
     * Updates the source address of an existing shipment. The shipment source address can only be updated prior to the
     * confirmation of the shipment carriers. As a result of the updated source address, existing transportation options
     * will be invalidated and will need to be regenerated to capture the potential difference in transportation options
     * and quotes due to the new source address. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- |
     * | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return UpdateShipmentSourceAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public UpdateShipmentSourceAddressResponse updateShipmentSourceAddress(
            UpdateShipmentSourceAddressRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        ApiResponse<UpdateShipmentSourceAddressResponse> resp =
                updateShipmentSourceAddressWithHttpInfo(body, inboundPlanId, shipmentId);
        return resp.getData();
    }

    /**
     * Updates the source address of an existing shipment. The shipment source address can only be updated prior to the
     * confirmation of the shipment carriers. As a result of the updated source address, existing transportation options
     * will be invalidated and will need to be regenerated to capture the potential difference in transportation options
     * and quotes due to the new source address. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- |
     * | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return ApiResponse&lt;UpdateShipmentSourceAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<UpdateShipmentSourceAddressResponse> updateShipmentSourceAddressWithHttpInfo(
            UpdateShipmentSourceAddressRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        okhttp3.Call call = updateShipmentSourceAddressValidateBeforeCall(body, inboundPlanId, shipmentId, null, null);
        if (updateShipmentSourceAddressBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<UpdateShipmentSourceAddressResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("updateShipmentSourceAddress operation exceeds rate limit");
    }

    /**
     * (asynchronously) Updates the source address of an existing shipment. The shipment source address can only be
     * updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing
     * transportation options will be invalidated and will need to be regenerated to capture the potential difference in
     * transportation options and quotes due to the new source address. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table contains the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateShipmentSourceAddressAsync(
            UpdateShipmentSourceAddressRequest body,
            String inboundPlanId,
            String shipmentId,
            final ApiCallback<UpdateShipmentSourceAddressResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = updateShipmentSourceAddressValidateBeforeCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
        if (updateShipmentSourceAddressBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<UpdateShipmentSourceAddressResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("updateShipmentSourceAddress operation exceeds rate limit");
    }

    private okhttp3.Call updateShipmentTrackingDetailsCall(
            UpdateShipmentTrackingDetailsRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath =
                "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails"
                        .replaceAll("\\{" + "inboundPlanId" + "\\}", apiClient.escapeString(inboundPlanId.toString()))
                        .replaceAll("\\{" + "shipmentId" + "\\}", apiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call updateShipmentTrackingDetailsValidateBeforeCall(
            UpdateShipmentTrackingDetailsRequest body,
            String inboundPlanId,
            String shipmentId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling updateShipmentTrackingDetails(Async)");
        }
        // verify the required parameter 'inboundPlanId' is set
        if (inboundPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'inboundPlanId' when calling updateShipmentTrackingDetails(Async)");
        }
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'shipmentId' when calling updateShipmentTrackingDetails(Async)");
        }

        return updateShipmentTrackingDetailsCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
    }

    /**
     * Updates a shipment&#x27;s tracking details. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ----
     * | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return UpdateShipmentTrackingDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public UpdateShipmentTrackingDetailsResponse updateShipmentTrackingDetails(
            UpdateShipmentTrackingDetailsRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        ApiResponse<UpdateShipmentTrackingDetailsResponse> resp =
                updateShipmentTrackingDetailsWithHttpInfo(body, inboundPlanId, shipmentId);
        return resp.getData();
    }

    /**
     * Updates a shipment&#x27;s tracking details. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ----
     * | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table contains the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @return ApiResponse&lt;UpdateShipmentTrackingDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<UpdateShipmentTrackingDetailsResponse> updateShipmentTrackingDetailsWithHttpInfo(
            UpdateShipmentTrackingDetailsRequest body, String inboundPlanId, String shipmentId)
            throws ApiException, LWAException {
        okhttp3.Call call =
                updateShipmentTrackingDetailsValidateBeforeCall(body, inboundPlanId, shipmentId, null, null);
        if (updateShipmentTrackingDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<UpdateShipmentTrackingDetailsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("updateShipmentTrackingDetails operation exceeds rate limit");
    }

    /**
     * (asynchronously) Updates a shipment&#x27;s tracking details. **Usage Plan:** | Rate (requests per second) | Burst
     * | | ---- | ---- | | 2 | 2 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table contains the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     * @param inboundPlanId Identifier of an inbound plan. (required)
     * @param shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateShipmentTrackingDetailsAsync(
            UpdateShipmentTrackingDetailsRequest body,
            String inboundPlanId,
            String shipmentId,
            final ApiCallback<UpdateShipmentTrackingDetailsResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = updateShipmentTrackingDetailsValidateBeforeCall(
                body, inboundPlanId, shipmentId, progressListener, progressRequestListener);
        if (updateShipmentTrackingDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<UpdateShipmentTrackingDetailsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("updateShipmentTrackingDetails operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public FbaInboundApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new FbaInboundApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint));
        }
    }
}
