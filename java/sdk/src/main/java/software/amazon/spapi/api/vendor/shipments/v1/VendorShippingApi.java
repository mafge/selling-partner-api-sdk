/*
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.vendor.shipments.v1;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.vendor.shipments.v1.GetShipmentDetailsResponse;
import software.amazon.spapi.models.vendor.shipments.v1.GetShipmentLabels;
import software.amazon.spapi.models.vendor.shipments.v1.SubmitShipmentConfirmationsRequest;
import software.amazon.spapi.models.vendor.shipments.v1.SubmitShipmentConfirmationsResponse;
import software.amazon.spapi.models.vendor.shipments.v1.SubmitShipments;

public class VendorShippingApi {
  private ApiClient apiClient;

  VendorShippingApi() {
    this(Configuration.getDefaultApiClient());
  }

  public VendorShippingApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for getShipmentDetails
   *
   * @param limit The limit to the number of records returned. Default value is 50 records.
   *     (optional)
   * @param sortOrder Sort in ascending or descending order by purchase order creation date.
   *     (optional)
   * @param nextToken Used for pagination when there are more shipments than the specified result
   *     size limit. (optional)
   * @param createdAfter Get Shipment Details that became available after this timestamp will be
   *     included in the result. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param createdBefore Get Shipment Details that became available before this timestamp will be
   *     included in the result. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentConfirmedBefore Get Shipment Details by passing Shipment confirmed create Date
   *     Before. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentConfirmedAfter Get Shipment Details by passing Shipment confirmed create Date
   *     After. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param packageLabelCreatedBefore Get Shipment Details by passing Package label create Date by
   *     buyer. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param packageLabelCreatedAfter Get Shipment Details by passing Package label create Date After
   *     by buyer. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shippedBefore Get Shipment Details by passing Shipped Date Before. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shippedAfter Get Shipment Details by passing Shipped Date After. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param estimatedDeliveryBefore Get Shipment Details by passing Estimated Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param estimatedDeliveryAfter Get Shipment Details by passing Estimated Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentDeliveryBefore Get Shipment Details by passing Shipment Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentDeliveryAfter Get Shipment Details by passing Shipment Delivery Date After. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param requestedPickUpBefore Get Shipment Details by passing Before Requested pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param requestedPickUpAfter Get Shipment Details by passing After Requested pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param scheduledPickUpBefore Get Shipment Details by passing Before scheduled pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param scheduledPickUpAfter Get Shipment Details by passing After Scheduled pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param currentShipmentStatus Get Shipment Details by passing Current shipment status.
   *     (optional)
   * @param vendorShipmentIdentifier Get Shipment Details by passing Vendor Shipment ID (optional)
   * @param buyerReferenceNumber Get Shipment Details by passing buyer Reference ID (optional)
   * @param buyerWarehouseCode Get Shipping Details based on buyer warehouse code. This value should
   *     be same as &#x27;shipToParty.partyId&#x27; in the Shipment. (optional)
   * @param sellerWarehouseCode Get Shipping Details based on vendor warehouse code. This value
   *     should be same as &#x27;sellingParty.partyId&#x27; in the Shipment. (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call getShipmentDetailsCall(
      Long limit,
      String sortOrder,
      String nextToken,
      OffsetDateTime createdAfter,
      OffsetDateTime createdBefore,
      OffsetDateTime shipmentConfirmedBefore,
      OffsetDateTime shipmentConfirmedAfter,
      OffsetDateTime packageLabelCreatedBefore,
      OffsetDateTime packageLabelCreatedAfter,
      OffsetDateTime shippedBefore,
      OffsetDateTime shippedAfter,
      OffsetDateTime estimatedDeliveryBefore,
      OffsetDateTime estimatedDeliveryAfter,
      OffsetDateTime shipmentDeliveryBefore,
      OffsetDateTime shipmentDeliveryAfter,
      OffsetDateTime requestedPickUpBefore,
      OffsetDateTime requestedPickUpAfter,
      OffsetDateTime scheduledPickUpBefore,
      OffsetDateTime scheduledPickUpAfter,
      String currentShipmentStatus,
      String vendorShipmentIdentifier,
      String buyerReferenceNumber,
      String buyerWarehouseCode,
      String sellerWarehouseCode,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/vendor/shipping/v1/shipments";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (limit != null) localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    if (sortOrder != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
    if (nextToken != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));
    if (createdAfter != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
    if (createdBefore != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
    if (shipmentConfirmedBefore != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("shipmentConfirmedBefore", shipmentConfirmedBefore));
    if (shipmentConfirmedAfter != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("shipmentConfirmedAfter", shipmentConfirmedAfter));
    if (packageLabelCreatedBefore != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("packageLabelCreatedBefore", packageLabelCreatedBefore));
    if (packageLabelCreatedAfter != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("packageLabelCreatedAfter", packageLabelCreatedAfter));
    if (shippedBefore != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("shippedBefore", shippedBefore));
    if (shippedAfter != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("shippedAfter", shippedAfter));
    if (estimatedDeliveryBefore != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("estimatedDeliveryBefore", estimatedDeliveryBefore));
    if (estimatedDeliveryAfter != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("estimatedDeliveryAfter", estimatedDeliveryAfter));
    if (shipmentDeliveryBefore != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("shipmentDeliveryBefore", shipmentDeliveryBefore));
    if (shipmentDeliveryAfter != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("shipmentDeliveryAfter", shipmentDeliveryAfter));
    if (requestedPickUpBefore != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("requestedPickUpBefore", requestedPickUpBefore));
    if (requestedPickUpAfter != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("requestedPickUpAfter", requestedPickUpAfter));
    if (scheduledPickUpBefore != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("scheduledPickUpBefore", scheduledPickUpBefore));
    if (scheduledPickUpAfter != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("scheduledPickUpAfter", scheduledPickUpAfter));
    if (currentShipmentStatus != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("currentShipmentStatus", currentShipmentStatus));
    if (vendorShipmentIdentifier != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("vendorShipmentIdentifier", vendorShipmentIdentifier));
    if (buyerReferenceNumber != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("buyerReferenceNumber", buyerReferenceNumber));
    if (buyerWarehouseCode != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("buyerWarehouseCode", buyerWarehouseCode));
    if (sellerWarehouseCode != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("sellerWarehouseCode", sellerWarehouseCode));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                    throws IOException {
                  okhttp3.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getShipmentDetailsValidateBeforeCall(
      Long limit,
      String sortOrder,
      String nextToken,
      OffsetDateTime createdAfter,
      OffsetDateTime createdBefore,
      OffsetDateTime shipmentConfirmedBefore,
      OffsetDateTime shipmentConfirmedAfter,
      OffsetDateTime packageLabelCreatedBefore,
      OffsetDateTime packageLabelCreatedAfter,
      OffsetDateTime shippedBefore,
      OffsetDateTime shippedAfter,
      OffsetDateTime estimatedDeliveryBefore,
      OffsetDateTime estimatedDeliveryAfter,
      OffsetDateTime shipmentDeliveryBefore,
      OffsetDateTime shipmentDeliveryAfter,
      OffsetDateTime requestedPickUpBefore,
      OffsetDateTime requestedPickUpAfter,
      OffsetDateTime scheduledPickUpBefore,
      OffsetDateTime scheduledPickUpAfter,
      String currentShipmentStatus,
      String vendorShipmentIdentifier,
      String buyerReferenceNumber,
      String buyerWarehouseCode,
      String sellerWarehouseCode,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {

    okhttp3.Call call =
        getShipmentDetailsCall(
            limit,
            sortOrder,
            nextToken,
            createdAfter,
            createdBefore,
            shipmentConfirmedBefore,
            shipmentConfirmedAfter,
            packageLabelCreatedBefore,
            packageLabelCreatedAfter,
            shippedBefore,
            shippedAfter,
            estimatedDeliveryBefore,
            estimatedDeliveryAfter,
            shipmentDeliveryBefore,
            shipmentDeliveryAfter,
            requestedPickUpBefore,
            requestedPickUpAfter,
            scheduledPickUpBefore,
            scheduledPickUpAfter,
            currentShipmentStatus,
            vendorShipmentIdentifier,
            buyerReferenceNumber,
            buyerWarehouseCode,
            sellerWarehouseCode,
            progressListener,
            progressRequestListener);
    return call;
  }

  /**
   * GetShipmentDetails Returns the Details about Shipment, Carrier Details, status of the shipment,
   * container details and other details related to shipment based on the filter parameters value
   * that you specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 |
   * 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
   * that were applied to the requested operation, when available. The table above indicates the
   * default rate and burst values for this operation. Selling partners whose business demands
   * require higher throughput may see higher rate and burst values than those shown here. For more
   * information, see [Usage Plans and Rate Limits in the Selling Partner
   * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param limit The limit to the number of records returned. Default value is 50 records.
   *     (optional)
   * @param sortOrder Sort in ascending or descending order by purchase order creation date.
   *     (optional)
   * @param nextToken Used for pagination when there are more shipments than the specified result
   *     size limit. (optional)
   * @param createdAfter Get Shipment Details that became available after this timestamp will be
   *     included in the result. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param createdBefore Get Shipment Details that became available before this timestamp will be
   *     included in the result. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentConfirmedBefore Get Shipment Details by passing Shipment confirmed create Date
   *     Before. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentConfirmedAfter Get Shipment Details by passing Shipment confirmed create Date
   *     After. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param packageLabelCreatedBefore Get Shipment Details by passing Package label create Date by
   *     buyer. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param packageLabelCreatedAfter Get Shipment Details by passing Package label create Date After
   *     by buyer. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shippedBefore Get Shipment Details by passing Shipped Date Before. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shippedAfter Get Shipment Details by passing Shipped Date After. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param estimatedDeliveryBefore Get Shipment Details by passing Estimated Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param estimatedDeliveryAfter Get Shipment Details by passing Estimated Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentDeliveryBefore Get Shipment Details by passing Shipment Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentDeliveryAfter Get Shipment Details by passing Shipment Delivery Date After. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param requestedPickUpBefore Get Shipment Details by passing Before Requested pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param requestedPickUpAfter Get Shipment Details by passing After Requested pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param scheduledPickUpBefore Get Shipment Details by passing Before scheduled pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param scheduledPickUpAfter Get Shipment Details by passing After Scheduled pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param currentShipmentStatus Get Shipment Details by passing Current shipment status.
   *     (optional)
   * @param vendorShipmentIdentifier Get Shipment Details by passing Vendor Shipment ID (optional)
   * @param buyerReferenceNumber Get Shipment Details by passing buyer Reference ID (optional)
   * @param buyerWarehouseCode Get Shipping Details based on buyer warehouse code. This value should
   *     be same as &#x27;shipToParty.partyId&#x27; in the Shipment. (optional)
   * @param sellerWarehouseCode Get Shipping Details based on vendor warehouse code. This value
   *     should be same as &#x27;sellingParty.partyId&#x27; in the Shipment. (optional)
   * @return GetShipmentDetailsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public GetShipmentDetailsResponse getShipmentDetails(
      Long limit,
      String sortOrder,
      String nextToken,
      OffsetDateTime createdAfter,
      OffsetDateTime createdBefore,
      OffsetDateTime shipmentConfirmedBefore,
      OffsetDateTime shipmentConfirmedAfter,
      OffsetDateTime packageLabelCreatedBefore,
      OffsetDateTime packageLabelCreatedAfter,
      OffsetDateTime shippedBefore,
      OffsetDateTime shippedAfter,
      OffsetDateTime estimatedDeliveryBefore,
      OffsetDateTime estimatedDeliveryAfter,
      OffsetDateTime shipmentDeliveryBefore,
      OffsetDateTime shipmentDeliveryAfter,
      OffsetDateTime requestedPickUpBefore,
      OffsetDateTime requestedPickUpAfter,
      OffsetDateTime scheduledPickUpBefore,
      OffsetDateTime scheduledPickUpAfter,
      String currentShipmentStatus,
      String vendorShipmentIdentifier,
      String buyerReferenceNumber,
      String buyerWarehouseCode,
      String sellerWarehouseCode)
      throws ApiException, LWAException {
    ApiResponse<GetShipmentDetailsResponse> resp =
        getShipmentDetailsWithHttpInfo(
            limit,
            sortOrder,
            nextToken,
            createdAfter,
            createdBefore,
            shipmentConfirmedBefore,
            shipmentConfirmedAfter,
            packageLabelCreatedBefore,
            packageLabelCreatedAfter,
            shippedBefore,
            shippedAfter,
            estimatedDeliveryBefore,
            estimatedDeliveryAfter,
            shipmentDeliveryBefore,
            shipmentDeliveryAfter,
            requestedPickUpBefore,
            requestedPickUpAfter,
            scheduledPickUpBefore,
            scheduledPickUpAfter,
            currentShipmentStatus,
            vendorShipmentIdentifier,
            buyerReferenceNumber,
            buyerWarehouseCode,
            sellerWarehouseCode);
    return resp.getData();
  }

  /**
   * GetShipmentDetails Returns the Details about Shipment, Carrier Details, status of the shipment,
   * container details and other details related to shipment based on the filter parameters value
   * that you specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 |
   * 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
   * that were applied to the requested operation, when available. The table above indicates the
   * default rate and burst values for this operation. Selling partners whose business demands
   * require higher throughput may see higher rate and burst values than those shown here. For more
   * information, see [Usage Plans and Rate Limits in the Selling Partner
   * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param limit The limit to the number of records returned. Default value is 50 records.
   *     (optional)
   * @param sortOrder Sort in ascending or descending order by purchase order creation date.
   *     (optional)
   * @param nextToken Used for pagination when there are more shipments than the specified result
   *     size limit. (optional)
   * @param createdAfter Get Shipment Details that became available after this timestamp will be
   *     included in the result. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param createdBefore Get Shipment Details that became available before this timestamp will be
   *     included in the result. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentConfirmedBefore Get Shipment Details by passing Shipment confirmed create Date
   *     Before. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentConfirmedAfter Get Shipment Details by passing Shipment confirmed create Date
   *     After. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param packageLabelCreatedBefore Get Shipment Details by passing Package label create Date by
   *     buyer. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param packageLabelCreatedAfter Get Shipment Details by passing Package label create Date After
   *     by buyer. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shippedBefore Get Shipment Details by passing Shipped Date Before. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shippedAfter Get Shipment Details by passing Shipped Date After. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param estimatedDeliveryBefore Get Shipment Details by passing Estimated Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param estimatedDeliveryAfter Get Shipment Details by passing Estimated Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentDeliveryBefore Get Shipment Details by passing Shipment Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentDeliveryAfter Get Shipment Details by passing Shipment Delivery Date After. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param requestedPickUpBefore Get Shipment Details by passing Before Requested pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param requestedPickUpAfter Get Shipment Details by passing After Requested pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param scheduledPickUpBefore Get Shipment Details by passing Before scheduled pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param scheduledPickUpAfter Get Shipment Details by passing After Scheduled pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param currentShipmentStatus Get Shipment Details by passing Current shipment status.
   *     (optional)
   * @param vendorShipmentIdentifier Get Shipment Details by passing Vendor Shipment ID (optional)
   * @param buyerReferenceNumber Get Shipment Details by passing buyer Reference ID (optional)
   * @param buyerWarehouseCode Get Shipping Details based on buyer warehouse code. This value should
   *     be same as &#x27;shipToParty.partyId&#x27; in the Shipment. (optional)
   * @param sellerWarehouseCode Get Shipping Details based on vendor warehouse code. This value
   *     should be same as &#x27;sellingParty.partyId&#x27; in the Shipment. (optional)
   * @return ApiResponse&lt;GetShipmentDetailsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public ApiResponse<GetShipmentDetailsResponse> getShipmentDetailsWithHttpInfo(
      Long limit,
      String sortOrder,
      String nextToken,
      OffsetDateTime createdAfter,
      OffsetDateTime createdBefore,
      OffsetDateTime shipmentConfirmedBefore,
      OffsetDateTime shipmentConfirmedAfter,
      OffsetDateTime packageLabelCreatedBefore,
      OffsetDateTime packageLabelCreatedAfter,
      OffsetDateTime shippedBefore,
      OffsetDateTime shippedAfter,
      OffsetDateTime estimatedDeliveryBefore,
      OffsetDateTime estimatedDeliveryAfter,
      OffsetDateTime shipmentDeliveryBefore,
      OffsetDateTime shipmentDeliveryAfter,
      OffsetDateTime requestedPickUpBefore,
      OffsetDateTime requestedPickUpAfter,
      OffsetDateTime scheduledPickUpBefore,
      OffsetDateTime scheduledPickUpAfter,
      String currentShipmentStatus,
      String vendorShipmentIdentifier,
      String buyerReferenceNumber,
      String buyerWarehouseCode,
      String sellerWarehouseCode)
      throws ApiException, LWAException {
    okhttp3.Call call =
        getShipmentDetailsValidateBeforeCall(
            limit,
            sortOrder,
            nextToken,
            createdAfter,
            createdBefore,
            shipmentConfirmedBefore,
            shipmentConfirmedAfter,
            packageLabelCreatedBefore,
            packageLabelCreatedAfter,
            shippedBefore,
            shippedAfter,
            estimatedDeliveryBefore,
            estimatedDeliveryAfter,
            shipmentDeliveryBefore,
            shipmentDeliveryAfter,
            requestedPickUpBefore,
            requestedPickUpAfter,
            scheduledPickUpBefore,
            scheduledPickUpAfter,
            currentShipmentStatus,
            vendorShipmentIdentifier,
            buyerReferenceNumber,
            buyerWarehouseCode,
            sellerWarehouseCode,
            null,
            null);
    Type localVarReturnType = new TypeToken<GetShipmentDetailsResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * GetShipmentDetails (asynchronously) Returns the Details about Shipment, Carrier Details, status
   * of the shipment, container details and other details related to shipment based on the filter
   * parameters value that you specify. **Usage Plan:** | Rate (requests per second) | Burst | |
   * ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
   * usage plan rate limits that were applied to the requested operation, when available. The table
   * above indicates the default rate and burst values for this operation. Selling partners whose
   * business demands require higher throughput may see higher rate and burst values than those
   * shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner
   * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param limit The limit to the number of records returned. Default value is 50 records.
   *     (optional)
   * @param sortOrder Sort in ascending or descending order by purchase order creation date.
   *     (optional)
   * @param nextToken Used for pagination when there are more shipments than the specified result
   *     size limit. (optional)
   * @param createdAfter Get Shipment Details that became available after this timestamp will be
   *     included in the result. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param createdBefore Get Shipment Details that became available before this timestamp will be
   *     included in the result. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentConfirmedBefore Get Shipment Details by passing Shipment confirmed create Date
   *     Before. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentConfirmedAfter Get Shipment Details by passing Shipment confirmed create Date
   *     After. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param packageLabelCreatedBefore Get Shipment Details by passing Package label create Date by
   *     buyer. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param packageLabelCreatedAfter Get Shipment Details by passing Package label create Date After
   *     by buyer. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shippedBefore Get Shipment Details by passing Shipped Date Before. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shippedAfter Get Shipment Details by passing Shipped Date After. Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param estimatedDeliveryBefore Get Shipment Details by passing Estimated Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param estimatedDeliveryAfter Get Shipment Details by passing Estimated Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentDeliveryBefore Get Shipment Details by passing Shipment Delivery Date Before.
   *     Must be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param shipmentDeliveryAfter Get Shipment Details by passing Shipment Delivery Date After. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param requestedPickUpBefore Get Shipment Details by passing Before Requested pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param requestedPickUpAfter Get Shipment Details by passing After Requested pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param scheduledPickUpBefore Get Shipment Details by passing Before scheduled pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param scheduledPickUpAfter Get Shipment Details by passing After Scheduled pickup date. Must
   *     be in &lt;a
   *     href&#x3D;&#x27;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#x27;&gt;ISO
   *     8601&lt;/a&gt; format. (optional)
   * @param currentShipmentStatus Get Shipment Details by passing Current shipment status.
   *     (optional)
   * @param vendorShipmentIdentifier Get Shipment Details by passing Vendor Shipment ID (optional)
   * @param buyerReferenceNumber Get Shipment Details by passing buyer Reference ID (optional)
   * @param buyerWarehouseCode Get Shipping Details based on buyer warehouse code. This value should
   *     be same as &#x27;shipToParty.partyId&#x27; in the Shipment. (optional)
   * @param sellerWarehouseCode Get Shipping Details based on vendor warehouse code. This value
   *     should be same as &#x27;sellingParty.partyId&#x27; in the Shipment. (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call getShipmentDetailsAsync(
      Long limit,
      String sortOrder,
      String nextToken,
      OffsetDateTime createdAfter,
      OffsetDateTime createdBefore,
      OffsetDateTime shipmentConfirmedBefore,
      OffsetDateTime shipmentConfirmedAfter,
      OffsetDateTime packageLabelCreatedBefore,
      OffsetDateTime packageLabelCreatedAfter,
      OffsetDateTime shippedBefore,
      OffsetDateTime shippedAfter,
      OffsetDateTime estimatedDeliveryBefore,
      OffsetDateTime estimatedDeliveryAfter,
      OffsetDateTime shipmentDeliveryBefore,
      OffsetDateTime shipmentDeliveryAfter,
      OffsetDateTime requestedPickUpBefore,
      OffsetDateTime requestedPickUpAfter,
      OffsetDateTime scheduledPickUpBefore,
      OffsetDateTime scheduledPickUpAfter,
      String currentShipmentStatus,
      String vendorShipmentIdentifier,
      String buyerReferenceNumber,
      String buyerWarehouseCode,
      String sellerWarehouseCode,
      final ApiCallback<GetShipmentDetailsResponse> callback)
      throws ApiException, LWAException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        getShipmentDetailsValidateBeforeCall(
            limit,
            sortOrder,
            nextToken,
            createdAfter,
            createdBefore,
            shipmentConfirmedBefore,
            shipmentConfirmedAfter,
            packageLabelCreatedBefore,
            packageLabelCreatedAfter,
            shippedBefore,
            shippedAfter,
            estimatedDeliveryBefore,
            estimatedDeliveryAfter,
            shipmentDeliveryBefore,
            shipmentDeliveryAfter,
            requestedPickUpBefore,
            requestedPickUpAfter,
            scheduledPickUpBefore,
            scheduledPickUpAfter,
            currentShipmentStatus,
            vendorShipmentIdentifier,
            buyerReferenceNumber,
            buyerWarehouseCode,
            sellerWarehouseCode,
            progressListener,
            progressRequestListener);
    Type localVarReturnType = new TypeToken<GetShipmentDetailsResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getShipmentLabels
   *
   * @param limit The limit to the number of records returned. Default value is 50 records.
   *     (optional)
   * @param sortOrder Sort the list by shipment label creation date in ascending or descending
   *     order. (optional)
   * @param nextToken A token that is used to retrieve the next page of results. The response
   *     includes &#x60;nextToken&#x60; when the number of results exceeds the specified
   *     &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this
   *     token and include the same arguments as the call that produced the token. To get a complete
   *     list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can
   *     return empty pages. (optional)
   * @param labelCreatedAfter Shipment labels created after this time will be included in the
   *     result. This field must be in [ISO
   *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
   * @param labelCreatedBefore Shipment labels created before this time will be included in the
   *     result. This field must be in [ISO
   *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
   * @param buyerReferenceNumber Get Shipment labels by passing buyer reference number. (optional)
   * @param vendorShipmentIdentifier Get Shipment labels by passing vendor shipment identifier.
   *     (optional)
   * @param sellerWarehouseCode Get Shipping labels based on vendor warehouse code. This value must
   *     be same as the &#x60;sellingParty.partyId&#x60; in the shipment. (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call getShipmentLabelsCall(
      Long limit,
      String sortOrder,
      String nextToken,
      OffsetDateTime labelCreatedAfter,
      OffsetDateTime labelCreatedBefore,
      String buyerReferenceNumber,
      String vendorShipmentIdentifier,
      String sellerWarehouseCode,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/vendor/shipping/v1/transportLabels";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (limit != null) localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    if (sortOrder != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
    if (nextToken != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));
    if (labelCreatedAfter != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("labelCreatedAfter", labelCreatedAfter));
    if (labelCreatedBefore != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("labelCreatedBefore", labelCreatedBefore));
    if (buyerReferenceNumber != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("buyerReferenceNumber", buyerReferenceNumber));
    if (vendorShipmentIdentifier != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("vendorShipmentIdentifier", vendorShipmentIdentifier));
    if (sellerWarehouseCode != null)
      localVarQueryParams.addAll(
          apiClient.parameterToPair("sellerWarehouseCode", sellerWarehouseCode));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                    throws IOException {
                  okhttp3.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getShipmentLabelsValidateBeforeCall(
      Long limit,
      String sortOrder,
      String nextToken,
      OffsetDateTime labelCreatedAfter,
      OffsetDateTime labelCreatedBefore,
      String buyerReferenceNumber,
      String vendorShipmentIdentifier,
      String sellerWarehouseCode,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {

    okhttp3.Call call =
        getShipmentLabelsCall(
            limit,
            sortOrder,
            nextToken,
            labelCreatedAfter,
            labelCreatedBefore,
            buyerReferenceNumber,
            vendorShipmentIdentifier,
            sellerWarehouseCode,
            progressListener,
            progressRequestListener);
    return call;
  }

  /**
   * Returns small parcel shipment labels based on the filters that you specify. **Usage Plan:** |
   * Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the
   * operation, when available. The preceding table contains the default rate and burst values for
   * this operation. Selling partners whose business demands require higher throughput might have
   * higher rate and burst values than those shown here. For more information, refer to [Usage Plans
   * and Rate
   * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param limit The limit to the number of records returned. Default value is 50 records.
   *     (optional)
   * @param sortOrder Sort the list by shipment label creation date in ascending or descending
   *     order. (optional)
   * @param nextToken A token that is used to retrieve the next page of results. The response
   *     includes &#x60;nextToken&#x60; when the number of results exceeds the specified
   *     &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this
   *     token and include the same arguments as the call that produced the token. To get a complete
   *     list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can
   *     return empty pages. (optional)
   * @param labelCreatedAfter Shipment labels created after this time will be included in the
   *     result. This field must be in [ISO
   *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
   * @param labelCreatedBefore Shipment labels created before this time will be included in the
   *     result. This field must be in [ISO
   *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
   * @param buyerReferenceNumber Get Shipment labels by passing buyer reference number. (optional)
   * @param vendorShipmentIdentifier Get Shipment labels by passing vendor shipment identifier.
   *     (optional)
   * @param sellerWarehouseCode Get Shipping labels based on vendor warehouse code. This value must
   *     be same as the &#x60;sellingParty.partyId&#x60; in the shipment. (optional)
   * @return GetShipmentLabels
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public GetShipmentLabels getShipmentLabels(
      Long limit,
      String sortOrder,
      String nextToken,
      OffsetDateTime labelCreatedAfter,
      OffsetDateTime labelCreatedBefore,
      String buyerReferenceNumber,
      String vendorShipmentIdentifier,
      String sellerWarehouseCode)
      throws ApiException, LWAException {
    ApiResponse<GetShipmentLabels> resp =
        getShipmentLabelsWithHttpInfo(
            limit,
            sortOrder,
            nextToken,
            labelCreatedAfter,
            labelCreatedBefore,
            buyerReferenceNumber,
            vendorShipmentIdentifier,
            sellerWarehouseCode);
    return resp.getData();
  }

  /**
   * Returns small parcel shipment labels based on the filters that you specify. **Usage Plan:** |
   * Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the
   * operation, when available. The preceding table contains the default rate and burst values for
   * this operation. Selling partners whose business demands require higher throughput might have
   * higher rate and burst values than those shown here. For more information, refer to [Usage Plans
   * and Rate
   * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param limit The limit to the number of records returned. Default value is 50 records.
   *     (optional)
   * @param sortOrder Sort the list by shipment label creation date in ascending or descending
   *     order. (optional)
   * @param nextToken A token that is used to retrieve the next page of results. The response
   *     includes &#x60;nextToken&#x60; when the number of results exceeds the specified
   *     &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this
   *     token and include the same arguments as the call that produced the token. To get a complete
   *     list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can
   *     return empty pages. (optional)
   * @param labelCreatedAfter Shipment labels created after this time will be included in the
   *     result. This field must be in [ISO
   *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
   * @param labelCreatedBefore Shipment labels created before this time will be included in the
   *     result. This field must be in [ISO
   *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
   * @param buyerReferenceNumber Get Shipment labels by passing buyer reference number. (optional)
   * @param vendorShipmentIdentifier Get Shipment labels by passing vendor shipment identifier.
   *     (optional)
   * @param sellerWarehouseCode Get Shipping labels based on vendor warehouse code. This value must
   *     be same as the &#x60;sellingParty.partyId&#x60; in the shipment. (optional)
   * @return ApiResponse&lt;GetShipmentLabels&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public ApiResponse<GetShipmentLabels> getShipmentLabelsWithHttpInfo(
      Long limit,
      String sortOrder,
      String nextToken,
      OffsetDateTime labelCreatedAfter,
      OffsetDateTime labelCreatedBefore,
      String buyerReferenceNumber,
      String vendorShipmentIdentifier,
      String sellerWarehouseCode)
      throws ApiException, LWAException {
    okhttp3.Call call =
        getShipmentLabelsValidateBeforeCall(
            limit,
            sortOrder,
            nextToken,
            labelCreatedAfter,
            labelCreatedBefore,
            buyerReferenceNumber,
            vendorShipmentIdentifier,
            sellerWarehouseCode,
            null,
            null);
    Type localVarReturnType = new TypeToken<GetShipmentLabels>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * (asynchronously) Returns small parcel shipment labels based on the filters that you specify.
   * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header contains the usage plan rate limits for the
   * operation, when available. The preceding table contains the default rate and burst values for
   * this operation. Selling partners whose business demands require higher throughput might have
   * higher rate and burst values than those shown here. For more information, refer to [Usage Plans
   * and Rate
   * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param limit The limit to the number of records returned. Default value is 50 records.
   *     (optional)
   * @param sortOrder Sort the list by shipment label creation date in ascending or descending
   *     order. (optional)
   * @param nextToken A token that is used to retrieve the next page of results. The response
   *     includes &#x60;nextToken&#x60; when the number of results exceeds the specified
   *     &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this
   *     token and include the same arguments as the call that produced the token. To get a complete
   *     list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can
   *     return empty pages. (optional)
   * @param labelCreatedAfter Shipment labels created after this time will be included in the
   *     result. This field must be in [ISO
   *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
   * @param labelCreatedBefore Shipment labels created before this time will be included in the
   *     result. This field must be in [ISO
   *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
   * @param buyerReferenceNumber Get Shipment labels by passing buyer reference number. (optional)
   * @param vendorShipmentIdentifier Get Shipment labels by passing vendor shipment identifier.
   *     (optional)
   * @param sellerWarehouseCode Get Shipping labels based on vendor warehouse code. This value must
   *     be same as the &#x60;sellingParty.partyId&#x60; in the shipment. (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call getShipmentLabelsAsync(
      Long limit,
      String sortOrder,
      String nextToken,
      OffsetDateTime labelCreatedAfter,
      OffsetDateTime labelCreatedBefore,
      String buyerReferenceNumber,
      String vendorShipmentIdentifier,
      String sellerWarehouseCode,
      final ApiCallback<GetShipmentLabels> callback)
      throws ApiException, LWAException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        getShipmentLabelsValidateBeforeCall(
            limit,
            sortOrder,
            nextToken,
            labelCreatedAfter,
            labelCreatedBefore,
            buyerReferenceNumber,
            vendorShipmentIdentifier,
            sellerWarehouseCode,
            progressListener,
            progressRequestListener);
    Type localVarReturnType = new TypeToken<GetShipmentLabels>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for submitShipmentConfirmations
   *
   * @param body A request to submit shipment confirmation. (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call submitShipmentConfirmationsCall(
      SubmitShipmentConfirmationsRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/vendor/shipping/v1/shipmentConfirmations";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                    throws IOException {
                  okhttp3.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call submitShipmentConfirmationsValidateBeforeCall(
      SubmitShipmentConfirmationsRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(
          "Missing the required parameter 'body' when calling submitShipmentConfirmations(Async)");
    }

    okhttp3.Call call =
        submitShipmentConfirmationsCall(body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * SubmitShipmentConfirmations Submits one or more shipment confirmations for vendor orders.
   * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
   * applied to the requested operation, when available. The table above indicates the default rate
   * and burst values for this operation. Selling partners whose business demands require higher
   * throughput may see higher rate and burst values than those shown here. For more information,
   * see [Usage Plans and Rate Limits in the Selling Partner
   * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body A request to submit shipment confirmation. (required)
   * @return SubmitShipmentConfirmationsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public SubmitShipmentConfirmationsResponse submitShipmentConfirmations(
      SubmitShipmentConfirmationsRequest body) throws ApiException, LWAException {
    ApiResponse<SubmitShipmentConfirmationsResponse> resp =
        submitShipmentConfirmationsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * SubmitShipmentConfirmations Submits one or more shipment confirmations for vendor orders.
   * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
   * applied to the requested operation, when available. The table above indicates the default rate
   * and burst values for this operation. Selling partners whose business demands require higher
   * throughput may see higher rate and burst values than those shown here. For more information,
   * see [Usage Plans and Rate Limits in the Selling Partner
   * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body A request to submit shipment confirmation. (required)
   * @return ApiResponse&lt;SubmitShipmentConfirmationsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public ApiResponse<SubmitShipmentConfirmationsResponse> submitShipmentConfirmationsWithHttpInfo(
      SubmitShipmentConfirmationsRequest body) throws ApiException, LWAException {
    okhttp3.Call call = submitShipmentConfirmationsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<SubmitShipmentConfirmationsResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * SubmitShipmentConfirmations (asynchronously) Submits one or more shipment confirmations for
   * vendor orders. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10
   * | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits
   * that were applied to the requested operation, when available. The table above indicates the
   * default rate and burst values for this operation. Selling partners whose business demands
   * require higher throughput may see higher rate and burst values than those shown here. For more
   * information, see [Usage Plans and Rate Limits in the Selling Partner
   * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body A request to submit shipment confirmation. (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call submitShipmentConfirmationsAsync(
      SubmitShipmentConfirmationsRequest body,
      final ApiCallback<SubmitShipmentConfirmationsResponse> callback)
      throws ApiException, LWAException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        submitShipmentConfirmationsValidateBeforeCall(
            body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<SubmitShipmentConfirmationsResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for submitShipments
   *
   * @param body A request to submit shipment request. (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call submitShipmentsCall(
      SubmitShipments body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/vendor/shipping/v1/shipments";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                    throws IOException {
                  okhttp3.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call submitShipmentsValidateBeforeCall(
      SubmitShipments body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException, LWAException {
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(
          "Missing the required parameter 'body' when calling submitShipments(Async)");
    }

    okhttp3.Call call = submitShipmentsCall(body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * SubmitShipments Submits one or more shipment request for vendor Orders. **Usage Plan:** | Rate
   * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
   * applied to the requested operation, when available. The table above indicates the default rate
   * and burst values for this operation. Selling partners whose business demands require higher
   * throughput may see higher rate and burst values than those shown here. For more information,
   * see [Usage Plans and Rate Limits in the Selling Partner
   * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body A request to submit shipment request. (required)
   * @return SubmitShipmentConfirmationsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public SubmitShipmentConfirmationsResponse submitShipments(SubmitShipments body)
      throws ApiException, LWAException {
    ApiResponse<SubmitShipmentConfirmationsResponse> resp = submitShipmentsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * SubmitShipments Submits one or more shipment request for vendor Orders. **Usage Plan:** | Rate
   * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
   * applied to the requested operation, when available. The table above indicates the default rate
   * and burst values for this operation. Selling partners whose business demands require higher
   * throughput may see higher rate and burst values than those shown here. For more information,
   * see [Usage Plans and Rate Limits in the Selling Partner
   * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body A request to submit shipment request. (required)
   * @return ApiResponse&lt;SubmitShipmentConfirmationsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public ApiResponse<SubmitShipmentConfirmationsResponse> submitShipmentsWithHttpInfo(
      SubmitShipments body) throws ApiException, LWAException {
    okhttp3.Call call = submitShipmentsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<SubmitShipmentConfirmationsResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * SubmitShipments (asynchronously) Submits one or more shipment request for vendor Orders.
   * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
   * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
   * applied to the requested operation, when available. The table above indicates the default rate
   * and burst values for this operation. Selling partners whose business demands require higher
   * throughput may see higher rate and burst values than those shown here. For more information,
   * see [Usage Plans and Rate Limits in the Selling Partner
   * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
   *
   * @param body A request to submit shipment request. (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @throws LWAException If calls to fetch LWA access token fails
   */
  public okhttp3.Call submitShipmentsAsync(
      SubmitShipments body, final ApiCallback<SubmitShipmentConfirmationsResponse> callback)
      throws ApiException, LWAException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        submitShipmentsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<SubmitShipmentConfirmationsResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  public static class Builder {
    private LWAAuthorizationCredentials lwaAuthorizationCredentials;
    private String endpoint;
    private LWAAccessTokenCache lwaAccessTokenCache;
    private Boolean disableAccessTokenCache = false;
    private RateLimitConfiguration rateLimitConfiguration;

    public Builder lwaAuthorizationCredentials(
        LWAAuthorizationCredentials lwaAuthorizationCredentials) {
      this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
      return this;
    }

    public Builder endpoint(String endpoint) {
      this.endpoint = endpoint;
      return this;
    }

    public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
      this.lwaAccessTokenCache = lwaAccessTokenCache;
      return this;
    }

    public Builder disableAccessTokenCache() {
      this.disableAccessTokenCache = true;
      return this;
    }

    public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration) {
      this.rateLimitConfiguration = rateLimitConfiguration;
      return this;
    }

    public Builder disableRateLimitOnRequests() {
      this.rateLimitConfiguration = null;
      return this;
    }

    public VendorShippingApi build() {
      if (lwaAuthorizationCredentials == null) {
        throw new RuntimeException("LWAAuthorizationCredentials not set");
      }

      if (StringUtil.isEmpty(endpoint)) {
        throw new RuntimeException("Endpoint not set");
      }

      LWAAuthorizationSigner lwaAuthorizationSigner = null;
      if (disableAccessTokenCache) {
        lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
      } else {
        if (lwaAccessTokenCache == null) {
          lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
        }
        lwaAuthorizationSigner =
            new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
      }

      return new VendorShippingApi(
          new ApiClient()
              .setLWAAuthorizationSigner(lwaAuthorizationSigner)
              .setBasePath(endpoint)
              .setRateLimiter(rateLimitConfiguration));
    }
  }
}
