/*
 * Selling Partner API for Easy Ship
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * OpenAPI spec version: 2022-03-23
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.easyship.v2022_03_23;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/** Identifies the method by which a seller will hand a package over to Amazon Logistics. */
@JsonAdapter(HandoverMethod.Adapter.class)
public enum HandoverMethod {
    @SerializedName("Pickup")
    PICKUP("Pickup"),
    @SerializedName("Dropoff")
    DROPOFF("Dropoff");

    private String value;

    HandoverMethod(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static HandoverMethod fromValue(String input) {
        for (HandoverMethod b : HandoverMethod.values()) {
            if (b.value.equals(input)) {
                return b;
            }
        }
        return null;
    }

    public static class Adapter extends TypeAdapter<HandoverMethod> {
        @Override
        public void write(final JsonWriter jsonWriter, final HandoverMethod enumeration) throws IOException {
            jsonWriter.value(String.valueOf(enumeration.getValue()));
        }

        @Override
        public HandoverMethod read(final JsonReader jsonReader) throws IOException {
            Object value = jsonReader.nextString();
            return HandoverMethod.fromValue((String) (value));
        }
    }
}
