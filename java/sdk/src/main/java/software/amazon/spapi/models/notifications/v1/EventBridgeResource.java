/*
 * Selling Partner API for Notifications
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.notifications.v1;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/** The Amazon EventBridge destination. */
@Schema(description = "The Amazon EventBridge destination.")
public class EventBridgeResource {
    @SerializedName("name")
    private String name = null;

    @SerializedName("region")
    private String region = null;

    @SerializedName("accountId")
    private String accountId = null;

    public EventBridgeResource name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the partner event source associated with the destination.
     *
     * @return name
     */
    @Schema(required = true, description = "The name of the partner event source associated with the destination.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public EventBridgeResource region(String region) {
        this.region = region;
        return this;
    }

    /**
     * The AWS region in which you receive the notifications. For AWS regions that are supported in Amazon EventBridge,
     * refer to [Amazon EventBridge endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/ev.html).
     *
     * @return region
     */
    @Schema(
            required = true,
            description =
                    "The AWS region in which you receive the notifications. For AWS regions that are supported in Amazon EventBridge, refer to [Amazon EventBridge endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/ev.html).")
    public String getRegion() {
        return region;
    }

    public void setRegion(String region) {
        this.region = region;
    }

    public EventBridgeResource accountId(String accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * The identifier for the AWS account that is responsible for charges related to receiving notifications.
     *
     * @return accountId
     */
    @Schema(
            required = true,
            description =
                    "The identifier for the AWS account that is responsible for charges related to receiving notifications.")
    public String getAccountId() {
        return accountId;
    }

    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EventBridgeResource eventBridgeResource = (EventBridgeResource) o;
        return Objects.equals(this.name, eventBridgeResource.name)
                && Objects.equals(this.region, eventBridgeResource.region)
                && Objects.equals(this.accountId, eventBridgeResource.accountId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, region, accountId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EventBridgeResource {\n");

        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    region: ").append(toIndentedString(region)).append("\n");
        sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
