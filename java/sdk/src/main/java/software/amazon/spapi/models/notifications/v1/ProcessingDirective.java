/*
 * Selling Partner API for Notifications
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.notifications.v1;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/**
 * Additional information passed to the subscription to control the processing of notifications. For example, you can
 * use an &#x60;eventFilter&#x60; to customize your subscription to send notifications for only the specified
 * &#x60;marketplaceId&#x60;s, or select the aggregation time period at which to send notifications (for example: limit
 * to one notification every five minutes for high frequency notifications). The specific features available vary
 * depending on the &#x60;notificationType&#x60;. This feature is currently only supported by the
 * &#x60;ANY_OFFER_CHANGED&#x60; and &#x60;ORDER_CHANGE&#x60; &#x60;notificationType&#x60;s.
 */
@Schema(
        description =
                "Additional information passed to the subscription to control the processing of notifications. For example, you can use an `eventFilter` to customize your subscription to send notifications for only the specified `marketplaceId`s, or select the aggregation time period at which to send notifications (for example: limit to one notification every five minutes for high frequency notifications). The specific features available vary depending on the `notificationType`.  This feature is currently only supported by the `ANY_OFFER_CHANGED` and `ORDER_CHANGE` `notificationType`s.")
public class ProcessingDirective {
    @SerializedName("eventFilter")
    private EventFilter eventFilter = null;

    public ProcessingDirective eventFilter(EventFilter eventFilter) {
        this.eventFilter = eventFilter;
        return this;
    }

    /**
     * Get eventFilter
     *
     * @return eventFilter
     */
    @Schema(description = "")
    public EventFilter getEventFilter() {
        return eventFilter;
    }

    public void setEventFilter(EventFilter eventFilter) {
        this.eventFilter = eventFilter;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProcessingDirective processingDirective = (ProcessingDirective) o;
        return Objects.equals(this.eventFilter, processingDirective.eventFilter);
    }

    @Override
    public int hashCode() {
        return Objects.hash(eventFilter);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ProcessingDirective {\n");

        sb.append("    eventFilter: ").append(toIndentedString(eventFilter)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
