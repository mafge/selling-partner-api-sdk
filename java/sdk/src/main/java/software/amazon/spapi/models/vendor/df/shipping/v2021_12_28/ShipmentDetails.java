/*
 * Selling Partner API for Direct Fulfillment Shipping
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: 2021-12-28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.vendor.df.shipping.v2021_12_28;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Objects;
import org.threeten.bp.OffsetDateTime;

/** Details about a shipment. */
@Schema(description = "Details about a shipment.")
public class ShipmentDetails {
    @SerializedName("shippedDate")
    private OffsetDateTime shippedDate = null;

    /** The shipment status. */
    @JsonAdapter(ShipmentStatusEnum.Adapter.class)
    public enum ShipmentStatusEnum {
        @SerializedName("SHIPPED")
        SHIPPED("SHIPPED"),
        @SerializedName("FLOOR_DENIAL")
        FLOOR_DENIAL("FLOOR_DENIAL");

        private String value;

        ShipmentStatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ShipmentStatusEnum fromValue(String input) {
            for (ShipmentStatusEnum b : ShipmentStatusEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ShipmentStatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ShipmentStatusEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public ShipmentStatusEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return ShipmentStatusEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("shipmentStatus")
    private ShipmentStatusEnum shipmentStatus = null;

    @SerializedName("isPriorityShipment")
    private Boolean isPriorityShipment = null;

    @SerializedName("vendorOrderNumber")
    private String vendorOrderNumber = null;

    @SerializedName("estimatedDeliveryDate")
    private OffsetDateTime estimatedDeliveryDate = null;

    public ShipmentDetails shippedDate(OffsetDateTime shippedDate) {
        this.shippedDate = shippedDate;
        return this;
    }

    /**
     * The date of the shipment&#x27;s departure from vendor&#x27;s location. Vendors send ASNs within 30 minutes of
     * departure from their warehouse/distribution center or six hours prior to the appointment time at the Amazon
     * destination warehouse. The shipped date mentioned in the shipment confirmation cannot be in the future.
     *
     * @return shippedDate
     */
    @Schema(
            required = true,
            description =
                    "The date of the shipment's departure from vendor's location. Vendors send ASNs within 30 minutes of departure from their warehouse/distribution center or six hours prior to the appointment time at the Amazon destination warehouse. The shipped date mentioned in the shipment confirmation cannot be in the future.")
    public OffsetDateTime getShippedDate() {
        return shippedDate;
    }

    public void setShippedDate(OffsetDateTime shippedDate) {
        this.shippedDate = shippedDate;
    }

    public ShipmentDetails shipmentStatus(ShipmentStatusEnum shipmentStatus) {
        this.shipmentStatus = shipmentStatus;
        return this;
    }

    /**
     * The shipment status.
     *
     * @return shipmentStatus
     */
    @Schema(required = true, description = "The shipment status.")
    public ShipmentStatusEnum getShipmentStatus() {
        return shipmentStatus;
    }

    public void setShipmentStatus(ShipmentStatusEnum shipmentStatus) {
        this.shipmentStatus = shipmentStatus;
    }

    public ShipmentDetails isPriorityShipment(Boolean isPriorityShipment) {
        this.isPriorityShipment = isPriorityShipment;
        return this;
    }

    /**
     * Provide the priority of the shipment.
     *
     * @return isPriorityShipment
     */
    @Schema(description = "Provide the priority of the shipment.")
    public Boolean isIsPriorityShipment() {
        return isPriorityShipment;
    }

    public void setIsPriorityShipment(Boolean isPriorityShipment) {
        this.isPriorityShipment = isPriorityShipment;
    }

    public ShipmentDetails vendorOrderNumber(String vendorOrderNumber) {
        this.vendorOrderNumber = vendorOrderNumber;
        return this;
    }

    /**
     * The vendor order number is a unique identifier generated by a vendor for their reference.
     *
     * @return vendorOrderNumber
     */
    @Schema(description = "The vendor order number is a unique identifier generated by a vendor for their reference.")
    public String getVendorOrderNumber() {
        return vendorOrderNumber;
    }

    public void setVendorOrderNumber(String vendorOrderNumber) {
        this.vendorOrderNumber = vendorOrderNumber;
    }

    public ShipmentDetails estimatedDeliveryDate(OffsetDateTime estimatedDeliveryDate) {
        this.estimatedDeliveryDate = estimatedDeliveryDate;
        return this;
    }

    /**
     * The date on which the shipment is expected to reach the buyer&#x27;s warehouse. The date is estimated based on
     * the average transit time between the ship-from location and the destination. Usually, the exact appointment time
     * is unknown when creating the shipment confirmation and is later provided by the buyer.
     *
     * @return estimatedDeliveryDate
     */
    @Schema(
            description =
                    "The date on which the shipment is expected to reach the buyer's warehouse. The date is estimated based on the average transit time between the ship-from location and the destination. Usually, the exact appointment time is unknown when creating the shipment confirmation and is later provided by the buyer.")
    public OffsetDateTime getEstimatedDeliveryDate() {
        return estimatedDeliveryDate;
    }

    public void setEstimatedDeliveryDate(OffsetDateTime estimatedDeliveryDate) {
        this.estimatedDeliveryDate = estimatedDeliveryDate;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShipmentDetails shipmentDetails = (ShipmentDetails) o;
        return Objects.equals(this.shippedDate, shipmentDetails.shippedDate)
                && Objects.equals(this.shipmentStatus, shipmentDetails.shipmentStatus)
                && Objects.equals(this.isPriorityShipment, shipmentDetails.isPriorityShipment)
                && Objects.equals(this.vendorOrderNumber, shipmentDetails.vendorOrderNumber)
                && Objects.equals(this.estimatedDeliveryDate, shipmentDetails.estimatedDeliveryDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(shippedDate, shipmentStatus, isPriorityShipment, vendorOrderNumber, estimatedDeliveryDate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ShipmentDetails {\n");

        sb.append("    shippedDate: ").append(toIndentedString(shippedDate)).append("\n");
        sb.append("    shipmentStatus: ")
                .append(toIndentedString(shipmentStatus))
                .append("\n");
        sb.append("    isPriorityShipment: ")
                .append(toIndentedString(isPriorityShipment))
                .append("\n");
        sb.append("    vendorOrderNumber: ")
                .append(toIndentedString(vendorOrderNumber))
                .append("\n");
        sb.append("    estimatedDeliveryDate: ")
                .append(toIndentedString(estimatedDeliveryDate))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
