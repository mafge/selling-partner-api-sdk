/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.pricing.v2022_05_01;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Objects;

/** The shipping option available for the offer. */
@Schema(description = "The shipping option available for the offer.")
public class ShippingOption {
    /** The type of shipping option. */
    @JsonAdapter(ShippingOptionTypeEnum.Adapter.class)
    public enum ShippingOptionTypeEnum {
        @SerializedName("DEFAULT")
        DEFAULT("DEFAULT");

        private String value;

        ShippingOptionTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ShippingOptionTypeEnum fromValue(String input) {
            for (ShippingOptionTypeEnum b : ShippingOptionTypeEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ShippingOptionTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ShippingOptionTypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public ShippingOptionTypeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return ShippingOptionTypeEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("shippingOptionType")
    private ShippingOptionTypeEnum shippingOptionType = null;

    @SerializedName("price")
    private MoneyType price = null;

    public ShippingOption shippingOptionType(ShippingOptionTypeEnum shippingOptionType) {
        this.shippingOptionType = shippingOptionType;
        return this;
    }

    /**
     * The type of shipping option.
     *
     * @return shippingOptionType
     */
    @Schema(required = true, description = "The type of shipping option.")
    public ShippingOptionTypeEnum getShippingOptionType() {
        return shippingOptionType;
    }

    public void setShippingOptionType(ShippingOptionTypeEnum shippingOptionType) {
        this.shippingOptionType = shippingOptionType;
    }

    public ShippingOption price(MoneyType price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @Schema(required = true, description = "")
    public MoneyType getPrice() {
        return price;
    }

    public void setPrice(MoneyType price) {
        this.price = price;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShippingOption shippingOption = (ShippingOption) o;
        return Objects.equals(this.shippingOptionType, shippingOption.shippingOptionType)
                && Objects.equals(this.price, shippingOption.price);
    }

    @Override
    public int hashCode() {
        return Objects.hash(shippingOptionType, price);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ShippingOption {\n");

        sb.append("    shippingOptionType: ")
                .append(toIndentedString(shippingOptionType))
                .append("\n");
        sb.append("    price: ").append(toIndentedString(price)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
