/*
 * Selling Partner API for Direct Fulfillment Shipping
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: 2021-12-28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.vendor.df.shipping.v2021_12_28;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.PackingSlip;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.PackingSlipList;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.SubmitShipmentConfirmationsRequest;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.SubmitShipmentStatusUpdatesRequest;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.TransactionReference;

public class VendorShippingApi {
    private ApiClient apiClient;

    public VendorShippingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    private final Configuration config = Configuration.get();

    private final Bucket getPackingSlipBucket = Bucket.builder()
            .addLimit(config.getLimit("VendorShippingApi-getPackingSlip"))
            .build();

    private final Bucket getPackingSlipsBucket = Bucket.builder()
            .addLimit(config.getLimit("VendorShippingApi-getPackingSlips"))
            .build();

    private final Bucket submitShipmentConfirmationsBucket = Bucket.builder()
            .addLimit(config.getLimit("VendorShippingApi-submitShipmentConfirmations"))
            .build();

    private final Bucket submitShipmentStatusUpdatesBucket = Bucket.builder()
            .addLimit(config.getLimit("VendorShippingApi-submitShipmentStatusUpdates"))
            .build();

    private okhttp3.Call getPackingSlipCall(
            String purchaseOrderNumber,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/directFulfillment/shipping/2021-12-28/packingSlips/{purchaseOrderNumber}"
                .replaceAll(
                        "\\{" + "purchaseOrderNumber" + "\\}", apiClient.escapeString(purchaseOrderNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getPackingSlipValidateBeforeCall(
            String purchaseOrderNumber,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'purchaseOrderNumber' is set
        if (purchaseOrderNumber == null) {
            throw new ApiException(
                    "Missing the required parameter 'purchaseOrderNumber' when calling getPackingSlip(Async)");
        }

        return getPackingSlipCall(purchaseOrderNumber, progressListener, progressRequestListener);
    }

    /**
     * getPackingSlip Returns a packing slip based on the purchaseOrderNumber that you specify. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber The &#x60;purchaseOrderNumber&#x60; for the packing slip that you want. (required)
     * @return PackingSlip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public PackingSlip getPackingSlip(String purchaseOrderNumber) throws ApiException, LWAException {
        ApiResponse<PackingSlip> resp = getPackingSlipWithHttpInfo(purchaseOrderNumber);
        return resp.getData();
    }

    /**
     * getPackingSlip Returns a packing slip based on the purchaseOrderNumber that you specify. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber The &#x60;purchaseOrderNumber&#x60; for the packing slip that you want. (required)
     * @return ApiResponse&lt;PackingSlip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<PackingSlip> getPackingSlipWithHttpInfo(String purchaseOrderNumber)
            throws ApiException, LWAException {
        okhttp3.Call call = getPackingSlipValidateBeforeCall(purchaseOrderNumber, null, null);
        if (getPackingSlipBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<PackingSlip>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getPackingSlip operation exceeds rate limit");
    }

    /**
     * getPackingSlip (asynchronously) Returns a packing slip based on the purchaseOrderNumber that you specify. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber The &#x60;purchaseOrderNumber&#x60; for the packing slip that you want. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPackingSlipAsync(String purchaseOrderNumber, final ApiCallback<PackingSlip> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getPackingSlipValidateBeforeCall(purchaseOrderNumber, progressListener, progressRequestListener);
        if (getPackingSlipBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<PackingSlip>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getPackingSlip operation exceeds rate limit");
    }

    private okhttp3.Call getPackingSlipsCall(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/directFulfillment/shipping/2021-12-28/packingSlips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (shipFromPartyId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("shipFromPartyId", shipFromPartyId));
        if (limit != null) localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (createdAfter != null) localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (sortOrder != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call getPackingSlipsValidateBeforeCall(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'createdAfter' is set
        if (createdAfter == null) {
            throw new ApiException("Missing the required parameter 'createdAfter' when calling getPackingSlips(Async)");
        }
        // verify the required parameter 'createdBefore' is set
        if (createdBefore == null) {
            throw new ApiException(
                    "Missing the required parameter 'createdBefore' when calling getPackingSlips(Async)");
        }

        return getPackingSlipsCall(
                createdAfter,
                createdBefore,
                shipFromPartyId,
                limit,
                sortOrder,
                nextToken,
                progressListener,
                progressRequestListener);
    }

    /**
     * getPackingSlips Returns a list of packing slips for the purchase orders that match the criteria specified. Date
     * range to search must not be more than 7 days. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Packing slips that become available after this date and time will be included in the result.
     *     Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param createdBefore Packing slips that became available before this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param shipFromPartyId The vendor &#x60;warehouseId&#x60; for order fulfillment. If not specified, the result
     *     contains orders for all warehouses. (optional)
     * @param limit The maximum number of records to return. (optional)
     * @param sortOrder The packing slip creation dates, which are sorted by ascending or descending order. (optional,
     *     default to ASC)
     * @param nextToken Used for pagination when there are more packing slips than the specified result size limit. The
     *     token value is returned in the previous API call. (optional)
     * @return PackingSlipList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public PackingSlipList getPackingSlips(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken)
            throws ApiException, LWAException {
        ApiResponse<PackingSlipList> resp =
                getPackingSlipsWithHttpInfo(createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken);
        return resp.getData();
    }

    /**
     * getPackingSlips Returns a list of packing slips for the purchase orders that match the criteria specified. Date
     * range to search must not be more than 7 days. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Packing slips that become available after this date and time will be included in the result.
     *     Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param createdBefore Packing slips that became available before this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param shipFromPartyId The vendor &#x60;warehouseId&#x60; for order fulfillment. If not specified, the result
     *     contains orders for all warehouses. (optional)
     * @param limit The maximum number of records to return. (optional)
     * @param sortOrder The packing slip creation dates, which are sorted by ascending or descending order. (optional,
     *     default to ASC)
     * @param nextToken Used for pagination when there are more packing slips than the specified result size limit. The
     *     token value is returned in the previous API call. (optional)
     * @return ApiResponse&lt;PackingSlipList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<PackingSlipList> getPackingSlipsWithHttpInfo(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getPackingSlipsValidateBeforeCall(
                createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, null, null);
        if (getPackingSlipsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<PackingSlipList>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getPackingSlips operation exceeds rate limit");
    }

    /**
     * getPackingSlips (asynchronously) Returns a list of packing slips for the purchase orders that match the criteria
     * specified. Date range to search must not be more than 7 days. **Usage Plan:** | Rate (requests per second) |
     * Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan
     * rate limits that were applied to the requested operation, when available. The preceding table indicates the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Packing slips that become available after this date and time will be included in the result.
     *     Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param createdBefore Packing slips that became available before this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param shipFromPartyId The vendor &#x60;warehouseId&#x60; for order fulfillment. If not specified, the result
     *     contains orders for all warehouses. (optional)
     * @param limit The maximum number of records to return. (optional)
     * @param sortOrder The packing slip creation dates, which are sorted by ascending or descending order. (optional,
     *     default to ASC)
     * @param nextToken Used for pagination when there are more packing slips than the specified result size limit. The
     *     token value is returned in the previous API call. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPackingSlipsAsync(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            final ApiCallback<PackingSlipList> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getPackingSlipsValidateBeforeCall(
                createdAfter,
                createdBefore,
                shipFromPartyId,
                limit,
                sortOrder,
                nextToken,
                progressListener,
                progressRequestListener);
        if (getPackingSlipsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<PackingSlipList>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getPackingSlips operation exceeds rate limit");
    }

    private okhttp3.Call submitShipmentConfirmationsCall(
            SubmitShipmentConfirmationsRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vendor/directFulfillment/shipping/2021-12-28/shipmentConfirmations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call submitShipmentConfirmationsValidateBeforeCall(
            SubmitShipmentConfirmationsRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling submitShipmentConfirmations(Async)");
        }

        return submitShipmentConfirmationsCall(body, progressListener, progressRequestListener);
    }

    /**
     * submitShipmentConfirmations Submits one or more shipment confirmations for vendor orders. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body Request body containing the shipment confirmations data. (required)
     * @return TransactionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransactionReference submitShipmentConfirmations(SubmitShipmentConfirmationsRequest body)
            throws ApiException, LWAException {
        ApiResponse<TransactionReference> resp = submitShipmentConfirmationsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * submitShipmentConfirmations Submits one or more shipment confirmations for vendor orders. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body Request body containing the shipment confirmations data. (required)
     * @return ApiResponse&lt;TransactionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransactionReference> submitShipmentConfirmationsWithHttpInfo(
            SubmitShipmentConfirmationsRequest body) throws ApiException, LWAException {
        okhttp3.Call call = submitShipmentConfirmationsValidateBeforeCall(body, null, null);
        if (submitShipmentConfirmationsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransactionReference>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("submitShipmentConfirmations operation exceeds rate limit");
    }

    /**
     * submitShipmentConfirmations (asynchronously) Submits one or more shipment confirmations for vendor orders.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body Request body containing the shipment confirmations data. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call submitShipmentConfirmationsAsync(
            SubmitShipmentConfirmationsRequest body, final ApiCallback<TransactionReference> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                submitShipmentConfirmationsValidateBeforeCall(body, progressListener, progressRequestListener);
        if (submitShipmentConfirmationsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransactionReference>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("submitShipmentConfirmations operation exceeds rate limit");
    }

    private okhttp3.Call submitShipmentStatusUpdatesCall(
            SubmitShipmentStatusUpdatesRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vendor/directFulfillment/shipping/2021-12-28/shipmentStatusUpdates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(chain -> {
                okhttp3.Response originalResponse = chain.proceed(chain.request());
                return originalResponse
                        .newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                        .build();
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    private okhttp3.Call submitShipmentStatusUpdatesValidateBeforeCall(
            SubmitShipmentStatusUpdatesRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling submitShipmentStatusUpdates(Async)");
        }

        return submitShipmentStatusUpdatesCall(body, progressListener, progressRequestListener);
    }

    /**
     * submitShipmentStatusUpdates This operation is only to be used by Vendor-Own-Carrier (VOC) vendors. Calling this
     * API submits a shipment status update for the package that a vendor has shipped. It will provide the Amazon
     * customer visibility on their order, when the package is outside of Amazon Network visibility. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body Request body containing the shipment status update data. (required)
     * @return TransactionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransactionReference submitShipmentStatusUpdates(SubmitShipmentStatusUpdatesRequest body)
            throws ApiException, LWAException {
        ApiResponse<TransactionReference> resp = submitShipmentStatusUpdatesWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * submitShipmentStatusUpdates This operation is only to be used by Vendor-Own-Carrier (VOC) vendors. Calling this
     * API submits a shipment status update for the package that a vendor has shipped. It will provide the Amazon
     * customer visibility on their order, when the package is outside of Amazon Network visibility. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body Request body containing the shipment status update data. (required)
     * @return ApiResponse&lt;TransactionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransactionReference> submitShipmentStatusUpdatesWithHttpInfo(
            SubmitShipmentStatusUpdatesRequest body) throws ApiException, LWAException {
        okhttp3.Call call = submitShipmentStatusUpdatesValidateBeforeCall(body, null, null);
        if (submitShipmentStatusUpdatesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransactionReference>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("submitShipmentStatusUpdates operation exceeds rate limit");
    }

    /**
     * submitShipmentStatusUpdates (asynchronously) This operation is only to be used by Vendor-Own-Carrier (VOC)
     * vendors. Calling this API submits a shipment status update for the package that a vendor has shipped. It will
     * provide the Amazon customer visibility on their order, when the package is outside of Amazon Network visibility.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body Request body containing the shipment status update data. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call submitShipmentStatusUpdatesAsync(
            SubmitShipmentStatusUpdatesRequest body, final ApiCallback<TransactionReference> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = callback::onDownloadProgress;
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                submitShipmentStatusUpdatesValidateBeforeCall(body, progressListener, progressRequestListener);
        if (submitShipmentStatusUpdatesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransactionReference>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("submitShipmentStatusUpdates operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public VendorShippingApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new VendorShippingApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint));
        }
    }
}
