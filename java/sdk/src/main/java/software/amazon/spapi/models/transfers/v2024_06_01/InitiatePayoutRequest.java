/*
 * The Selling Partner API for Transfers.
 * The Selling Partner API for Transfers enables selling partners to retrieve payment methods and initiate payouts for their seller accounts. This API supports the following marketplaces: DE, FR, IT, ES, SE, NL, PL, and BE.
 *
 * OpenAPI spec version: 2024-06-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.transfers.v2024_06_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/** The request schema for the &#x60;initiatePayout&#x60; operation. */
@Schema(description = "The request schema for the `initiatePayout` operation.")
public class InitiatePayoutRequest {
    @SerializedName("marketplaceId")
    private String marketplaceId = null;

    @SerializedName("accountType")
    private String accountType = null;

    public InitiatePayoutRequest marketplaceId(String marketplaceId) {
        this.marketplaceId = marketplaceId;
        return this;
    }

    /**
     * Get marketplaceId
     *
     * @return marketplaceId
     */
    @Schema(required = true, description = "")
    public String getMarketplaceId() {
        return marketplaceId;
    }

    public void setMarketplaceId(String marketplaceId) {
        this.marketplaceId = marketplaceId;
    }

    public InitiatePayoutRequest accountType(String accountType) {
        this.accountType = accountType;
        return this;
    }

    /**
     * The account type in the selected marketplace for which a payout must be initiated. For supported EU marketplaces,
     * the only account type is &#x60;Standard Orders&#x60;.
     *
     * @return accountType
     */
    @Schema(
            required = true,
            description =
                    "The account type in the selected marketplace for which a payout must be initiated. For supported EU marketplaces, the only account type is `Standard Orders`.")
    public String getAccountType() {
        return accountType;
    }

    public void setAccountType(String accountType) {
        this.accountType = accountType;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InitiatePayoutRequest initiatePayoutRequest = (InitiatePayoutRequest) o;
        return Objects.equals(this.marketplaceId, initiatePayoutRequest.marketplaceId)
                && Objects.equals(this.accountType, initiatePayoutRequest.accountType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(marketplaceId, accountType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InitiatePayoutRequest {\n");

        sb.append("    marketplaceId: ").append(toIndentedString(marketplaceId)).append("\n");
        sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
