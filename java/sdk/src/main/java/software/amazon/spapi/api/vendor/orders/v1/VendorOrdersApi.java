/*
 * Selling Partner API for Retail Procurement Orders
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.vendor.orders.v1;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.vendor.orders.v1.GetPurchaseOrderResponse;
import software.amazon.spapi.models.vendor.orders.v1.GetPurchaseOrdersResponse;
import software.amazon.spapi.models.vendor.orders.v1.GetPurchaseOrdersStatusResponse;
import software.amazon.spapi.models.vendor.orders.v1.SubmitAcknowledgementRequest;
import software.amazon.spapi.models.vendor.orders.v1.SubmitAcknowledgementResponse;

public class VendorOrdersApi {
    private ApiClient apiClient;

    VendorOrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VendorOrdersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getPurchaseOrder
     *
     * @param purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes:
     *     8-character alpha-numeric code. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPurchaseOrderCall(
            String purchaseOrderNumber,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}"
                .replaceAll(
                        "\\{" + "purchaseOrderNumber" + "\\}", apiClient.escapeString(purchaseOrderNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrderValidateBeforeCall(
            String purchaseOrderNumber,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'purchaseOrderNumber' is set
        if (purchaseOrderNumber == null) {
            throw new ApiException(
                    "Missing the required parameter 'purchaseOrderNumber' when calling getPurchaseOrder(Async)");
        }

        okhttp3.Call call = getPurchaseOrderCall(purchaseOrderNumber, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes:
     *     8-character alpha-numeric code. (required)
     * @return GetPurchaseOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetPurchaseOrderResponse getPurchaseOrder(String purchaseOrderNumber) throws ApiException, LWAException {
        ApiResponse<GetPurchaseOrderResponse> resp = getPurchaseOrderWithHttpInfo(purchaseOrderNumber);
        return resp.getData();
    }

    /**
     * Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes:
     *     8-character alpha-numeric code. (required)
     * @return ApiResponse&lt;GetPurchaseOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetPurchaseOrderResponse> getPurchaseOrderWithHttpInfo(String purchaseOrderNumber)
            throws ApiException, LWAException {
        okhttp3.Call call = getPurchaseOrderValidateBeforeCall(purchaseOrderNumber, null, null);
        Type localVarReturnType = new TypeToken<GetPurchaseOrderResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns a purchase order based on the &#x60;purchaseOrderNumber&#x60; value that you specify.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes:
     *     8-character alpha-numeric code. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPurchaseOrderAsync(
            String purchaseOrderNumber, final ApiCallback<GetPurchaseOrderResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call =
                getPurchaseOrderValidateBeforeCall(purchaseOrderNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPurchaseOrderResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPurchaseOrders
     *
     * @param limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param createdAfter Purchase orders that became available after this time will be included in the result. Must be
     *     in ISO-8601 date/time format. (optional)
     * @param createdBefore Purchase orders that became available before this time will be included in the result. Must
     *     be in ISO-8601 date/time format. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there is more purchase orders than the specified result size limit. The
     *     token value is returned in the previous API call (optional)
     * @param includeDetails When true, returns purchase orders with complete details. Otherwise, only purchase order
     *     numbers are returned. Default value is true. (optional)
     * @param changedAfter Purchase orders that changed after this timestamp will be included in the result. Must be in
     *     ISO-8601 date/time format. (optional)
     * @param changedBefore Purchase orders that changed before this timestamp will be included in the result. Must be
     *     in ISO-8601 date/time format. (optional)
     * @param poItemState Current state of the purchase order item. If this value is Cancelled, this API will return
     *     purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
     *     (optional)
     * @param isPOChanged When true, returns purchase orders which were modified after the order was placed. Vendors are
     *     required to pull the changed purchase order and fulfill the updated purchase order and not the original one.
     *     Default value is false. (optional)
     * @param purchaseOrderState Filters purchase orders based on the purchase order state. (optional)
     * @param orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should
     *     be same as &#x27;sellingParty.partyId&#x27; in the purchase order. If not included in the filter, all
     *     purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client
     *     application are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPurchaseOrdersCall(
            Long limit,
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String sortOrder,
            String nextToken,
            String includeDetails,
            OffsetDateTime changedAfter,
            OffsetDateTime changedBefore,
            String poItemState,
            String isPOChanged,
            String purchaseOrderState,
            String orderingVendorCode,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/orders/v1/purchaseOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (createdAfter != null) localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (sortOrder != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));
        if (includeDetails != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("includeDetails", includeDetails));
        if (changedAfter != null) localVarQueryParams.addAll(apiClient.parameterToPair("changedAfter", changedAfter));
        if (changedBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("changedBefore", changedBefore));
        if (poItemState != null) localVarQueryParams.addAll(apiClient.parameterToPair("poItemState", poItemState));
        if (isPOChanged != null) localVarQueryParams.addAll(apiClient.parameterToPair("isPOChanged", isPOChanged));
        if (purchaseOrderState != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("purchaseOrderState", purchaseOrderState));
        if (orderingVendorCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("orderingVendorCode", orderingVendorCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrdersValidateBeforeCall(
            Long limit,
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String sortOrder,
            String nextToken,
            String includeDetails,
            OffsetDateTime changedAfter,
            OffsetDateTime changedBefore,
            String poItemState,
            String isPOChanged,
            String purchaseOrderState,
            String orderingVendorCode,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {

        okhttp3.Call call = getPurchaseOrdersCall(
                limit,
                createdAfter,
                createdBefore,
                sortOrder,
                nextToken,
                includeDetails,
                changedAfter,
                changedBefore,
                poItemState,
                isPOChanged,
                purchaseOrderState,
                orderingVendorCode,
                progressListener,
                progressRequestListener);
        return call;
    }

    /**
     * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time
     * frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and
     * &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to
     * get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the
     * &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param createdAfter Purchase orders that became available after this time will be included in the result. Must be
     *     in ISO-8601 date/time format. (optional)
     * @param createdBefore Purchase orders that became available before this time will be included in the result. Must
     *     be in ISO-8601 date/time format. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there is more purchase orders than the specified result size limit. The
     *     token value is returned in the previous API call (optional)
     * @param includeDetails When true, returns purchase orders with complete details. Otherwise, only purchase order
     *     numbers are returned. Default value is true. (optional)
     * @param changedAfter Purchase orders that changed after this timestamp will be included in the result. Must be in
     *     ISO-8601 date/time format. (optional)
     * @param changedBefore Purchase orders that changed before this timestamp will be included in the result. Must be
     *     in ISO-8601 date/time format. (optional)
     * @param poItemState Current state of the purchase order item. If this value is Cancelled, this API will return
     *     purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
     *     (optional)
     * @param isPOChanged When true, returns purchase orders which were modified after the order was placed. Vendors are
     *     required to pull the changed purchase order and fulfill the updated purchase order and not the original one.
     *     Default value is false. (optional)
     * @param purchaseOrderState Filters purchase orders based on the purchase order state. (optional)
     * @param orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should
     *     be same as &#x27;sellingParty.partyId&#x27; in the purchase order. If not included in the filter, all
     *     purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client
     *     application are returned. (optional)
     * @return GetPurchaseOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetPurchaseOrdersResponse getPurchaseOrders(
            Long limit,
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String sortOrder,
            String nextToken,
            String includeDetails,
            OffsetDateTime changedAfter,
            OffsetDateTime changedBefore,
            String poItemState,
            String isPOChanged,
            String purchaseOrderState,
            String orderingVendorCode)
            throws ApiException, LWAException {
        ApiResponse<GetPurchaseOrdersResponse> resp = getPurchaseOrdersWithHttpInfo(
                limit,
                createdAfter,
                createdBefore,
                sortOrder,
                nextToken,
                includeDetails,
                changedAfter,
                changedBefore,
                poItemState,
                isPOChanged,
                purchaseOrderState,
                orderingVendorCode);
        return resp.getData();
    }

    /**
     * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time
     * frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and
     * &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to
     * get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the
     * &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param createdAfter Purchase orders that became available after this time will be included in the result. Must be
     *     in ISO-8601 date/time format. (optional)
     * @param createdBefore Purchase orders that became available before this time will be included in the result. Must
     *     be in ISO-8601 date/time format. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there is more purchase orders than the specified result size limit. The
     *     token value is returned in the previous API call (optional)
     * @param includeDetails When true, returns purchase orders with complete details. Otherwise, only purchase order
     *     numbers are returned. Default value is true. (optional)
     * @param changedAfter Purchase orders that changed after this timestamp will be included in the result. Must be in
     *     ISO-8601 date/time format. (optional)
     * @param changedBefore Purchase orders that changed before this timestamp will be included in the result. Must be
     *     in ISO-8601 date/time format. (optional)
     * @param poItemState Current state of the purchase order item. If this value is Cancelled, this API will return
     *     purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
     *     (optional)
     * @param isPOChanged When true, returns purchase orders which were modified after the order was placed. Vendors are
     *     required to pull the changed purchase order and fulfill the updated purchase order and not the original one.
     *     Default value is false. (optional)
     * @param purchaseOrderState Filters purchase orders based on the purchase order state. (optional)
     * @param orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should
     *     be same as &#x27;sellingParty.partyId&#x27; in the purchase order. If not included in the filter, all
     *     purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client
     *     application are returned. (optional)
     * @return ApiResponse&lt;GetPurchaseOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetPurchaseOrdersResponse> getPurchaseOrdersWithHttpInfo(
            Long limit,
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String sortOrder,
            String nextToken,
            String includeDetails,
            OffsetDateTime changedAfter,
            OffsetDateTime changedBefore,
            String poItemState,
            String isPOChanged,
            String purchaseOrderState,
            String orderingVendorCode)
            throws ApiException, LWAException {
        okhttp3.Call call = getPurchaseOrdersValidateBeforeCall(
                limit,
                createdAfter,
                createdBefore,
                sortOrder,
                nextToken,
                includeDetails,
                changedAfter,
                changedBefore,
                poItemState,
                isPOChanged,
                purchaseOrderState,
                orderingVendorCode,
                null,
                null);
        Type localVarReturnType = new TypeToken<GetPurchaseOrdersResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns a list of purchase orders created or changed during the time frame that you specify. You
     * define the time frame using the &#x60;createdAfter&#x60;, &#x60;createdBefore&#x60;, &#x60;changedAfter&#x60; and
     * &#x60;changedBefore&#x60; parameters. The date range to search must not be more than 7 days. You can choose to
     * get only the purchase order numbers by setting &#x60;includeDetails&#x60; to false. You can then use the
     * &#x60;getPurchaseOrder&#x60; operation to receive details for a specific purchase order. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param createdAfter Purchase orders that became available after this time will be included in the result. Must be
     *     in ISO-8601 date/time format. (optional)
     * @param createdBefore Purchase orders that became available before this time will be included in the result. Must
     *     be in ISO-8601 date/time format. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there is more purchase orders than the specified result size limit. The
     *     token value is returned in the previous API call (optional)
     * @param includeDetails When true, returns purchase orders with complete details. Otherwise, only purchase order
     *     numbers are returned. Default value is true. (optional)
     * @param changedAfter Purchase orders that changed after this timestamp will be included in the result. Must be in
     *     ISO-8601 date/time format. (optional)
     * @param changedBefore Purchase orders that changed before this timestamp will be included in the result. Must be
     *     in ISO-8601 date/time format. (optional)
     * @param poItemState Current state of the purchase order item. If this value is Cancelled, this API will return
     *     purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
     *     (optional)
     * @param isPOChanged When true, returns purchase orders which were modified after the order was placed. Vendors are
     *     required to pull the changed purchase order and fulfill the updated purchase order and not the original one.
     *     Default value is false. (optional)
     * @param purchaseOrderState Filters purchase orders based on the purchase order state. (optional)
     * @param orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should
     *     be same as &#x27;sellingParty.partyId&#x27; in the purchase order. If not included in the filter, all
     *     purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client
     *     application are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPurchaseOrdersAsync(
            Long limit,
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String sortOrder,
            String nextToken,
            String includeDetails,
            OffsetDateTime changedAfter,
            OffsetDateTime changedBefore,
            String poItemState,
            String isPOChanged,
            String purchaseOrderState,
            String orderingVendorCode,
            final ApiCallback<GetPurchaseOrdersResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getPurchaseOrdersValidateBeforeCall(
                limit,
                createdAfter,
                createdBefore,
                sortOrder,
                nextToken,
                includeDetails,
                changedAfter,
                changedBefore,
                poItemState,
                isPOChanged,
                purchaseOrderState,
                orderingVendorCode,
                progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPurchaseOrdersResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPurchaseOrdersStatus
     *
     * @param limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there are more purchase orders than the specified result size limit.
     *     (optional)
     * @param createdAfter Purchase orders that became available after this timestamp will be included in the result.
     *     Must be in ISO-8601 date/time format. (optional)
     * @param createdBefore Purchase orders that became available before this timestamp will be included in the result.
     *     Must be in ISO-8601 date/time format. (optional)
     * @param updatedAfter Purchase orders for which the last purchase order update happened after this timestamp will
     *     be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param updatedBefore Purchase orders for which the last purchase order update happened before this timestamp will
     *     be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param purchaseOrderNumber Provides purchase order status for the specified purchase order number. (optional)
     * @param purchaseOrderStatus Filters purchase orders based on the specified purchase order status. If not included
     *     in filter, this will return purchase orders for all statuses. (optional)
     * @param itemConfirmationStatus Filters purchase orders based on their item confirmation status. If the item
     *     confirmation status is not included in the filter, purchase orders for all confirmation statuses are
     *     included. (optional)
     * @param itemReceiveStatus Filters purchase orders based on the purchase order&#x27;s item receive status. If the
     *     item receive status is not included in the filter, purchase orders for all receive statuses are included.
     *     (optional)
     * @param orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should
     *     be same as &#x27;sellingParty.partyId&#x27; in the purchase order. If not included in filter, all purchase
     *     orders for all the vendor codes that exist in the vendor group used to authorize API client application are
     *     returned. (optional)
     * @param shipToPartyId Filters purchase orders for a specific buyer&#x27;s Fulfillment Center/warehouse by
     *     providing ship to location id here. This value should be same as &#x27;shipToParty.partyId&#x27; in the
     *     purchase order. If not included in filter, this will return purchase orders for all the buyer&#x27;s
     *     warehouses used for vendor group purchase orders. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPurchaseOrdersStatusCall(
            Long limit,
            String sortOrder,
            String nextToken,
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            OffsetDateTime updatedAfter,
            OffsetDateTime updatedBefore,
            String purchaseOrderNumber,
            String purchaseOrderStatus,
            String itemConfirmationStatus,
            String itemReceiveStatus,
            String orderingVendorCode,
            String shipToPartyId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/orders/v1/purchaseOrdersStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortOrder != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));
        if (createdAfter != null) localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (updatedAfter != null) localVarQueryParams.addAll(apiClient.parameterToPair("updatedAfter", updatedAfter));
        if (updatedBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("updatedBefore", updatedBefore));
        if (purchaseOrderNumber != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("purchaseOrderNumber", purchaseOrderNumber));
        if (purchaseOrderStatus != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("purchaseOrderStatus", purchaseOrderStatus));
        if (itemConfirmationStatus != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("itemConfirmationStatus", itemConfirmationStatus));
        if (itemReceiveStatus != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("itemReceiveStatus", itemReceiveStatus));
        if (orderingVendorCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("orderingVendorCode", orderingVendorCode));
        if (shipToPartyId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("shipToPartyId", shipToPartyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchaseOrdersStatusValidateBeforeCall(
            Long limit,
            String sortOrder,
            String nextToken,
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            OffsetDateTime updatedAfter,
            OffsetDateTime updatedBefore,
            String purchaseOrderNumber,
            String purchaseOrderStatus,
            String itemConfirmationStatus,
            String itemReceiveStatus,
            String orderingVendorCode,
            String shipToPartyId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {

        okhttp3.Call call = getPurchaseOrdersStatusCall(
                limit,
                sortOrder,
                nextToken,
                createdAfter,
                createdBefore,
                updatedAfter,
                updatedBefore,
                purchaseOrderNumber,
                purchaseOrderStatus,
                itemConfirmationStatus,
                itemReceiveStatus,
                orderingVendorCode,
                shipToPartyId,
                progressListener,
                progressRequestListener);
        return call;
    }

    /**
     * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than
     * 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order
     * status by providing the purchase order number. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there are more purchase orders than the specified result size limit.
     *     (optional)
     * @param createdAfter Purchase orders that became available after this timestamp will be included in the result.
     *     Must be in ISO-8601 date/time format. (optional)
     * @param createdBefore Purchase orders that became available before this timestamp will be included in the result.
     *     Must be in ISO-8601 date/time format. (optional)
     * @param updatedAfter Purchase orders for which the last purchase order update happened after this timestamp will
     *     be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param updatedBefore Purchase orders for which the last purchase order update happened before this timestamp will
     *     be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param purchaseOrderNumber Provides purchase order status for the specified purchase order number. (optional)
     * @param purchaseOrderStatus Filters purchase orders based on the specified purchase order status. If not included
     *     in filter, this will return purchase orders for all statuses. (optional)
     * @param itemConfirmationStatus Filters purchase orders based on their item confirmation status. If the item
     *     confirmation status is not included in the filter, purchase orders for all confirmation statuses are
     *     included. (optional)
     * @param itemReceiveStatus Filters purchase orders based on the purchase order&#x27;s item receive status. If the
     *     item receive status is not included in the filter, purchase orders for all receive statuses are included.
     *     (optional)
     * @param orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should
     *     be same as &#x27;sellingParty.partyId&#x27; in the purchase order. If not included in filter, all purchase
     *     orders for all the vendor codes that exist in the vendor group used to authorize API client application are
     *     returned. (optional)
     * @param shipToPartyId Filters purchase orders for a specific buyer&#x27;s Fulfillment Center/warehouse by
     *     providing ship to location id here. This value should be same as &#x27;shipToParty.partyId&#x27; in the
     *     purchase order. If not included in filter, this will return purchase orders for all the buyer&#x27;s
     *     warehouses used for vendor group purchase orders. (optional)
     * @return GetPurchaseOrdersStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetPurchaseOrdersStatusResponse getPurchaseOrdersStatus(
            Long limit,
            String sortOrder,
            String nextToken,
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            OffsetDateTime updatedAfter,
            OffsetDateTime updatedBefore,
            String purchaseOrderNumber,
            String purchaseOrderStatus,
            String itemConfirmationStatus,
            String itemReceiveStatus,
            String orderingVendorCode,
            String shipToPartyId)
            throws ApiException, LWAException {
        ApiResponse<GetPurchaseOrdersStatusResponse> resp = getPurchaseOrdersStatusWithHttpInfo(
                limit,
                sortOrder,
                nextToken,
                createdAfter,
                createdBefore,
                updatedAfter,
                updatedBefore,
                purchaseOrderNumber,
                purchaseOrderStatus,
                itemConfirmationStatus,
                itemReceiveStatus,
                orderingVendorCode,
                shipToPartyId);
        return resp.getData();
    }

    /**
     * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than
     * 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order
     * status by providing the purchase order number. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there are more purchase orders than the specified result size limit.
     *     (optional)
     * @param createdAfter Purchase orders that became available after this timestamp will be included in the result.
     *     Must be in ISO-8601 date/time format. (optional)
     * @param createdBefore Purchase orders that became available before this timestamp will be included in the result.
     *     Must be in ISO-8601 date/time format. (optional)
     * @param updatedAfter Purchase orders for which the last purchase order update happened after this timestamp will
     *     be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param updatedBefore Purchase orders for which the last purchase order update happened before this timestamp will
     *     be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param purchaseOrderNumber Provides purchase order status for the specified purchase order number. (optional)
     * @param purchaseOrderStatus Filters purchase orders based on the specified purchase order status. If not included
     *     in filter, this will return purchase orders for all statuses. (optional)
     * @param itemConfirmationStatus Filters purchase orders based on their item confirmation status. If the item
     *     confirmation status is not included in the filter, purchase orders for all confirmation statuses are
     *     included. (optional)
     * @param itemReceiveStatus Filters purchase orders based on the purchase order&#x27;s item receive status. If the
     *     item receive status is not included in the filter, purchase orders for all receive statuses are included.
     *     (optional)
     * @param orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should
     *     be same as &#x27;sellingParty.partyId&#x27; in the purchase order. If not included in filter, all purchase
     *     orders for all the vendor codes that exist in the vendor group used to authorize API client application are
     *     returned. (optional)
     * @param shipToPartyId Filters purchase orders for a specific buyer&#x27;s Fulfillment Center/warehouse by
     *     providing ship to location id here. This value should be same as &#x27;shipToParty.partyId&#x27; in the
     *     purchase order. If not included in filter, this will return purchase orders for all the buyer&#x27;s
     *     warehouses used for vendor group purchase orders. (optional)
     * @return ApiResponse&lt;GetPurchaseOrdersStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetPurchaseOrdersStatusResponse> getPurchaseOrdersStatusWithHttpInfo(
            Long limit,
            String sortOrder,
            String nextToken,
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            OffsetDateTime updatedAfter,
            OffsetDateTime updatedBefore,
            String purchaseOrderNumber,
            String purchaseOrderStatus,
            String itemConfirmationStatus,
            String itemReceiveStatus,
            String orderingVendorCode,
            String shipToPartyId)
            throws ApiException, LWAException {
        okhttp3.Call call = getPurchaseOrdersStatusValidateBeforeCall(
                limit,
                sortOrder,
                nextToken,
                createdAfter,
                createdBefore,
                updatedAfter,
                updatedBefore,
                purchaseOrderNumber,
                purchaseOrderStatus,
                itemConfirmationStatus,
                itemReceiveStatus,
                orderingVendorCode,
                shipToPartyId,
                null,
                null);
        Type localVarReturnType = new TypeToken<GetPurchaseOrdersStatusResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns purchase order statuses based on the filters that you specify. Date range to search must
     * not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a
     * single purchase order status by providing the purchase order number. **Usage Plan:** | Rate (requests per second)
     * | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage
     * plan rate limits that were applied to the requested operation, when available. The preceding table indicates the
     * default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there are more purchase orders than the specified result size limit.
     *     (optional)
     * @param createdAfter Purchase orders that became available after this timestamp will be included in the result.
     *     Must be in ISO-8601 date/time format. (optional)
     * @param createdBefore Purchase orders that became available before this timestamp will be included in the result.
     *     Must be in ISO-8601 date/time format. (optional)
     * @param updatedAfter Purchase orders for which the last purchase order update happened after this timestamp will
     *     be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param updatedBefore Purchase orders for which the last purchase order update happened before this timestamp will
     *     be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param purchaseOrderNumber Provides purchase order status for the specified purchase order number. (optional)
     * @param purchaseOrderStatus Filters purchase orders based on the specified purchase order status. If not included
     *     in filter, this will return purchase orders for all statuses. (optional)
     * @param itemConfirmationStatus Filters purchase orders based on their item confirmation status. If the item
     *     confirmation status is not included in the filter, purchase orders for all confirmation statuses are
     *     included. (optional)
     * @param itemReceiveStatus Filters purchase orders based on the purchase order&#x27;s item receive status. If the
     *     item receive status is not included in the filter, purchase orders for all receive statuses are included.
     *     (optional)
     * @param orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should
     *     be same as &#x27;sellingParty.partyId&#x27; in the purchase order. If not included in filter, all purchase
     *     orders for all the vendor codes that exist in the vendor group used to authorize API client application are
     *     returned. (optional)
     * @param shipToPartyId Filters purchase orders for a specific buyer&#x27;s Fulfillment Center/warehouse by
     *     providing ship to location id here. This value should be same as &#x27;shipToParty.partyId&#x27; in the
     *     purchase order. If not included in filter, this will return purchase orders for all the buyer&#x27;s
     *     warehouses used for vendor group purchase orders. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPurchaseOrdersStatusAsync(
            Long limit,
            String sortOrder,
            String nextToken,
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            OffsetDateTime updatedAfter,
            OffsetDateTime updatedBefore,
            String purchaseOrderNumber,
            String purchaseOrderStatus,
            String itemConfirmationStatus,
            String itemReceiveStatus,
            String orderingVendorCode,
            String shipToPartyId,
            final ApiCallback<GetPurchaseOrdersStatusResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getPurchaseOrdersStatusValidateBeforeCall(
                limit,
                sortOrder,
                nextToken,
                createdAfter,
                createdBefore,
                updatedAfter,
                updatedBefore,
                purchaseOrderNumber,
                purchaseOrderStatus,
                itemConfirmationStatus,
                itemReceiveStatus,
                orderingVendorCode,
                shipToPartyId,
                progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPurchaseOrdersStatusResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitAcknowledgement
     *
     * @param body Submits acknowledgements for one or more purchase orders from a vendor. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call submitAcknowledgementCall(
            SubmitAcknowledgementRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vendor/orders/v1/acknowledgements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitAcknowledgementValidateBeforeCall(
            SubmitAcknowledgementRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling submitAcknowledgement(Async)");
        }

        okhttp3.Call call = submitAcknowledgementCall(body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Submits acknowledgements for one or more purchase orders. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table indicates the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Submits acknowledgements for one or more purchase orders from a vendor. (required)
     * @return SubmitAcknowledgementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public SubmitAcknowledgementResponse submitAcknowledgement(SubmitAcknowledgementRequest body)
            throws ApiException, LWAException {
        ApiResponse<SubmitAcknowledgementResponse> resp = submitAcknowledgementWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Submits acknowledgements for one or more purchase orders. **Usage Plan:** | Rate (requests per second) | Burst |
     * | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate
     * limits that were applied to the requested operation, when available. The preceding table indicates the default
     * rate and burst values for this operation. Selling partners whose business demands require higher throughput may
     * have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Submits acknowledgements for one or more purchase orders from a vendor. (required)
     * @return ApiResponse&lt;SubmitAcknowledgementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<SubmitAcknowledgementResponse> submitAcknowledgementWithHttpInfo(
            SubmitAcknowledgementRequest body) throws ApiException, LWAException {
        okhttp3.Call call = submitAcknowledgementValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<SubmitAcknowledgementResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Submits acknowledgements for one or more purchase orders. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Submits acknowledgements for one or more purchase orders from a vendor. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call submitAcknowledgementAsync(
            SubmitAcknowledgementRequest body, final ApiCallback<SubmitAcknowledgementResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = submitAcknowledgementValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubmitAcknowledgementResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private RateLimitConfiguration rateLimitConfiguration;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration) {
            this.rateLimitConfiguration = rateLimitConfiguration;
            return this;
        }

        public Builder disableRateLimitOnRequests() {
            this.rateLimitConfiguration = null;
            return this;
        }

        public VendorOrdersApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new VendorOrdersApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint)
                    .setRateLimiter(rateLimitConfiguration));
        }
    }
}
