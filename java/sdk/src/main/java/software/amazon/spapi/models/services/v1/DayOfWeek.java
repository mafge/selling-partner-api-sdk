/*
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.services.v1;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/** The day of the week. */
@JsonAdapter(DayOfWeek.Adapter.class)
public enum DayOfWeek {
    @SerializedName("MONDAY")
    MONDAY("MONDAY"),
    @SerializedName("TUESDAY")
    TUESDAY("TUESDAY"),
    @SerializedName("WEDNESDAY")
    WEDNESDAY("WEDNESDAY"),
    @SerializedName("THURSDAY")
    THURSDAY("THURSDAY"),
    @SerializedName("FRIDAY")
    FRIDAY("FRIDAY"),
    @SerializedName("SATURDAY")
    SATURDAY("SATURDAY"),
    @SerializedName("SUNDAY")
    SUNDAY("SUNDAY");

    private String value;

    DayOfWeek(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static DayOfWeek fromValue(String input) {
        for (DayOfWeek b : DayOfWeek.values()) {
            if (b.value.equals(input)) {
                return b;
            }
        }
        return null;
    }

    public static class Adapter extends TypeAdapter<DayOfWeek> {
        @Override
        public void write(final JsonWriter jsonWriter, final DayOfWeek enumeration) throws IOException {
            jsonWriter.value(String.valueOf(enumeration.getValue()));
        }

        @Override
        public DayOfWeek read(final JsonReader jsonReader) throws IOException {
            Object value = jsonReader.nextString();
            return DayOfWeek.fromValue((String) (value));
        }
    }
}
