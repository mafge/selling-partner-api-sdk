/*
 * Selling Partner API for Supply Sources
 * Manage configurations and capabilities of seller supply sources.
 *
 * OpenAPI spec version: 2020-07-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.supplysources.v2020_07_01;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.supplysources.v2020_07_01.CreateSupplySourceRequest;
import software.amazon.spapi.models.supplysources.v2020_07_01.CreateSupplySourceResponse;
import software.amazon.spapi.models.supplysources.v2020_07_01.ErrorList;
import software.amazon.spapi.models.supplysources.v2020_07_01.GetSupplySourcesResponse;
import software.amazon.spapi.models.supplysources.v2020_07_01.SupplySource;
import software.amazon.spapi.models.supplysources.v2020_07_01.UpdateSupplySourceRequest;
import software.amazon.spapi.models.supplysources.v2020_07_01.UpdateSupplySourceStatusRequest;

public class SupplySourcesApi {
    private ApiClient apiClient;

    SupplySourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SupplySourcesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for archiveSupplySource
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call archiveSupplySourceCall(
            String supplySourceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}"
                .replaceAll("\\{" + "supplySourceId" + "\\}", apiClient.escapeString(supplySourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveSupplySourceValidateBeforeCall(
            String supplySourceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'supplySourceId' is set
        if (supplySourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'supplySourceId' when calling archiveSupplySource(Async)");
        }

        okhttp3.Call call = archiveSupplySourceCall(supplySourceId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Archive a supply source, making it inactive. Cannot be undone.
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @return ErrorList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ErrorList archiveSupplySource(String supplySourceId) throws ApiException, LWAException {
        ApiResponse<ErrorList> resp = archiveSupplySourceWithHttpInfo(supplySourceId);
        return resp.getData();
    }

    /**
     * Archive a supply source, making it inactive. Cannot be undone.
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @return ApiResponse&lt;ErrorList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ErrorList> archiveSupplySourceWithHttpInfo(String supplySourceId)
            throws ApiException, LWAException {
        okhttp3.Call call = archiveSupplySourceValidateBeforeCall(supplySourceId, null, null);
        Type localVarReturnType = new TypeToken<ErrorList>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Archive a supply source, making it inactive. Cannot be undone.
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call archiveSupplySourceAsync(String supplySourceId, final ApiCallback<ErrorList> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call =
                archiveSupplySourceValidateBeforeCall(supplySourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ErrorList>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSupplySource
     *
     * @param body A request to create a supply source. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createSupplySourceCall(
            CreateSupplySourceRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/supplySources/2020-07-01/supplySources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSupplySourceValidateBeforeCall(
            CreateSupplySourceRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSupplySource(Async)");
        }

        okhttp3.Call call = createSupplySourceCall(body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Create a new supply source.
     *
     * @param body A request to create a supply source. (required)
     * @return CreateSupplySourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateSupplySourceResponse createSupplySource(CreateSupplySourceRequest body)
            throws ApiException, LWAException {
        ApiResponse<CreateSupplySourceResponse> resp = createSupplySourceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new supply source.
     *
     * @param body A request to create a supply source. (required)
     * @return ApiResponse&lt;CreateSupplySourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateSupplySourceResponse> createSupplySourceWithHttpInfo(CreateSupplySourceRequest body)
            throws ApiException, LWAException {
        okhttp3.Call call = createSupplySourceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CreateSupplySourceResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Create a new supply source.
     *
     * @param body A request to create a supply source. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createSupplySourceAsync(
            CreateSupplySourceRequest body, final ApiCallback<CreateSupplySourceResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createSupplySourceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSupplySourceResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSupplySource
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getSupplySourceCall(
            String supplySourceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}"
                .replaceAll("\\{" + "supplySourceId" + "\\}", apiClient.escapeString(supplySourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSupplySourceValidateBeforeCall(
            String supplySourceId,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'supplySourceId' is set
        if (supplySourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'supplySourceId' when calling getSupplySource(Async)");
        }

        okhttp3.Call call = getSupplySourceCall(supplySourceId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Retrieve a supply source.
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @return SupplySource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public SupplySource getSupplySource(String supplySourceId) throws ApiException, LWAException {
        ApiResponse<SupplySource> resp = getSupplySourceWithHttpInfo(supplySourceId);
        return resp.getData();
    }

    /**
     * Retrieve a supply source.
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @return ApiResponse&lt;SupplySource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<SupplySource> getSupplySourceWithHttpInfo(String supplySourceId)
            throws ApiException, LWAException {
        okhttp3.Call call = getSupplySourceValidateBeforeCall(supplySourceId, null, null);
        Type localVarReturnType = new TypeToken<SupplySource>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Retrieve a supply source.
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getSupplySourceAsync(String supplySourceId, final ApiCallback<SupplySource> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call =
                getSupplySourceValidateBeforeCall(supplySourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SupplySource>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSupplySources
     *
     * @param nextPageToken The pagination token to retrieve a specific page of results. (optional)
     * @param pageSize The number of supply sources to return per paginated request. (optional, default to 10.0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getSupplySourcesCall(
            String nextPageToken,
            BigDecimal pageSize,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supplySources/2020-07-01/supplySources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nextPageToken != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("nextPageToken", nextPageToken));
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSupplySourcesValidateBeforeCall(
            String nextPageToken,
            BigDecimal pageSize,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {

        okhttp3.Call call = getSupplySourcesCall(nextPageToken, pageSize, progressListener, progressRequestListener);
        return call;
    }

    /**
     * The path to retrieve paginated supply sources.
     *
     * @param nextPageToken The pagination token to retrieve a specific page of results. (optional)
     * @param pageSize The number of supply sources to return per paginated request. (optional, default to 10.0)
     * @return GetSupplySourcesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetSupplySourcesResponse getSupplySources(String nextPageToken, BigDecimal pageSize)
            throws ApiException, LWAException {
        ApiResponse<GetSupplySourcesResponse> resp = getSupplySourcesWithHttpInfo(nextPageToken, pageSize);
        return resp.getData();
    }

    /**
     * The path to retrieve paginated supply sources.
     *
     * @param nextPageToken The pagination token to retrieve a specific page of results. (optional)
     * @param pageSize The number of supply sources to return per paginated request. (optional, default to 10.0)
     * @return ApiResponse&lt;GetSupplySourcesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetSupplySourcesResponse> getSupplySourcesWithHttpInfo(String nextPageToken, BigDecimal pageSize)
            throws ApiException, LWAException {
        okhttp3.Call call = getSupplySourcesValidateBeforeCall(nextPageToken, pageSize, null, null);
        Type localVarReturnType = new TypeToken<GetSupplySourcesResponse>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) The path to retrieve paginated supply sources.
     *
     * @param nextPageToken The pagination token to retrieve a specific page of results. (optional)
     * @param pageSize The number of supply sources to return per paginated request. (optional, default to 10.0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getSupplySourcesAsync(
            String nextPageToken, BigDecimal pageSize, final ApiCallback<GetSupplySourcesResponse> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call =
                getSupplySourcesValidateBeforeCall(nextPageToken, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSupplySourcesResponse>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSupplySource
     *
     * @param supplySourceId The unique identitier of a supply source. (required)
     * @param body (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateSupplySourceCall(
            String supplySourceId,
            UpdateSupplySourceRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}"
                .replaceAll("\\{" + "supplySourceId" + "\\}", apiClient.escapeString(supplySourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSupplySourceValidateBeforeCall(
            String supplySourceId,
            UpdateSupplySourceRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'supplySourceId' is set
        if (supplySourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'supplySourceId' when calling updateSupplySource(Async)");
        }

        okhttp3.Call call = updateSupplySourceCall(supplySourceId, body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Update the configuration and capabilities of a supply source.
     *
     * @param supplySourceId The unique identitier of a supply source. (required)
     * @param body (optional)
     * @return ErrorList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ErrorList updateSupplySource(String supplySourceId, UpdateSupplySourceRequest body)
            throws ApiException, LWAException {
        ApiResponse<ErrorList> resp = updateSupplySourceWithHttpInfo(supplySourceId, body);
        return resp.getData();
    }

    /**
     * Update the configuration and capabilities of a supply source.
     *
     * @param supplySourceId The unique identitier of a supply source. (required)
     * @param body (optional)
     * @return ApiResponse&lt;ErrorList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ErrorList> updateSupplySourceWithHttpInfo(String supplySourceId, UpdateSupplySourceRequest body)
            throws ApiException, LWAException {
        okhttp3.Call call = updateSupplySourceValidateBeforeCall(supplySourceId, body, null, null);
        Type localVarReturnType = new TypeToken<ErrorList>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Update the configuration and capabilities of a supply source.
     *
     * @param supplySourceId The unique identitier of a supply source. (required)
     * @param body (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateSupplySourceAsync(
            String supplySourceId, UpdateSupplySourceRequest body, final ApiCallback<ErrorList> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call =
                updateSupplySourceValidateBeforeCall(supplySourceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ErrorList>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSupplySourceStatus
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @param body (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateSupplySourceStatusCall(
            String supplySourceId,
            UpdateSupplySourceStatusRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/supplySources/2020-07-01/supplySources/{supplySourceId}/status"
                .replaceAll("\\{" + "supplySourceId" + "\\}", apiClient.escapeString(supplySourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSupplySourceStatusValidateBeforeCall(
            String supplySourceId,
            UpdateSupplySourceStatusRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'supplySourceId' is set
        if (supplySourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'supplySourceId' when calling updateSupplySourceStatus(Async)");
        }

        okhttp3.Call call =
                updateSupplySourceStatusCall(supplySourceId, body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Update the status of a supply source.
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @param body (optional)
     * @return ErrorList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ErrorList updateSupplySourceStatus(String supplySourceId, UpdateSupplySourceStatusRequest body)
            throws ApiException, LWAException {
        ApiResponse<ErrorList> resp = updateSupplySourceStatusWithHttpInfo(supplySourceId, body);
        return resp.getData();
    }

    /**
     * Update the status of a supply source.
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @param body (optional)
     * @return ApiResponse&lt;ErrorList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ErrorList> updateSupplySourceStatusWithHttpInfo(
            String supplySourceId, UpdateSupplySourceStatusRequest body) throws ApiException, LWAException {
        okhttp3.Call call = updateSupplySourceStatusValidateBeforeCall(supplySourceId, body, null, null);
        Type localVarReturnType = new TypeToken<ErrorList>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Update the status of a supply source.
     *
     * @param supplySourceId The unique identifier of a supply source. (required)
     * @param body (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateSupplySourceStatusAsync(
            String supplySourceId, UpdateSupplySourceStatusRequest body, final ApiCallback<ErrorList> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateSupplySourceStatusValidateBeforeCall(
                supplySourceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ErrorList>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private RateLimitConfiguration rateLimitConfiguration;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration) {
            this.rateLimitConfiguration = rateLimitConfiguration;
            return this;
        }

        public Builder disableRateLimitOnRequests() {
            this.rateLimitConfiguration = null;
            return this;
        }

        public SupplySourcesApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new SupplySourcesApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint)
                    .setRateLimiter(rateLimitConfiguration));
        }
    }
}
