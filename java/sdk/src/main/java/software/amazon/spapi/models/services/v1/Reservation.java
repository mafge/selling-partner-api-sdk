/*
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.services.v1;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Objects;

/** Reservation object reduces the capacity of a resource. */
@Schema(description = "Reservation object reduces the capacity of a resource.")
public class Reservation {
    @SerializedName("reservationId")
    private String reservationId = null;

    /** Type of reservation. */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        @SerializedName("APPOINTMENT")
        APPOINTMENT("APPOINTMENT"),
        @SerializedName("TRAVEL")
        TRAVEL("TRAVEL"),
        @SerializedName("VACATION")
        VACATION("VACATION"),
        @SerializedName("BREAK")
        BREAK("BREAK"),
        @SerializedName("TRAINING")
        TRAINING("TRAINING");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TypeEnum fromValue(String input) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return TypeEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("type")
    private TypeEnum type = null;

    @SerializedName("availability")
    private AvailabilityRecord availability = null;

    public Reservation reservationId(String reservationId) {
        this.reservationId = reservationId;
        return this;
    }

    /**
     * Unique identifier for a reservation. If present, it is treated as an update reservation request and will update
     * the corresponding reservation. Otherwise, it is treated as a new create reservation request.
     *
     * @return reservationId
     */
    @Schema(
            description =
                    "Unique identifier for a reservation. If present, it is treated as an update reservation request and will update the corresponding reservation. Otherwise, it is treated as a new create reservation request.")
    public String getReservationId() {
        return reservationId;
    }

    public void setReservationId(String reservationId) {
        this.reservationId = reservationId;
    }

    public Reservation type(TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Type of reservation.
     *
     * @return type
     */
    @Schema(required = true, description = "Type of reservation.")
    public TypeEnum getType() {
        return type;
    }

    public void setType(TypeEnum type) {
        this.type = type;
    }

    public Reservation availability(AvailabilityRecord availability) {
        this.availability = availability;
        return this;
    }

    /**
     * Get availability
     *
     * @return availability
     */
    @Schema(required = true, description = "")
    public AvailabilityRecord getAvailability() {
        return availability;
    }

    public void setAvailability(AvailabilityRecord availability) {
        this.availability = availability;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Reservation reservation = (Reservation) o;
        return Objects.equals(this.reservationId, reservation.reservationId)
                && Objects.equals(this.type, reservation.type)
                && Objects.equals(this.availability, reservation.availability);
    }

    @Override
    public int hashCode() {
        return Objects.hash(reservationId, type, availability);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Reservation {\n");

        sb.append("    reservationId: ").append(toIndentedString(reservationId)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
