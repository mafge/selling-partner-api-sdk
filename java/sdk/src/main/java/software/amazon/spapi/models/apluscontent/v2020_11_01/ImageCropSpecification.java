/*
 * Selling Partner API for A+ Content Management
 * Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.
 *
 * OpenAPI spec version: 2020-11-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.apluscontent.v2020_11_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/**
 * The instructions for optionally cropping an image. If you don&#x27;t want to crop the image, set the dimensions to
 * the original image size. If the image is cropped and you don&#x27;t include offset values, the coordinates of the top
 * left corner of the cropped image are set to (0,0) by default.
 */
@Schema(
        description =
                "The instructions for optionally cropping an image. If you don't want to crop the image, set the dimensions to the original image size. If the image is cropped and you don't include offset values, the coordinates of the top left corner of the cropped image are set to (0,0) by default.")
public class ImageCropSpecification {
    @SerializedName("size")
    private ImageDimensions size = null;

    @SerializedName("offset")
    private ImageOffsets offset = null;

    public ImageCropSpecification size(ImageDimensions size) {
        this.size = size;
        return this;
    }

    /**
     * Get size
     *
     * @return size
     */
    @Schema(required = true, description = "")
    public ImageDimensions getSize() {
        return size;
    }

    public void setSize(ImageDimensions size) {
        this.size = size;
    }

    public ImageCropSpecification offset(ImageOffsets offset) {
        this.offset = offset;
        return this;
    }

    /**
     * Get offset
     *
     * @return offset
     */
    @Schema(description = "")
    public ImageOffsets getOffset() {
        return offset;
    }

    public void setOffset(ImageOffsets offset) {
        this.offset = offset;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ImageCropSpecification imageCropSpecification = (ImageCropSpecification) o;
        return Objects.equals(this.size, imageCropSpecification.size)
                && Objects.equals(this.offset, imageCropSpecification.offset);
    }

    @Override
    public int hashCode() {
        return Objects.hash(size, offset);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ImageCropSpecification {\n");

        sb.append("    size: ").append(toIndentedString(size)).append("\n");
        sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
