/*
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.merchantfulfillment.v0;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * An enumeration of predefined parcel tokens. If you specify a &#x60;PredefinedPackageDimensions&#x60; token, you are
 * not obligated to use a branded package from a carrier. For example, if you specify the &#x60;FedEx_Box_10kg&#x60;
 * token, you do not have to use that particular package from FedEx. You are only obligated to use a box that matches
 * the dimensions specified by the token. Note: Carriers can have restrictions on the type of package allowed for
 * certain ship methods. Check the carrier website for details. Example: Flat rate pricing is available when materials
 * are sent by USPS in a USPS-produced Flat Rate envelope or box.
 */
@JsonAdapter(PredefinedPackageDimensions.Adapter.class)
public enum PredefinedPackageDimensions {
    @SerializedName("FedEx_Box_10kg")
    FEDEX_BOX_10KG("FedEx_Box_10kg"),
    @SerializedName("FedEx_Box_25kg")
    FEDEX_BOX_25KG("FedEx_Box_25kg"),
    @SerializedName("FedEx_Box_Extra_Large_1")
    FEDEX_BOX_EXTRA_LARGE_1("FedEx_Box_Extra_Large_1"),
    @SerializedName("FedEx_Box_Extra_Large_2")
    FEDEX_BOX_EXTRA_LARGE_2("FedEx_Box_Extra_Large_2"),
    @SerializedName("FedEx_Box_Large_1")
    FEDEX_BOX_LARGE_1("FedEx_Box_Large_1"),
    @SerializedName("FedEx_Box_Large_2")
    FEDEX_BOX_LARGE_2("FedEx_Box_Large_2"),
    @SerializedName("FedEx_Box_Medium_1")
    FEDEX_BOX_MEDIUM_1("FedEx_Box_Medium_1"),
    @SerializedName("FedEx_Box_Medium_2")
    FEDEX_BOX_MEDIUM_2("FedEx_Box_Medium_2"),
    @SerializedName("FedEx_Box_Small_1")
    FEDEX_BOX_SMALL_1("FedEx_Box_Small_1"),
    @SerializedName("FedEx_Box_Small_2")
    FEDEX_BOX_SMALL_2("FedEx_Box_Small_2"),
    @SerializedName("FedEx_Envelope")
    FEDEX_ENVELOPE("FedEx_Envelope"),
    @SerializedName("FedEx_Padded_Pak")
    FEDEX_PADDED_PAK("FedEx_Padded_Pak"),
    @SerializedName("FedEx_Pak_1")
    FEDEX_PAK_1("FedEx_Pak_1"),
    @SerializedName("FedEx_Pak_2")
    FEDEX_PAK_2("FedEx_Pak_2"),
    @SerializedName("FedEx_Tube")
    FEDEX_TUBE("FedEx_Tube"),
    @SerializedName("FedEx_XL_Pak")
    FEDEX_XL_PAK("FedEx_XL_Pak"),
    @SerializedName("UPS_Box_10kg")
    UPS_BOX_10KG("UPS_Box_10kg"),
    @SerializedName("UPS_Box_25kg")
    UPS_BOX_25KG("UPS_Box_25kg"),
    @SerializedName("UPS_Express_Box")
    UPS_EXPRESS_BOX("UPS_Express_Box"),
    @SerializedName("UPS_Express_Box_Large")
    UPS_EXPRESS_BOX_LARGE("UPS_Express_Box_Large"),
    @SerializedName("UPS_Express_Box_Medium")
    UPS_EXPRESS_BOX_MEDIUM("UPS_Express_Box_Medium"),
    @SerializedName("UPS_Express_Box_Small")
    UPS_EXPRESS_BOX_SMALL("UPS_Express_Box_Small"),
    @SerializedName("UPS_Express_Envelope")
    UPS_EXPRESS_ENVELOPE("UPS_Express_Envelope"),
    @SerializedName("UPS_Express_Hard_Pak")
    UPS_EXPRESS_HARD_PAK("UPS_Express_Hard_Pak"),
    @SerializedName("UPS_Express_Legal_Envelope")
    UPS_EXPRESS_LEGAL_ENVELOPE("UPS_Express_Legal_Envelope"),
    @SerializedName("UPS_Express_Pak")
    UPS_EXPRESS_PAK("UPS_Express_Pak"),
    @SerializedName("UPS_Express_Tube")
    UPS_EXPRESS_TUBE("UPS_Express_Tube"),
    @SerializedName("UPS_Laboratory_Pak")
    UPS_LABORATORY_PAK("UPS_Laboratory_Pak"),
    @SerializedName("UPS_Pad_Pak")
    UPS_PAD_PAK("UPS_Pad_Pak"),
    @SerializedName("UPS_Pallet")
    UPS_PALLET("UPS_Pallet"),
    @SerializedName("USPS_Card")
    USPS_CARD("USPS_Card"),
    @SerializedName("USPS_Flat")
    USPS_FLAT("USPS_Flat"),
    @SerializedName("USPS_FlatRateCardboardEnvelope")
    USPS_FLATRATECARDBOARDENVELOPE("USPS_FlatRateCardboardEnvelope"),
    @SerializedName("USPS_FlatRateEnvelope")
    USPS_FLATRATEENVELOPE("USPS_FlatRateEnvelope"),
    @SerializedName("USPS_FlatRateGiftCardEnvelope")
    USPS_FLATRATEGIFTCARDENVELOPE("USPS_FlatRateGiftCardEnvelope"),
    @SerializedName("USPS_FlatRateLegalEnvelope")
    USPS_FLATRATELEGALENVELOPE("USPS_FlatRateLegalEnvelope"),
    @SerializedName("USPS_FlatRatePaddedEnvelope")
    USPS_FLATRATEPADDEDENVELOPE("USPS_FlatRatePaddedEnvelope"),
    @SerializedName("USPS_FlatRateWindowEnvelope")
    USPS_FLATRATEWINDOWENVELOPE("USPS_FlatRateWindowEnvelope"),
    @SerializedName("USPS_LargeFlatRateBoardGameBox")
    USPS_LARGEFLATRATEBOARDGAMEBOX("USPS_LargeFlatRateBoardGameBox"),
    @SerializedName("USPS_LargeFlatRateBox")
    USPS_LARGEFLATRATEBOX("USPS_LargeFlatRateBox"),
    @SerializedName("USPS_Letter")
    USPS_LETTER("USPS_Letter"),
    @SerializedName("USPS_MediumFlatRateBox1")
    USPS_MEDIUMFLATRATEBOX1("USPS_MediumFlatRateBox1"),
    @SerializedName("USPS_MediumFlatRateBox2")
    USPS_MEDIUMFLATRATEBOX2("USPS_MediumFlatRateBox2"),
    @SerializedName("USPS_RegionalRateBoxA1")
    USPS_REGIONALRATEBOXA1("USPS_RegionalRateBoxA1"),
    @SerializedName("USPS_RegionalRateBoxA2")
    USPS_REGIONALRATEBOXA2("USPS_RegionalRateBoxA2"),
    @SerializedName("USPS_RegionalRateBoxB1")
    USPS_REGIONALRATEBOXB1("USPS_RegionalRateBoxB1"),
    @SerializedName("USPS_RegionalRateBoxB2")
    USPS_REGIONALRATEBOXB2("USPS_RegionalRateBoxB2"),
    @SerializedName("USPS_RegionalRateBoxC")
    USPS_REGIONALRATEBOXC("USPS_RegionalRateBoxC"),
    @SerializedName("USPS_SmallFlatRateBox")
    USPS_SMALLFLATRATEBOX("USPS_SmallFlatRateBox"),
    @SerializedName("USPS_SmallFlatRateEnvelope")
    USPS_SMALLFLATRATEENVELOPE("USPS_SmallFlatRateEnvelope");

    private String value;

    PredefinedPackageDimensions(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static PredefinedPackageDimensions fromValue(String input) {
        for (PredefinedPackageDimensions b : PredefinedPackageDimensions.values()) {
            if (b.value.equals(input)) {
                return b;
            }
        }
        return null;
    }

    public static class Adapter extends TypeAdapter<PredefinedPackageDimensions> {
        @Override
        public void write(final JsonWriter jsonWriter, final PredefinedPackageDimensions enumeration)
                throws IOException {
            jsonWriter.value(String.valueOf(enumeration.getValue()));
        }

        @Override
        public PredefinedPackageDimensions read(final JsonReader jsonReader) throws IOException {
            Object value = jsonReader.nextString();
            return PredefinedPackageDimensions.fromValue((String) (value));
        }
    }
}
