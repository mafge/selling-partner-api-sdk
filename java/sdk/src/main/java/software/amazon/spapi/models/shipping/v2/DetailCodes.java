/*
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.shipping.v2;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/** A list of codes used to provide additional shipment information. */
@JsonAdapter(DetailCodes.Adapter.class)
public enum DetailCodes {
    @SerializedName("BusinessClosed")
    BUSINESSCLOSED("BusinessClosed"),
    @SerializedName("CustomerUnavailable")
    CUSTOMERUNAVAILABLE("CustomerUnavailable"),
    @SerializedName("PaymentNotReady")
    PAYMENTNOTREADY("PaymentNotReady"),
    @SerializedName("OtpNotAvailable")
    OTPNOTAVAILABLE("OtpNotAvailable"),
    @SerializedName("DeliveryAttempted")
    DELIVERYATTEMPTED("DeliveryAttempted"),
    @SerializedName("UnableToAccess")
    UNABLETOACCESS("UnableToAccess"),
    @SerializedName("UnableToContactRecipient")
    UNABLETOCONTACTRECIPIENT("UnableToContactRecipient"),
    @SerializedName("DeliveredToBehindWheelieBin")
    DELIVEREDTOBEHINDWHEELIEBIN("DeliveredToBehindWheelieBin"),
    @SerializedName("DeliveredToPorch")
    DELIVEREDTOPORCH("DeliveredToPorch"),
    @SerializedName("DeliveredToGarage")
    DELIVEREDTOGARAGE("DeliveredToGarage"),
    @SerializedName("DeliveredToGarden")
    DELIVEREDTOGARDEN("DeliveredToGarden"),
    @SerializedName("DeliveredToGreenhouse")
    DELIVEREDTOGREENHOUSE("DeliveredToGreenhouse"),
    @SerializedName("DeliveredToMailSlot")
    DELIVEREDTOMAILSLOT("DeliveredToMailSlot"),
    @SerializedName("DeliveredToMailRoom")
    DELIVEREDTOMAILROOM("DeliveredToMailRoom"),
    @SerializedName("DeliveredToNeighbor")
    DELIVEREDTONEIGHBOR("DeliveredToNeighbor"),
    @SerializedName("DeliveredToRearDoor")
    DELIVEREDTOREARDOOR("DeliveredToRearDoor"),
    @SerializedName("DeliveredToReceptionist")
    DELIVEREDTORECEPTIONIST("DeliveredToReceptionist"),
    @SerializedName("DeliveredToShed")
    DELIVEREDTOSHED("DeliveredToShed"),
    @SerializedName("DeliveredWithOTP")
    DELIVEREDWITHOTP("DeliveredWithOTP"),
    @SerializedName("Signed")
    SIGNED("Signed"),
    @SerializedName("Damaged")
    DAMAGED("Damaged"),
    @SerializedName("IncorrectItems")
    INCORRECTITEMS("IncorrectItems"),
    @SerializedName("NotRequired")
    NOTREQUIRED("NotRequired"),
    @SerializedName("Rejected")
    REJECTED("Rejected"),
    @SerializedName("RejectedByRecipientWithVerification")
    REJECTEDBYRECIPIENTWITHVERIFICATION("RejectedByRecipientWithVerification"),
    @SerializedName("CancelledByRecipient")
    CANCELLEDBYRECIPIENT("CancelledByRecipient"),
    @SerializedName("AddressNotFound")
    ADDRESSNOTFOUND("AddressNotFound"),
    @SerializedName("HazmatShipment")
    HAZMATSHIPMENT("HazmatShipment"),
    @SerializedName("Undeliverable")
    UNDELIVERABLE("Undeliverable"),
    @SerializedName("ArrivedAtLocalFacility")
    ARRIVEDATLOCALFACILITY("ArrivedAtLocalFacility");

    private String value;

    DetailCodes(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static DetailCodes fromValue(String input) {
        for (DetailCodes b : DetailCodes.values()) {
            if (b.value.equals(input)) {
                return b;
            }
        }
        return null;
    }

    public static class Adapter extends TypeAdapter<DetailCodes> {
        @Override
        public void write(final JsonWriter jsonWriter, final DetailCodes enumeration) throws IOException {
            jsonWriter.value(String.valueOf(enumeration.getValue()));
        }

        @Override
        public DetailCodes read(final JsonReader jsonReader) throws IOException {
            Object value = jsonReader.nextString();
            return DetailCodes.fromValue((String) (value));
        }
    }
}
