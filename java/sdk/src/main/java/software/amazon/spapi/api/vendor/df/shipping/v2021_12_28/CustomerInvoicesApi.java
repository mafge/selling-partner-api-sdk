/*
 * Selling Partner API for Direct Fulfillment Shipping
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: 2021-12-28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.vendor.df.shipping.v2021_12_28;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.ProgressResponseBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.CustomerInvoice;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.CustomerInvoiceList;

public class CustomerInvoicesApi {
    private ApiClient apiClient;

    CustomerInvoicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerInvoicesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCustomerInvoice
     *
     * @param purchaseOrderNumber Purchase order number of the shipment for which to return the invoice. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getCustomerInvoiceCall(
            String purchaseOrderNumber,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/directFulfillment/shipping/2021-12-28/customerInvoices/{purchaseOrderNumber}"
                .replaceAll(
                        "\\{" + "purchaseOrderNumber" + "\\}", apiClient.escapeString(purchaseOrderNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerInvoiceValidateBeforeCall(
            String purchaseOrderNumber,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'purchaseOrderNumber' is set
        if (purchaseOrderNumber == null) {
            throw new ApiException(
                    "Missing the required parameter 'purchaseOrderNumber' when calling getCustomerInvoice(Async)");
        }

        okhttp3.Call call = getCustomerInvoiceCall(purchaseOrderNumber, progressListener, progressRequestListener);
        return call;
    }

    /**
     * getCustomerInvoice Returns a customer invoice based on the purchaseOrderNumber that you specify. **Usage Plan:**
     * | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber Purchase order number of the shipment for which to return the invoice. (required)
     * @return CustomerInvoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CustomerInvoice getCustomerInvoice(String purchaseOrderNumber) throws ApiException, LWAException {
        ApiResponse<CustomerInvoice> resp = getCustomerInvoiceWithHttpInfo(purchaseOrderNumber);
        return resp.getData();
    }

    /**
     * getCustomerInvoice Returns a customer invoice based on the purchaseOrderNumber that you specify. **Usage Plan:**
     * | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber Purchase order number of the shipment for which to return the invoice. (required)
     * @return ApiResponse&lt;CustomerInvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CustomerInvoice> getCustomerInvoiceWithHttpInfo(String purchaseOrderNumber)
            throws ApiException, LWAException {
        okhttp3.Call call = getCustomerInvoiceValidateBeforeCall(purchaseOrderNumber, null, null);
        Type localVarReturnType = new TypeToken<CustomerInvoice>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getCustomerInvoice (asynchronously) Returns a customer invoice based on the purchaseOrderNumber that you specify.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber Purchase order number of the shipment for which to return the invoice. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getCustomerInvoiceAsync(String purchaseOrderNumber, final ApiCallback<CustomerInvoice> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call =
                getCustomerInvoiceValidateBeforeCall(purchaseOrderNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerInvoice>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerInvoices
     *
     * @param createdAfter Orders that became available after this date and time will be included in the result. Values
     *     are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param createdBefore Orders that became available before this date and time will be included in the result.
     *     Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param shipFromPartyId The vendor warehouseId for order fulfillment. If not specified, the result will contain
     *     orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned (optional)
     * @param sortOrder Sort ASC or DESC by order creation date. (optional)
     * @param nextToken Used for pagination when there are more orders than the specified result size limit. The token
     *     value is returned in the previous API call. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getCustomerInvoicesCall(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/directFulfillment/shipping/2021-12-28/customerInvoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (shipFromPartyId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("shipFromPartyId", shipFromPartyId));
        if (limit != null) localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (createdAfter != null) localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (sortOrder != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse
                            .newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarAuthNames,
                progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerInvoicesValidateBeforeCall(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'createdAfter' is set
        if (createdAfter == null) {
            throw new ApiException(
                    "Missing the required parameter 'createdAfter' when calling getCustomerInvoices(Async)");
        }
        // verify the required parameter 'createdBefore' is set
        if (createdBefore == null) {
            throw new ApiException(
                    "Missing the required parameter 'createdBefore' when calling getCustomerInvoices(Async)");
        }

        okhttp3.Call call = getCustomerInvoicesCall(
                createdAfter,
                createdBefore,
                shipFromPartyId,
                limit,
                sortOrder,
                nextToken,
                progressListener,
                progressRequestListener);
        return call;
    }

    /**
     * getCustomerInvoices Returns a list of customer invoices created during a time frame that you specify. You define
     * the time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The
     * date range to search must be no more than 7 days. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Orders that became available after this date and time will be included in the result. Values
     *     are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param createdBefore Orders that became available before this date and time will be included in the result.
     *     Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param shipFromPartyId The vendor warehouseId for order fulfillment. If not specified, the result will contain
     *     orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned (optional)
     * @param sortOrder Sort ASC or DESC by order creation date. (optional)
     * @param nextToken Used for pagination when there are more orders than the specified result size limit. The token
     *     value is returned in the previous API call. (optional)
     * @return CustomerInvoiceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CustomerInvoiceList getCustomerInvoices(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken)
            throws ApiException, LWAException {
        ApiResponse<CustomerInvoiceList> resp = getCustomerInvoicesWithHttpInfo(
                createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken);
        return resp.getData();
    }

    /**
     * getCustomerInvoices Returns a list of customer invoices created during a time frame that you specify. You define
     * the time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The
     * date range to search must be no more than 7 days. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The preceding table indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Orders that became available after this date and time will be included in the result. Values
     *     are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param createdBefore Orders that became available before this date and time will be included in the result.
     *     Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param shipFromPartyId The vendor warehouseId for order fulfillment. If not specified, the result will contain
     *     orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned (optional)
     * @param sortOrder Sort ASC or DESC by order creation date. (optional)
     * @param nextToken Used for pagination when there are more orders than the specified result size limit. The token
     *     value is returned in the previous API call. (optional)
     * @return ApiResponse&lt;CustomerInvoiceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CustomerInvoiceList> getCustomerInvoicesWithHttpInfo(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getCustomerInvoicesValidateBeforeCall(
                createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, null, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceList>() {}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getCustomerInvoices (asynchronously) Returns a list of customer invoices created during a time frame that you
     * specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both of
     * these parameters. The date range to search must be no more than 7 days. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values then those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Orders that became available after this date and time will be included in the result. Values
     *     are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param createdBefore Orders that became available before this date and time will be included in the result.
     *     Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
     * @param shipFromPartyId The vendor warehouseId for order fulfillment. If not specified, the result will contain
     *     orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned (optional)
     * @param sortOrder Sort ASC or DESC by order creation date. (optional)
     * @param nextToken Used for pagination when there are more orders than the specified result size limit. The token
     *     value is returned in the previous API call. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getCustomerInvoicesAsync(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            final ApiCallback<CustomerInvoiceList> callback)
            throws ApiException, LWAException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getCustomerInvoicesValidateBeforeCall(
                createdAfter,
                createdBefore,
                shipFromPartyId,
                limit,
                sortOrder,
                nextToken,
                progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerInvoiceList>() {}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private RateLimitConfiguration rateLimitConfiguration;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration) {
            this.rateLimitConfiguration = rateLimitConfiguration;
            return this;
        }

        public Builder disableRateLimitOnRequests() {
            this.rateLimitConfiguration = null;
            return this;
        }

        public CustomerInvoicesApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new CustomerInvoicesApi(new ApiClient()
                    .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                    .setBasePath(endpoint)
                    .setRateLimiter(rateLimitConfiguration));
        }
    }
}
