/*
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.merchantfulfillment.v0;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/** The label format. */
@JsonAdapter(LabelFormat.Adapter.class)
public enum LabelFormat {
    @SerializedName("PDF")
    PDF("PDF"),
    @SerializedName("PNG")
    PNG("PNG"),
    @SerializedName("ZPL203")
    ZPL203("ZPL203"),
    @SerializedName("ZPL300")
    ZPL300("ZPL300"),
    @SerializedName("ShippingServiceDefault")
    SHIPPINGSERVICEDEFAULT("ShippingServiceDefault");

    private String value;

    LabelFormat(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static LabelFormat fromValue(String input) {
        for (LabelFormat b : LabelFormat.values()) {
            if (b.value.equals(input)) {
                return b;
            }
        }
        return null;
    }

    public static class Adapter extends TypeAdapter<LabelFormat> {
        @Override
        public void write(final JsonWriter jsonWriter, final LabelFormat enumeration) throws IOException {
            jsonWriter.value(String.valueOf(enumeration.getValue()));
        }

        @Override
        public LabelFormat read(final JsonReader jsonReader) throws IOException {
            Object value = jsonReader.nextString();
            return LabelFormat.fromValue((String) (value));
        }
    }
}
