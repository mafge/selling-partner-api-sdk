/*
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.fulfillment.inbound.v2024_03_20;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The possible shipping modes for the packing option for a given shipping solution or program. Available solutions are
 * Amazon-Partnered Carrier and Use Your Own Carrier. Available modes are ground small parcel, freight
 * less-than-truckload (LTL), freight full-truckload (FTL) palletized, freight FTL non-palletized, ocean
 * less-than-container-load (LCL), ocean full-container load (FCL), air small parcel, and air small parcel express.
 */
@Schema(
        description =
                "The possible shipping modes for the packing option for a given shipping solution or program. Available solutions are Amazon-Partnered Carrier and Use Your Own Carrier. Available modes are ground small parcel, freight less-than-truckload (LTL), freight full-truckload (FTL) palletized, freight FTL non-palletized, ocean less-than-container-load (LCL), ocean full-container load (FCL), air small parcel, and air small parcel express.")
public class ShippingRequirements {
    @SerializedName("modes")
    private List<String> modes = new ArrayList<String>();

    @SerializedName("solution")
    private String solution = null;

    public ShippingRequirements modes(List<String> modes) {
        this.modes = modes;
        return this;
    }

    public ShippingRequirements addModesItem(String modesItem) {
        this.modes.add(modesItem);
        return this;
    }

    /**
     * Available shipment modes for this shipping program.
     *
     * @return modes
     */
    @Schema(required = true, description = "Available shipment modes for this shipping program.")
    public List<String> getModes() {
        return modes;
    }

    public void setModes(List<String> modes) {
        this.modes = modes;
    }

    public ShippingRequirements solution(String solution) {
        this.solution = solution;
        return this;
    }

    /**
     * Shipping program for the option. Can be: &#x60;AMAZON_PARTNERED_CARRIER&#x60;, &#x60;USE_YOUR_OWN_CARRIER&#x60;.
     *
     * @return solution
     */
    @Schema(
            required = true,
            description =
                    "Shipping program for the option. Can be: `AMAZON_PARTNERED_CARRIER`, `USE_YOUR_OWN_CARRIER`.")
    public String getSolution() {
        return solution;
    }

    public void setSolution(String solution) {
        this.solution = solution;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShippingRequirements shippingRequirements = (ShippingRequirements) o;
        return Objects.equals(this.modes, shippingRequirements.modes)
                && Objects.equals(this.solution, shippingRequirements.solution);
    }

    @Override
    public int hashCode() {
        return Objects.hash(modes, solution);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ShippingRequirements {\n");

        sb.append("    modes: ").append(toIndentedString(modes)).append("\n");
        sb.append("    solution: ").append(toIndentedString(solution)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
