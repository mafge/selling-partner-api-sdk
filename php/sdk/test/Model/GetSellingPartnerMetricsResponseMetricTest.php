<?php
/**
 * GetSellingPartnerMetricsResponseMetricTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Replenishment
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * The version of the OpenAPI document: 2022-11-07
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace SpApi\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * GetSellingPartnerMetricsResponseMetricTest Class Doc Comment
 *
 * @category    Class
 * @description An object which contains metric data for a selling partner.
 * @package     SpApi
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class GetSellingPartnerMetricsResponseMetricTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "GetSellingPartnerMetricsResponseMetric"
     */
    public function testGetSellingPartnerMetricsResponseMetric()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "not_delivered_due_to_oos"
     */
    public function testPropertyNotDeliveredDueToOos()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "total_subscriptions_revenue"
     */
    public function testPropertyTotalSubscriptionsRevenue()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shipped_subscription_units"
     */
    public function testPropertyShippedSubscriptionUnits()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "active_subscriptions"
     */
    public function testPropertyActiveSubscriptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "subscriber_average_revenue"
     */
    public function testPropertySubscriberAverageRevenue()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "non_subscriber_average_revenue"
     */
    public function testPropertyNonSubscriberAverageRevenue()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "lost_revenue_due_to_oos"
     */
    public function testPropertyLostRevenueDueToOos()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "subscriber_average_reorders"
     */
    public function testPropertySubscriberAverageReorders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "non_subscriber_average_reorders"
     */
    public function testPropertyNonSubscriberAverageReorders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "coupons_revenue_penetration"
     */
    public function testPropertyCouponsRevenuePenetration()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "revenue_from_subscriptions_with_multiple_deliveries"
     */
    public function testPropertyRevenueFromSubscriptionsWithMultipleDeliveries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "revenue_from_active_subscriptions_with_single_delivery"
     */
    public function testPropertyRevenueFromActiveSubscriptionsWithSingleDelivery()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "revenue_from_cancelled_subscriptions_after_single_delivery"
     */
    public function testPropertyRevenueFromCancelledSubscriptionsAfterSingleDelivery()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "subscriber_retention_for30_days"
     */
    public function testPropertySubscriberRetentionFor30Days()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "subscriber_retention_for90_days"
     */
    public function testPropertySubscriberRetentionFor90Days()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "revenue_penetration_for0_percent_seller_funding"
     */
    public function testPropertyRevenuePenetrationFor0PercentSellerFunding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "revenue_penetration_for5_percent_seller_funding"
     */
    public function testPropertyRevenuePenetrationFor5PercentSellerFunding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "revenue_penetration_for10_percent_seller_funding"
     */
    public function testPropertyRevenuePenetrationFor10PercentSellerFunding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "revenue_penetration_for5_plus_percent_seller_funding"
     */
    public function testPropertyRevenuePenetrationFor5PlusPercentSellerFunding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "share_of_coupon_subscriptions"
     */
    public function testPropertyShareOfCouponSubscriptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "time_interval"
     */
    public function testPropertyTimeInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "currency_code"
     */
    public function testPropertyCurrencyCode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
