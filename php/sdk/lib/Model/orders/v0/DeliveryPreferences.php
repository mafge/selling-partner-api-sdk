<?php

/**
 * DeliveryPreferences.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Orders.
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\orders\v0;

use SpApi\ObjectSerializer;

/**
 * DeliveryPreferences Class Doc Comment.
 *
 * @category Class
 *
 * @description Contains all of the delivery instructions provided by the customer for the shipping address.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class DeliveryPreferences implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'DeliveryPreferences';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'drop_off_location' => 'string',
        'preferred_delivery_time' => '\SpApi\Model\orders\v0\PreferredDeliveryTime',
        'other_attributes' => '\SpApi\Model\orders\v0\OtherDeliveryAttributes[]',
        'address_instructions' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'drop_off_location' => null,
        'preferred_delivery_time' => null,
        'other_attributes' => null,
        'address_instructions' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'drop_off_location' => false,
        'preferred_delivery_time' => false,
        'other_attributes' => false,
        'address_instructions' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'drop_off_location' => 'DropOffLocation',
        'preferred_delivery_time' => 'PreferredDeliveryTime',
        'other_attributes' => 'OtherAttributes',
        'address_instructions' => 'AddressInstructions',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'drop_off_location' => 'setDropOffLocation',
        'preferred_delivery_time' => 'setPreferredDeliveryTime',
        'other_attributes' => 'setOtherAttributes',
        'address_instructions' => 'setAddressInstructions',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'drop_off_location' => 'getDropOffLocation',
        'preferred_delivery_time' => 'getPreferredDeliveryTime',
        'other_attributes' => 'getOtherAttributes',
        'address_instructions' => 'getAddressInstructions',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('drop_off_location', $data ?? [], null);
        $this->setIfExists('preferred_delivery_time', $data ?? [], null);
        $this->setIfExists('other_attributes', $data ?? [], null);
        $this->setIfExists('address_instructions', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets drop_off_location.
     *
     * @return null|string
     */
    public function getDropOffLocation()
    {
        return $this->container['drop_off_location'];
    }

    /**
     * Sets drop_off_location.
     *
     * @param null|string $drop_off_location drop-off location selected by the customer
     *
     * @return self
     */
    public function setDropOffLocation($drop_off_location)
    {
        if (is_null($drop_off_location)) {
            throw new \InvalidArgumentException('non-nullable drop_off_location cannot be null');
        }
        $this->container['drop_off_location'] = $drop_off_location;

        return $this;
    }

    /**
     * Gets preferred_delivery_time.
     *
     * @return null|PreferredDeliveryTime
     */
    public function getPreferredDeliveryTime()
    {
        return $this->container['preferred_delivery_time'];
    }

    /**
     * Sets preferred_delivery_time.
     *
     * @param null|PreferredDeliveryTime $preferred_delivery_time preferred_delivery_time
     *
     * @return self
     */
    public function setPreferredDeliveryTime($preferred_delivery_time)
    {
        if (is_null($preferred_delivery_time)) {
            throw new \InvalidArgumentException('non-nullable preferred_delivery_time cannot be null');
        }
        $this->container['preferred_delivery_time'] = $preferred_delivery_time;

        return $this;
    }

    /**
     * Gets other_attributes.
     *
     * @return null|OtherDeliveryAttributes[]
     */
    public function getOtherAttributes()
    {
        return $this->container['other_attributes'];
    }

    /**
     * Sets other_attributes.
     *
     * @param null|OtherDeliveryAttributes[] $other_attributes enumerated list of miscellaneous delivery attributes associated with the shipping address
     *
     * @return self
     */
    public function setOtherAttributes($other_attributes)
    {
        if (is_null($other_attributes)) {
            throw new \InvalidArgumentException('non-nullable other_attributes cannot be null');
        }
        $this->container['other_attributes'] = $other_attributes;

        return $this;
    }

    /**
     * Gets address_instructions.
     *
     * @return null|string
     */
    public function getAddressInstructions()
    {
        return $this->container['address_instructions'];
    }

    /**
     * Sets address_instructions.
     *
     * @param null|string $address_instructions building instructions, nearby landmark or navigation instructions
     *
     * @return self
     */
    public function setAddressInstructions($address_instructions)
    {
        if (is_null($address_instructions)) {
            throw new \InvalidArgumentException('non-nullable address_instructions cannot be null');
        }
        $this->container['address_instructions'] = $address_instructions;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
