<?php

/**
 * FinancialEvents.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Finances.
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\finances\v0;

use SpApi\ObjectSerializer;

/**
 * FinancialEvents Class Doc Comment.
 *
 * @category Class
 *
 * @description Contains all information related to a financial event.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class FinancialEvents implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'FinancialEvents';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'shipment_event_list' => '\SpApi\Model\finances\v0\ShipmentEvent[]',
        'shipment_settle_event_list' => '\SpApi\Model\finances\v0\ShipmentEvent[]',
        'refund_event_list' => '\SpApi\Model\finances\v0\ShipmentEvent[]',
        'guarantee_claim_event_list' => '\SpApi\Model\finances\v0\ShipmentEvent[]',
        'chargeback_event_list' => '\SpApi\Model\finances\v0\ShipmentEvent[]',
        'pay_with_amazon_event_list' => '\SpApi\Model\finances\v0\PayWithAmazonEvent[]',
        'service_provider_credit_event_list' => '\SpApi\Model\finances\v0\SolutionProviderCreditEvent[]',
        'retrocharge_event_list' => '\SpApi\Model\finances\v0\RetrochargeEvent[]',
        'rental_transaction_event_list' => '\SpApi\Model\finances\v0\RentalTransactionEvent[]',
        'product_ads_payment_event_list' => '\SpApi\Model\finances\v0\ProductAdsPaymentEvent[]',
        'service_fee_event_list' => '\SpApi\Model\finances\v0\ServiceFeeEvent[]',
        'seller_deal_payment_event_list' => '\SpApi\Model\finances\v0\SellerDealPaymentEvent[]',
        'debt_recovery_event_list' => '\SpApi\Model\finances\v0\DebtRecoveryEvent[]',
        'loan_servicing_event_list' => '\SpApi\Model\finances\v0\LoanServicingEvent[]',
        'adjustment_event_list' => '\SpApi\Model\finances\v0\AdjustmentEvent[]',
        'safet_reimbursement_event_list' => '\SpApi\Model\finances\v0\SAFETReimbursementEvent[]',
        'seller_review_enrollment_payment_event_list' => '\SpApi\Model\finances\v0\SellerReviewEnrollmentPaymentEvent[]',
        'fba_liquidation_event_list' => '\SpApi\Model\finances\v0\FBALiquidationEvent[]',
        'coupon_payment_event_list' => '\SpApi\Model\finances\v0\CouponPaymentEvent[]',
        'imaging_services_fee_event_list' => '\SpApi\Model\finances\v0\ImagingServicesFeeEvent[]',
        'network_commingling_transaction_event_list' => '\SpApi\Model\finances\v0\NetworkComminglingTransactionEvent[]',
        'affordability_expense_event_list' => '\SpApi\Model\finances\v0\AffordabilityExpenseEvent[]',
        'affordability_expense_reversal_event_list' => '\SpApi\Model\finances\v0\AffordabilityExpenseEvent[]',
        'removal_shipment_event_list' => '\SpApi\Model\finances\v0\RemovalShipmentEvent[]',
        'removal_shipment_adjustment_event_list' => '\SpApi\Model\finances\v0\RemovalShipmentAdjustmentEvent[]',
        'trial_shipment_event_list' => '\SpApi\Model\finances\v0\TrialShipmentEvent[]',
        'tds_reimbursement_event_list' => '\SpApi\Model\finances\v0\TDSReimbursementEvent[]',
        'adhoc_disbursement_event_list' => '\SpApi\Model\finances\v0\AdhocDisbursementEvent[]',
        'tax_withholding_event_list' => '\SpApi\Model\finances\v0\TaxWithholdingEvent[]',
        'charge_refund_event_list' => '\SpApi\Model\finances\v0\ChargeRefundEvent[]',
        'failed_adhoc_disbursement_event_list' => '\SpApi\Model\finances\v0\FailedAdhocDisbursementEvent[]',
        'value_added_service_charge_event_list' => '\SpApi\Model\finances\v0\ValueAddedServiceChargeEvent[]',
        'capacity_reservation_billing_event_list' => '\SpApi\Model\finances\v0\CapacityReservationBillingEvent[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'shipment_event_list' => null,
        'shipment_settle_event_list' => null,
        'refund_event_list' => null,
        'guarantee_claim_event_list' => null,
        'chargeback_event_list' => null,
        'pay_with_amazon_event_list' => null,
        'service_provider_credit_event_list' => null,
        'retrocharge_event_list' => null,
        'rental_transaction_event_list' => null,
        'product_ads_payment_event_list' => null,
        'service_fee_event_list' => null,
        'seller_deal_payment_event_list' => null,
        'debt_recovery_event_list' => null,
        'loan_servicing_event_list' => null,
        'adjustment_event_list' => null,
        'safet_reimbursement_event_list' => null,
        'seller_review_enrollment_payment_event_list' => null,
        'fba_liquidation_event_list' => null,
        'coupon_payment_event_list' => null,
        'imaging_services_fee_event_list' => null,
        'network_commingling_transaction_event_list' => null,
        'affordability_expense_event_list' => null,
        'affordability_expense_reversal_event_list' => null,
        'removal_shipment_event_list' => null,
        'removal_shipment_adjustment_event_list' => null,
        'trial_shipment_event_list' => null,
        'tds_reimbursement_event_list' => null,
        'adhoc_disbursement_event_list' => null,
        'tax_withholding_event_list' => null,
        'charge_refund_event_list' => null,
        'failed_adhoc_disbursement_event_list' => null,
        'value_added_service_charge_event_list' => null,
        'capacity_reservation_billing_event_list' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'shipment_event_list' => false,
        'shipment_settle_event_list' => false,
        'refund_event_list' => false,
        'guarantee_claim_event_list' => false,
        'chargeback_event_list' => false,
        'pay_with_amazon_event_list' => false,
        'service_provider_credit_event_list' => false,
        'retrocharge_event_list' => false,
        'rental_transaction_event_list' => false,
        'product_ads_payment_event_list' => false,
        'service_fee_event_list' => false,
        'seller_deal_payment_event_list' => false,
        'debt_recovery_event_list' => false,
        'loan_servicing_event_list' => false,
        'adjustment_event_list' => false,
        'safet_reimbursement_event_list' => false,
        'seller_review_enrollment_payment_event_list' => false,
        'fba_liquidation_event_list' => false,
        'coupon_payment_event_list' => false,
        'imaging_services_fee_event_list' => false,
        'network_commingling_transaction_event_list' => false,
        'affordability_expense_event_list' => false,
        'affordability_expense_reversal_event_list' => false,
        'removal_shipment_event_list' => false,
        'removal_shipment_adjustment_event_list' => false,
        'trial_shipment_event_list' => false,
        'tds_reimbursement_event_list' => false,
        'adhoc_disbursement_event_list' => false,
        'tax_withholding_event_list' => false,
        'charge_refund_event_list' => false,
        'failed_adhoc_disbursement_event_list' => false,
        'value_added_service_charge_event_list' => false,
        'capacity_reservation_billing_event_list' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipment_event_list' => 'ShipmentEventList',
        'shipment_settle_event_list' => 'ShipmentSettleEventList',
        'refund_event_list' => 'RefundEventList',
        'guarantee_claim_event_list' => 'GuaranteeClaimEventList',
        'chargeback_event_list' => 'ChargebackEventList',
        'pay_with_amazon_event_list' => 'PayWithAmazonEventList',
        'service_provider_credit_event_list' => 'ServiceProviderCreditEventList',
        'retrocharge_event_list' => 'RetrochargeEventList',
        'rental_transaction_event_list' => 'RentalTransactionEventList',
        'product_ads_payment_event_list' => 'ProductAdsPaymentEventList',
        'service_fee_event_list' => 'ServiceFeeEventList',
        'seller_deal_payment_event_list' => 'SellerDealPaymentEventList',
        'debt_recovery_event_list' => 'DebtRecoveryEventList',
        'loan_servicing_event_list' => 'LoanServicingEventList',
        'adjustment_event_list' => 'AdjustmentEventList',
        'safet_reimbursement_event_list' => 'SAFETReimbursementEventList',
        'seller_review_enrollment_payment_event_list' => 'SellerReviewEnrollmentPaymentEventList',
        'fba_liquidation_event_list' => 'FBALiquidationEventList',
        'coupon_payment_event_list' => 'CouponPaymentEventList',
        'imaging_services_fee_event_list' => 'ImagingServicesFeeEventList',
        'network_commingling_transaction_event_list' => 'NetworkComminglingTransactionEventList',
        'affordability_expense_event_list' => 'AffordabilityExpenseEventList',
        'affordability_expense_reversal_event_list' => 'AffordabilityExpenseReversalEventList',
        'removal_shipment_event_list' => 'RemovalShipmentEventList',
        'removal_shipment_adjustment_event_list' => 'RemovalShipmentAdjustmentEventList',
        'trial_shipment_event_list' => 'TrialShipmentEventList',
        'tds_reimbursement_event_list' => 'TDSReimbursementEventList',
        'adhoc_disbursement_event_list' => 'AdhocDisbursementEventList',
        'tax_withholding_event_list' => 'TaxWithholdingEventList',
        'charge_refund_event_list' => 'ChargeRefundEventList',
        'failed_adhoc_disbursement_event_list' => 'FailedAdhocDisbursementEventList',
        'value_added_service_charge_event_list' => 'ValueAddedServiceChargeEventList',
        'capacity_reservation_billing_event_list' => 'CapacityReservationBillingEventList',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'shipment_event_list' => 'setShipmentEventList',
        'shipment_settle_event_list' => 'setShipmentSettleEventList',
        'refund_event_list' => 'setRefundEventList',
        'guarantee_claim_event_list' => 'setGuaranteeClaimEventList',
        'chargeback_event_list' => 'setChargebackEventList',
        'pay_with_amazon_event_list' => 'setPayWithAmazonEventList',
        'service_provider_credit_event_list' => 'setServiceProviderCreditEventList',
        'retrocharge_event_list' => 'setRetrochargeEventList',
        'rental_transaction_event_list' => 'setRentalTransactionEventList',
        'product_ads_payment_event_list' => 'setProductAdsPaymentEventList',
        'service_fee_event_list' => 'setServiceFeeEventList',
        'seller_deal_payment_event_list' => 'setSellerDealPaymentEventList',
        'debt_recovery_event_list' => 'setDebtRecoveryEventList',
        'loan_servicing_event_list' => 'setLoanServicingEventList',
        'adjustment_event_list' => 'setAdjustmentEventList',
        'safet_reimbursement_event_list' => 'setSafetReimbursementEventList',
        'seller_review_enrollment_payment_event_list' => 'setSellerReviewEnrollmentPaymentEventList',
        'fba_liquidation_event_list' => 'setFbaLiquidationEventList',
        'coupon_payment_event_list' => 'setCouponPaymentEventList',
        'imaging_services_fee_event_list' => 'setImagingServicesFeeEventList',
        'network_commingling_transaction_event_list' => 'setNetworkComminglingTransactionEventList',
        'affordability_expense_event_list' => 'setAffordabilityExpenseEventList',
        'affordability_expense_reversal_event_list' => 'setAffordabilityExpenseReversalEventList',
        'removal_shipment_event_list' => 'setRemovalShipmentEventList',
        'removal_shipment_adjustment_event_list' => 'setRemovalShipmentAdjustmentEventList',
        'trial_shipment_event_list' => 'setTrialShipmentEventList',
        'tds_reimbursement_event_list' => 'setTdsReimbursementEventList',
        'adhoc_disbursement_event_list' => 'setAdhocDisbursementEventList',
        'tax_withholding_event_list' => 'setTaxWithholdingEventList',
        'charge_refund_event_list' => 'setChargeRefundEventList',
        'failed_adhoc_disbursement_event_list' => 'setFailedAdhocDisbursementEventList',
        'value_added_service_charge_event_list' => 'setValueAddedServiceChargeEventList',
        'capacity_reservation_billing_event_list' => 'setCapacityReservationBillingEventList',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'shipment_event_list' => 'getShipmentEventList',
        'shipment_settle_event_list' => 'getShipmentSettleEventList',
        'refund_event_list' => 'getRefundEventList',
        'guarantee_claim_event_list' => 'getGuaranteeClaimEventList',
        'chargeback_event_list' => 'getChargebackEventList',
        'pay_with_amazon_event_list' => 'getPayWithAmazonEventList',
        'service_provider_credit_event_list' => 'getServiceProviderCreditEventList',
        'retrocharge_event_list' => 'getRetrochargeEventList',
        'rental_transaction_event_list' => 'getRentalTransactionEventList',
        'product_ads_payment_event_list' => 'getProductAdsPaymentEventList',
        'service_fee_event_list' => 'getServiceFeeEventList',
        'seller_deal_payment_event_list' => 'getSellerDealPaymentEventList',
        'debt_recovery_event_list' => 'getDebtRecoveryEventList',
        'loan_servicing_event_list' => 'getLoanServicingEventList',
        'adjustment_event_list' => 'getAdjustmentEventList',
        'safet_reimbursement_event_list' => 'getSafetReimbursementEventList',
        'seller_review_enrollment_payment_event_list' => 'getSellerReviewEnrollmentPaymentEventList',
        'fba_liquidation_event_list' => 'getFbaLiquidationEventList',
        'coupon_payment_event_list' => 'getCouponPaymentEventList',
        'imaging_services_fee_event_list' => 'getImagingServicesFeeEventList',
        'network_commingling_transaction_event_list' => 'getNetworkComminglingTransactionEventList',
        'affordability_expense_event_list' => 'getAffordabilityExpenseEventList',
        'affordability_expense_reversal_event_list' => 'getAffordabilityExpenseReversalEventList',
        'removal_shipment_event_list' => 'getRemovalShipmentEventList',
        'removal_shipment_adjustment_event_list' => 'getRemovalShipmentAdjustmentEventList',
        'trial_shipment_event_list' => 'getTrialShipmentEventList',
        'tds_reimbursement_event_list' => 'getTdsReimbursementEventList',
        'adhoc_disbursement_event_list' => 'getAdhocDisbursementEventList',
        'tax_withholding_event_list' => 'getTaxWithholdingEventList',
        'charge_refund_event_list' => 'getChargeRefundEventList',
        'failed_adhoc_disbursement_event_list' => 'getFailedAdhocDisbursementEventList',
        'value_added_service_charge_event_list' => 'getValueAddedServiceChargeEventList',
        'capacity_reservation_billing_event_list' => 'getCapacityReservationBillingEventList',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shipment_event_list', $data ?? [], null);
        $this->setIfExists('shipment_settle_event_list', $data ?? [], null);
        $this->setIfExists('refund_event_list', $data ?? [], null);
        $this->setIfExists('guarantee_claim_event_list', $data ?? [], null);
        $this->setIfExists('chargeback_event_list', $data ?? [], null);
        $this->setIfExists('pay_with_amazon_event_list', $data ?? [], null);
        $this->setIfExists('service_provider_credit_event_list', $data ?? [], null);
        $this->setIfExists('retrocharge_event_list', $data ?? [], null);
        $this->setIfExists('rental_transaction_event_list', $data ?? [], null);
        $this->setIfExists('product_ads_payment_event_list', $data ?? [], null);
        $this->setIfExists('service_fee_event_list', $data ?? [], null);
        $this->setIfExists('seller_deal_payment_event_list', $data ?? [], null);
        $this->setIfExists('debt_recovery_event_list', $data ?? [], null);
        $this->setIfExists('loan_servicing_event_list', $data ?? [], null);
        $this->setIfExists('adjustment_event_list', $data ?? [], null);
        $this->setIfExists('safet_reimbursement_event_list', $data ?? [], null);
        $this->setIfExists('seller_review_enrollment_payment_event_list', $data ?? [], null);
        $this->setIfExists('fba_liquidation_event_list', $data ?? [], null);
        $this->setIfExists('coupon_payment_event_list', $data ?? [], null);
        $this->setIfExists('imaging_services_fee_event_list', $data ?? [], null);
        $this->setIfExists('network_commingling_transaction_event_list', $data ?? [], null);
        $this->setIfExists('affordability_expense_event_list', $data ?? [], null);
        $this->setIfExists('affordability_expense_reversal_event_list', $data ?? [], null);
        $this->setIfExists('removal_shipment_event_list', $data ?? [], null);
        $this->setIfExists('removal_shipment_adjustment_event_list', $data ?? [], null);
        $this->setIfExists('trial_shipment_event_list', $data ?? [], null);
        $this->setIfExists('tds_reimbursement_event_list', $data ?? [], null);
        $this->setIfExists('adhoc_disbursement_event_list', $data ?? [], null);
        $this->setIfExists('tax_withholding_event_list', $data ?? [], null);
        $this->setIfExists('charge_refund_event_list', $data ?? [], null);
        $this->setIfExists('failed_adhoc_disbursement_event_list', $data ?? [], null);
        $this->setIfExists('value_added_service_charge_event_list', $data ?? [], null);
        $this->setIfExists('capacity_reservation_billing_event_list', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shipment_event_list.
     *
     * @return null|ShipmentEvent[]
     */
    public function getShipmentEventList()
    {
        return $this->container['shipment_event_list'];
    }

    /**
     * Sets shipment_event_list.
     *
     * @param null|ShipmentEvent[] $shipment_event_list a list of shipment event information
     *
     * @return self
     */
    public function setShipmentEventList($shipment_event_list)
    {
        if (is_null($shipment_event_list)) {
            throw new \InvalidArgumentException('non-nullable shipment_event_list cannot be null');
        }
        $this->container['shipment_event_list'] = $shipment_event_list;

        return $this;
    }

    /**
     * Gets shipment_settle_event_list.
     *
     * @return null|ShipmentEvent[]
     */
    public function getShipmentSettleEventList()
    {
        return $this->container['shipment_settle_event_list'];
    }

    /**
     * Sets shipment_settle_event_list.
     *
     * @param null|ShipmentEvent[] $shipment_settle_event_list a list of `ShipmentEvent` items
     *
     * @return self
     */
    public function setShipmentSettleEventList($shipment_settle_event_list)
    {
        if (is_null($shipment_settle_event_list)) {
            throw new \InvalidArgumentException('non-nullable shipment_settle_event_list cannot be null');
        }
        $this->container['shipment_settle_event_list'] = $shipment_settle_event_list;

        return $this;
    }

    /**
     * Gets refund_event_list.
     *
     * @return null|ShipmentEvent[]
     */
    public function getRefundEventList()
    {
        return $this->container['refund_event_list'];
    }

    /**
     * Sets refund_event_list.
     *
     * @param null|ShipmentEvent[] $refund_event_list a list of shipment event information
     *
     * @return self
     */
    public function setRefundEventList($refund_event_list)
    {
        if (is_null($refund_event_list)) {
            throw new \InvalidArgumentException('non-nullable refund_event_list cannot be null');
        }
        $this->container['refund_event_list'] = $refund_event_list;

        return $this;
    }

    /**
     * Gets guarantee_claim_event_list.
     *
     * @return null|ShipmentEvent[]
     */
    public function getGuaranteeClaimEventList()
    {
        return $this->container['guarantee_claim_event_list'];
    }

    /**
     * Sets guarantee_claim_event_list.
     *
     * @param null|ShipmentEvent[] $guarantee_claim_event_list a list of shipment event information
     *
     * @return self
     */
    public function setGuaranteeClaimEventList($guarantee_claim_event_list)
    {
        if (is_null($guarantee_claim_event_list)) {
            throw new \InvalidArgumentException('non-nullable guarantee_claim_event_list cannot be null');
        }
        $this->container['guarantee_claim_event_list'] = $guarantee_claim_event_list;

        return $this;
    }

    /**
     * Gets chargeback_event_list.
     *
     * @return null|ShipmentEvent[]
     */
    public function getChargebackEventList()
    {
        return $this->container['chargeback_event_list'];
    }

    /**
     * Sets chargeback_event_list.
     *
     * @param null|ShipmentEvent[] $chargeback_event_list a list of shipment event information
     *
     * @return self
     */
    public function setChargebackEventList($chargeback_event_list)
    {
        if (is_null($chargeback_event_list)) {
            throw new \InvalidArgumentException('non-nullable chargeback_event_list cannot be null');
        }
        $this->container['chargeback_event_list'] = $chargeback_event_list;

        return $this;
    }

    /**
     * Gets pay_with_amazon_event_list.
     *
     * @return null|PayWithAmazonEvent[]
     */
    public function getPayWithAmazonEventList()
    {
        return $this->container['pay_with_amazon_event_list'];
    }

    /**
     * Sets pay_with_amazon_event_list.
     *
     * @param null|PayWithAmazonEvent[] $pay_with_amazon_event_list a list of events related to the seller's Pay with Amazon account
     *
     * @return self
     */
    public function setPayWithAmazonEventList($pay_with_amazon_event_list)
    {
        if (is_null($pay_with_amazon_event_list)) {
            throw new \InvalidArgumentException('non-nullable pay_with_amazon_event_list cannot be null');
        }
        $this->container['pay_with_amazon_event_list'] = $pay_with_amazon_event_list;

        return $this;
    }

    /**
     * Gets service_provider_credit_event_list.
     *
     * @return null|SolutionProviderCreditEvent[]
     */
    public function getServiceProviderCreditEventList()
    {
        return $this->container['service_provider_credit_event_list'];
    }

    /**
     * Sets service_provider_credit_event_list.
     *
     * @param null|SolutionProviderCreditEvent[] $service_provider_credit_event_list a list of information about solution provider credits
     *
     * @return self
     */
    public function setServiceProviderCreditEventList($service_provider_credit_event_list)
    {
        if (is_null($service_provider_credit_event_list)) {
            throw new \InvalidArgumentException('non-nullable service_provider_credit_event_list cannot be null');
        }
        $this->container['service_provider_credit_event_list'] = $service_provider_credit_event_list;

        return $this;
    }

    /**
     * Gets retrocharge_event_list.
     *
     * @return null|RetrochargeEvent[]
     */
    public function getRetrochargeEventList()
    {
        return $this->container['retrocharge_event_list'];
    }

    /**
     * Sets retrocharge_event_list.
     *
     * @param null|RetrochargeEvent[] $retrocharge_event_list a list of information about Retrocharge or RetrochargeReversal events
     *
     * @return self
     */
    public function setRetrochargeEventList($retrocharge_event_list)
    {
        if (is_null($retrocharge_event_list)) {
            throw new \InvalidArgumentException('non-nullable retrocharge_event_list cannot be null');
        }
        $this->container['retrocharge_event_list'] = $retrocharge_event_list;

        return $this;
    }

    /**
     * Gets rental_transaction_event_list.
     *
     * @return null|RentalTransactionEvent[]
     */
    public function getRentalTransactionEventList()
    {
        return $this->container['rental_transaction_event_list'];
    }

    /**
     * Sets rental_transaction_event_list.
     *
     * @param null|RentalTransactionEvent[] $rental_transaction_event_list a list of rental transaction event information
     *
     * @return self
     */
    public function setRentalTransactionEventList($rental_transaction_event_list)
    {
        if (is_null($rental_transaction_event_list)) {
            throw new \InvalidArgumentException('non-nullable rental_transaction_event_list cannot be null');
        }
        $this->container['rental_transaction_event_list'] = $rental_transaction_event_list;

        return $this;
    }

    /**
     * Gets product_ads_payment_event_list.
     *
     * @return null|ProductAdsPaymentEvent[]
     */
    public function getProductAdsPaymentEventList()
    {
        return $this->container['product_ads_payment_event_list'];
    }

    /**
     * Sets product_ads_payment_event_list.
     *
     * @param null|ProductAdsPaymentEvent[] $product_ads_payment_event_list a list of sponsored products payment events
     *
     * @return self
     */
    public function setProductAdsPaymentEventList($product_ads_payment_event_list)
    {
        if (is_null($product_ads_payment_event_list)) {
            throw new \InvalidArgumentException('non-nullable product_ads_payment_event_list cannot be null');
        }
        $this->container['product_ads_payment_event_list'] = $product_ads_payment_event_list;

        return $this;
    }

    /**
     * Gets service_fee_event_list.
     *
     * @return null|ServiceFeeEvent[]
     */
    public function getServiceFeeEventList()
    {
        return $this->container['service_fee_event_list'];
    }

    /**
     * Sets service_fee_event_list.
     *
     * @param null|ServiceFeeEvent[] $service_fee_event_list a list of information about service fee events
     *
     * @return self
     */
    public function setServiceFeeEventList($service_fee_event_list)
    {
        if (is_null($service_fee_event_list)) {
            throw new \InvalidArgumentException('non-nullable service_fee_event_list cannot be null');
        }
        $this->container['service_fee_event_list'] = $service_fee_event_list;

        return $this;
    }

    /**
     * Gets seller_deal_payment_event_list.
     *
     * @return null|SellerDealPaymentEvent[]
     */
    public function getSellerDealPaymentEventList()
    {
        return $this->container['seller_deal_payment_event_list'];
    }

    /**
     * Sets seller_deal_payment_event_list.
     *
     * @param null|SellerDealPaymentEvent[] $seller_deal_payment_event_list a list of payment events for deal-related fees
     *
     * @return self
     */
    public function setSellerDealPaymentEventList($seller_deal_payment_event_list)
    {
        if (is_null($seller_deal_payment_event_list)) {
            throw new \InvalidArgumentException('non-nullable seller_deal_payment_event_list cannot be null');
        }
        $this->container['seller_deal_payment_event_list'] = $seller_deal_payment_event_list;

        return $this;
    }

    /**
     * Gets debt_recovery_event_list.
     *
     * @return null|DebtRecoveryEvent[]
     */
    public function getDebtRecoveryEventList()
    {
        return $this->container['debt_recovery_event_list'];
    }

    /**
     * Sets debt_recovery_event_list.
     *
     * @param null|DebtRecoveryEvent[] $debt_recovery_event_list a list of debt recovery event information
     *
     * @return self
     */
    public function setDebtRecoveryEventList($debt_recovery_event_list)
    {
        if (is_null($debt_recovery_event_list)) {
            throw new \InvalidArgumentException('non-nullable debt_recovery_event_list cannot be null');
        }
        $this->container['debt_recovery_event_list'] = $debt_recovery_event_list;

        return $this;
    }

    /**
     * Gets loan_servicing_event_list.
     *
     * @return null|LoanServicingEvent[]
     */
    public function getLoanServicingEventList()
    {
        return $this->container['loan_servicing_event_list'];
    }

    /**
     * Sets loan_servicing_event_list.
     *
     * @param null|LoanServicingEvent[] $loan_servicing_event_list a list of loan servicing events
     *
     * @return self
     */
    public function setLoanServicingEventList($loan_servicing_event_list)
    {
        if (is_null($loan_servicing_event_list)) {
            throw new \InvalidArgumentException('non-nullable loan_servicing_event_list cannot be null');
        }
        $this->container['loan_servicing_event_list'] = $loan_servicing_event_list;

        return $this;
    }

    /**
     * Gets adjustment_event_list.
     *
     * @return null|AdjustmentEvent[]
     */
    public function getAdjustmentEventList()
    {
        return $this->container['adjustment_event_list'];
    }

    /**
     * Sets adjustment_event_list.
     *
     * @param null|AdjustmentEvent[] $adjustment_event_list a list of adjustment event information for the seller's account
     *
     * @return self
     */
    public function setAdjustmentEventList($adjustment_event_list)
    {
        if (is_null($adjustment_event_list)) {
            throw new \InvalidArgumentException('non-nullable adjustment_event_list cannot be null');
        }
        $this->container['adjustment_event_list'] = $adjustment_event_list;

        return $this;
    }

    /**
     * Gets safet_reimbursement_event_list.
     *
     * @return null|SAFETReimbursementEvent[]
     */
    public function getSafetReimbursementEventList()
    {
        return $this->container['safet_reimbursement_event_list'];
    }

    /**
     * Sets safet_reimbursement_event_list.
     *
     * @param null|SAFETReimbursementEvent[] $safet_reimbursement_event_list a list of SAFETReimbursementEvents
     *
     * @return self
     */
    public function setSafetReimbursementEventList($safet_reimbursement_event_list)
    {
        if (is_null($safet_reimbursement_event_list)) {
            throw new \InvalidArgumentException('non-nullable safet_reimbursement_event_list cannot be null');
        }
        $this->container['safet_reimbursement_event_list'] = $safet_reimbursement_event_list;

        return $this;
    }

    /**
     * Gets seller_review_enrollment_payment_event_list.
     *
     * @return null|SellerReviewEnrollmentPaymentEvent[]
     */
    public function getSellerReviewEnrollmentPaymentEventList()
    {
        return $this->container['seller_review_enrollment_payment_event_list'];
    }

    /**
     * Sets seller_review_enrollment_payment_event_list.
     *
     * @param null|SellerReviewEnrollmentPaymentEvent[] $seller_review_enrollment_payment_event_list a list of information about fee events for the Early Reviewer Program
     *
     * @return self
     */
    public function setSellerReviewEnrollmentPaymentEventList($seller_review_enrollment_payment_event_list)
    {
        if (is_null($seller_review_enrollment_payment_event_list)) {
            throw new \InvalidArgumentException('non-nullable seller_review_enrollment_payment_event_list cannot be null');
        }
        $this->container['seller_review_enrollment_payment_event_list'] = $seller_review_enrollment_payment_event_list;

        return $this;
    }

    /**
     * Gets fba_liquidation_event_list.
     *
     * @return null|FBALiquidationEvent[]
     */
    public function getFbaLiquidationEventList()
    {
        return $this->container['fba_liquidation_event_list'];
    }

    /**
     * Sets fba_liquidation_event_list.
     *
     * @param null|FBALiquidationEvent[] $fba_liquidation_event_list a list of FBA inventory liquidation payment events
     *
     * @return self
     */
    public function setFbaLiquidationEventList($fba_liquidation_event_list)
    {
        if (is_null($fba_liquidation_event_list)) {
            throw new \InvalidArgumentException('non-nullable fba_liquidation_event_list cannot be null');
        }
        $this->container['fba_liquidation_event_list'] = $fba_liquidation_event_list;

        return $this;
    }

    /**
     * Gets coupon_payment_event_list.
     *
     * @return null|CouponPaymentEvent[]
     */
    public function getCouponPaymentEventList()
    {
        return $this->container['coupon_payment_event_list'];
    }

    /**
     * Sets coupon_payment_event_list.
     *
     * @param null|CouponPaymentEvent[] $coupon_payment_event_list a list of coupon payment event information
     *
     * @return self
     */
    public function setCouponPaymentEventList($coupon_payment_event_list)
    {
        if (is_null($coupon_payment_event_list)) {
            throw new \InvalidArgumentException('non-nullable coupon_payment_event_list cannot be null');
        }
        $this->container['coupon_payment_event_list'] = $coupon_payment_event_list;

        return $this;
    }

    /**
     * Gets imaging_services_fee_event_list.
     *
     * @return null|ImagingServicesFeeEvent[]
     */
    public function getImagingServicesFeeEventList()
    {
        return $this->container['imaging_services_fee_event_list'];
    }

    /**
     * Sets imaging_services_fee_event_list.
     *
     * @param null|ImagingServicesFeeEvent[] $imaging_services_fee_event_list a list of fee events related to Amazon Imaging services
     *
     * @return self
     */
    public function setImagingServicesFeeEventList($imaging_services_fee_event_list)
    {
        if (is_null($imaging_services_fee_event_list)) {
            throw new \InvalidArgumentException('non-nullable imaging_services_fee_event_list cannot be null');
        }
        $this->container['imaging_services_fee_event_list'] = $imaging_services_fee_event_list;

        return $this;
    }

    /**
     * Gets network_commingling_transaction_event_list.
     *
     * @return null|NetworkComminglingTransactionEvent[]
     */
    public function getNetworkComminglingTransactionEventList()
    {
        return $this->container['network_commingling_transaction_event_list'];
    }

    /**
     * Sets network_commingling_transaction_event_list.
     *
     * @param null|NetworkComminglingTransactionEvent[] $network_commingling_transaction_event_list a list of network commingling transaction events
     *
     * @return self
     */
    public function setNetworkComminglingTransactionEventList($network_commingling_transaction_event_list)
    {
        if (is_null($network_commingling_transaction_event_list)) {
            throw new \InvalidArgumentException('non-nullable network_commingling_transaction_event_list cannot be null');
        }
        $this->container['network_commingling_transaction_event_list'] = $network_commingling_transaction_event_list;

        return $this;
    }

    /**
     * Gets affordability_expense_event_list.
     *
     * @return null|AffordabilityExpenseEvent[]
     */
    public function getAffordabilityExpenseEventList()
    {
        return $this->container['affordability_expense_event_list'];
    }

    /**
     * Sets affordability_expense_event_list.
     *
     * @param null|AffordabilityExpenseEvent[] $affordability_expense_event_list a list of expense information related to an affordability promotion
     *
     * @return self
     */
    public function setAffordabilityExpenseEventList($affordability_expense_event_list)
    {
        if (is_null($affordability_expense_event_list)) {
            throw new \InvalidArgumentException('non-nullable affordability_expense_event_list cannot be null');
        }
        $this->container['affordability_expense_event_list'] = $affordability_expense_event_list;

        return $this;
    }

    /**
     * Gets affordability_expense_reversal_event_list.
     *
     * @return null|AffordabilityExpenseEvent[]
     */
    public function getAffordabilityExpenseReversalEventList()
    {
        return $this->container['affordability_expense_reversal_event_list'];
    }

    /**
     * Sets affordability_expense_reversal_event_list.
     *
     * @param null|AffordabilityExpenseEvent[] $affordability_expense_reversal_event_list a list of expense information related to an affordability promotion
     *
     * @return self
     */
    public function setAffordabilityExpenseReversalEventList($affordability_expense_reversal_event_list)
    {
        if (is_null($affordability_expense_reversal_event_list)) {
            throw new \InvalidArgumentException('non-nullable affordability_expense_reversal_event_list cannot be null');
        }
        $this->container['affordability_expense_reversal_event_list'] = $affordability_expense_reversal_event_list;

        return $this;
    }

    /**
     * Gets removal_shipment_event_list.
     *
     * @return null|RemovalShipmentEvent[]
     */
    public function getRemovalShipmentEventList()
    {
        return $this->container['removal_shipment_event_list'];
    }

    /**
     * Sets removal_shipment_event_list.
     *
     * @param null|RemovalShipmentEvent[] $removal_shipment_event_list a list of removal shipment event information
     *
     * @return self
     */
    public function setRemovalShipmentEventList($removal_shipment_event_list)
    {
        if (is_null($removal_shipment_event_list)) {
            throw new \InvalidArgumentException('non-nullable removal_shipment_event_list cannot be null');
        }
        $this->container['removal_shipment_event_list'] = $removal_shipment_event_list;

        return $this;
    }

    /**
     * Gets removal_shipment_adjustment_event_list.
     *
     * @return null|RemovalShipmentAdjustmentEvent[]
     */
    public function getRemovalShipmentAdjustmentEventList()
    {
        return $this->container['removal_shipment_adjustment_event_list'];
    }

    /**
     * Sets removal_shipment_adjustment_event_list.
     *
     * @param null|RemovalShipmentAdjustmentEvent[] $removal_shipment_adjustment_event_list a comma-delimited list of Removal shipmentAdjustment details for FBA inventory
     *
     * @return self
     */
    public function setRemovalShipmentAdjustmentEventList($removal_shipment_adjustment_event_list)
    {
        if (is_null($removal_shipment_adjustment_event_list)) {
            throw new \InvalidArgumentException('non-nullable removal_shipment_adjustment_event_list cannot be null');
        }
        $this->container['removal_shipment_adjustment_event_list'] = $removal_shipment_adjustment_event_list;

        return $this;
    }

    /**
     * Gets trial_shipment_event_list.
     *
     * @return null|TrialShipmentEvent[]
     */
    public function getTrialShipmentEventList()
    {
        return $this->container['trial_shipment_event_list'];
    }

    /**
     * Sets trial_shipment_event_list.
     *
     * @param null|TrialShipmentEvent[] $trial_shipment_event_list a list of information about trial shipment financial events
     *
     * @return self
     */
    public function setTrialShipmentEventList($trial_shipment_event_list)
    {
        if (is_null($trial_shipment_event_list)) {
            throw new \InvalidArgumentException('non-nullable trial_shipment_event_list cannot be null');
        }
        $this->container['trial_shipment_event_list'] = $trial_shipment_event_list;

        return $this;
    }

    /**
     * Gets tds_reimbursement_event_list.
     *
     * @return null|TDSReimbursementEvent[]
     */
    public function getTdsReimbursementEventList()
    {
        return $this->container['tds_reimbursement_event_list'];
    }

    /**
     * Sets tds_reimbursement_event_list.
     *
     * @param null|TDSReimbursementEvent[] $tds_reimbursement_event_list a list of `TDSReimbursementEvent` items
     *
     * @return self
     */
    public function setTdsReimbursementEventList($tds_reimbursement_event_list)
    {
        if (is_null($tds_reimbursement_event_list)) {
            throw new \InvalidArgumentException('non-nullable tds_reimbursement_event_list cannot be null');
        }
        $this->container['tds_reimbursement_event_list'] = $tds_reimbursement_event_list;

        return $this;
    }

    /**
     * Gets adhoc_disbursement_event_list.
     *
     * @return null|AdhocDisbursementEvent[]
     */
    public function getAdhocDisbursementEventList()
    {
        return $this->container['adhoc_disbursement_event_list'];
    }

    /**
     * Sets adhoc_disbursement_event_list.
     *
     * @param null|AdhocDisbursementEvent[] $adhoc_disbursement_event_list a list of `AdhocDisbursement` events
     *
     * @return self
     */
    public function setAdhocDisbursementEventList($adhoc_disbursement_event_list)
    {
        if (is_null($adhoc_disbursement_event_list)) {
            throw new \InvalidArgumentException('non-nullable adhoc_disbursement_event_list cannot be null');
        }
        $this->container['adhoc_disbursement_event_list'] = $adhoc_disbursement_event_list;

        return $this;
    }

    /**
     * Gets tax_withholding_event_list.
     *
     * @return null|TaxWithholdingEvent[]
     */
    public function getTaxWithholdingEventList()
    {
        return $this->container['tax_withholding_event_list'];
    }

    /**
     * Sets tax_withholding_event_list.
     *
     * @param null|TaxWithholdingEvent[] $tax_withholding_event_list a list of `TaxWithholding` events
     *
     * @return self
     */
    public function setTaxWithholdingEventList($tax_withholding_event_list)
    {
        if (is_null($tax_withholding_event_list)) {
            throw new \InvalidArgumentException('non-nullable tax_withholding_event_list cannot be null');
        }
        $this->container['tax_withholding_event_list'] = $tax_withholding_event_list;

        return $this;
    }

    /**
     * Gets charge_refund_event_list.
     *
     * @return null|ChargeRefundEvent[]
     */
    public function getChargeRefundEventList()
    {
        return $this->container['charge_refund_event_list'];
    }

    /**
     * Sets charge_refund_event_list.
     *
     * @param null|ChargeRefundEvent[] $charge_refund_event_list a list of charge refund events
     *
     * @return self
     */
    public function setChargeRefundEventList($charge_refund_event_list)
    {
        if (is_null($charge_refund_event_list)) {
            throw new \InvalidArgumentException('non-nullable charge_refund_event_list cannot be null');
        }
        $this->container['charge_refund_event_list'] = $charge_refund_event_list;

        return $this;
    }

    /**
     * Gets failed_adhoc_disbursement_event_list.
     *
     * @return null|FailedAdhocDisbursementEvent[]
     */
    public function getFailedAdhocDisbursementEventList()
    {
        return $this->container['failed_adhoc_disbursement_event_list'];
    }

    /**
     * Sets failed_adhoc_disbursement_event_list.
     *
     * @param null|FailedAdhocDisbursementEvent[] $failed_adhoc_disbursement_event_list a list of `FailedAdhocDisbursementEvent`s
     *
     * @return self
     */
    public function setFailedAdhocDisbursementEventList($failed_adhoc_disbursement_event_list)
    {
        if (is_null($failed_adhoc_disbursement_event_list)) {
            throw new \InvalidArgumentException('non-nullable failed_adhoc_disbursement_event_list cannot be null');
        }
        $this->container['failed_adhoc_disbursement_event_list'] = $failed_adhoc_disbursement_event_list;

        return $this;
    }

    /**
     * Gets value_added_service_charge_event_list.
     *
     * @return null|ValueAddedServiceChargeEvent[]
     */
    public function getValueAddedServiceChargeEventList()
    {
        return $this->container['value_added_service_charge_event_list'];
    }

    /**
     * Sets value_added_service_charge_event_list.
     *
     * @param null|ValueAddedServiceChargeEvent[] $value_added_service_charge_event_list a list of `ValueAddedServiceCharge` events
     *
     * @return self
     */
    public function setValueAddedServiceChargeEventList($value_added_service_charge_event_list)
    {
        if (is_null($value_added_service_charge_event_list)) {
            throw new \InvalidArgumentException('non-nullable value_added_service_charge_event_list cannot be null');
        }
        $this->container['value_added_service_charge_event_list'] = $value_added_service_charge_event_list;

        return $this;
    }

    /**
     * Gets capacity_reservation_billing_event_list.
     *
     * @return null|CapacityReservationBillingEvent[]
     */
    public function getCapacityReservationBillingEventList()
    {
        return $this->container['capacity_reservation_billing_event_list'];
    }

    /**
     * Sets capacity_reservation_billing_event_list.
     *
     * @param null|CapacityReservationBillingEvent[] $capacity_reservation_billing_event_list a list of `CapacityReservationBillingEvent` events
     *
     * @return self
     */
    public function setCapacityReservationBillingEventList($capacity_reservation_billing_event_list)
    {
        if (is_null($capacity_reservation_billing_event_list)) {
            throw new \InvalidArgumentException('non-nullable capacity_reservation_billing_event_list cannot be null');
        }
        $this->container['capacity_reservation_billing_event_list'] = $capacity_reservation_billing_event_list;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
