<?php
/**
 * InvoiceItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\vendor\invoices\v1;

use \ArrayAccess;
use \SpApi\ObjectSerializer;

/**
 * InvoiceItem Class Doc Comment
 *
 * @category Class
 * @description Details of the item being invoiced.
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_sequence_number' => 'int',
        'amazon_product_identifier' => 'string',
        'vendor_product_identifier' => 'string',
        'invoiced_quantity' => '\SpApi\Model\vendor\invoices\v1\ItemQuantity',
        'net_cost' => '\SpApi\Model\vendor\invoices\v1\Money',
        'net_cost_unit_of_measure' => '\SpApi\Model\vendor\invoices\v1\NetCostUnitOfMeasure',
        'purchase_order_number' => 'string',
        'hsn_code' => 'string',
        'credit_note_details' => '\SpApi\Model\vendor\invoices\v1\CreditNoteDetails',
        'tax_details' => '\SpApi\Model\vendor\invoices\v1\TaxDetails[]',
        'charge_details' => '\SpApi\Model\vendor\invoices\v1\ChargeDetails[]',
        'allowance_details' => '\SpApi\Model\vendor\invoices\v1\AllowanceDetails[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_sequence_number' => null,
        'amazon_product_identifier' => null,
        'vendor_product_identifier' => null,
        'invoiced_quantity' => null,
        'net_cost' => null,
        'net_cost_unit_of_measure' => null,
        'purchase_order_number' => null,
        'hsn_code' => null,
        'credit_note_details' => null,
        'tax_details' => null,
        'charge_details' => null,
        'allowance_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'item_sequence_number' => false,
        'amazon_product_identifier' => false,
        'vendor_product_identifier' => false,
        'invoiced_quantity' => false,
        'net_cost' => false,
        'net_cost_unit_of_measure' => false,
        'purchase_order_number' => false,
        'hsn_code' => false,
        'credit_note_details' => false,
        'tax_details' => false,
        'charge_details' => false,
        'allowance_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_sequence_number' => 'itemSequenceNumber',
        'amazon_product_identifier' => 'amazonProductIdentifier',
        'vendor_product_identifier' => 'vendorProductIdentifier',
        'invoiced_quantity' => 'invoicedQuantity',
        'net_cost' => 'netCost',
        'net_cost_unit_of_measure' => 'netCostUnitOfMeasure',
        'purchase_order_number' => 'purchaseOrderNumber',
        'hsn_code' => 'hsnCode',
        'credit_note_details' => 'creditNoteDetails',
        'tax_details' => 'taxDetails',
        'charge_details' => 'chargeDetails',
        'allowance_details' => 'allowanceDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_sequence_number' => 'setItemSequenceNumber',
        'amazon_product_identifier' => 'setAmazonProductIdentifier',
        'vendor_product_identifier' => 'setVendorProductIdentifier',
        'invoiced_quantity' => 'setInvoicedQuantity',
        'net_cost' => 'setNetCost',
        'net_cost_unit_of_measure' => 'setNetCostUnitOfMeasure',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'hsn_code' => 'setHsnCode',
        'credit_note_details' => 'setCreditNoteDetails',
        'tax_details' => 'setTaxDetails',
        'charge_details' => 'setChargeDetails',
        'allowance_details' => 'setAllowanceDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_sequence_number' => 'getItemSequenceNumber',
        'amazon_product_identifier' => 'getAmazonProductIdentifier',
        'vendor_product_identifier' => 'getVendorProductIdentifier',
        'invoiced_quantity' => 'getInvoicedQuantity',
        'net_cost' => 'getNetCost',
        'net_cost_unit_of_measure' => 'getNetCostUnitOfMeasure',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'hsn_code' => 'getHsnCode',
        'credit_note_details' => 'getCreditNoteDetails',
        'tax_details' => 'getTaxDetails',
        'charge_details' => 'getChargeDetails',
        'allowance_details' => 'getAllowanceDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('item_sequence_number', $data ?? [], null);
        $this->setIfExists('amazon_product_identifier', $data ?? [], null);
        $this->setIfExists('vendor_product_identifier', $data ?? [], null);
        $this->setIfExists('invoiced_quantity', $data ?? [], null);
        $this->setIfExists('net_cost', $data ?? [], null);
        $this->setIfExists('net_cost_unit_of_measure', $data ?? [], null);
        $this->setIfExists('purchase_order_number', $data ?? [], null);
        $this->setIfExists('hsn_code', $data ?? [], null);
        $this->setIfExists('credit_note_details', $data ?? [], null);
        $this->setIfExists('tax_details', $data ?? [], null);
        $this->setIfExists('charge_details', $data ?? [], null);
        $this->setIfExists('allowance_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item_sequence_number'] === null) {
            $invalidProperties[] = "'item_sequence_number' can't be null";
        }
        if ($this->container['invoiced_quantity'] === null) {
            $invalidProperties[] = "'invoiced_quantity' can't be null";
        }
        if ($this->container['net_cost'] === null) {
            $invalidProperties[] = "'net_cost' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_sequence_number
     *
     * @return int
     */
    public function getItemSequenceNumber()
    {
        return $this->container['item_sequence_number'];
    }

    /**
     * Sets item_sequence_number
     *
     * @param int $item_sequence_number Unique number related to this line item.
     *
     * @return self
     */
    public function setItemSequenceNumber($item_sequence_number)
    {
        if (is_null($item_sequence_number)) {
            throw new \InvalidArgumentException('non-nullable item_sequence_number cannot be null');
        }
        $this->container['item_sequence_number'] = $item_sequence_number;

        return $this;
    }

    /**
     * Gets amazon_product_identifier
     *
     * @return string|null
     */
    public function getAmazonProductIdentifier()
    {
        return $this->container['amazon_product_identifier'];
    }

    /**
     * Sets amazon_product_identifier
     *
     * @param string|null $amazon_product_identifier Amazon Standard Identification Number (ASIN) of an item.
     *
     * @return self
     */
    public function setAmazonProductIdentifier($amazon_product_identifier)
    {
        if (is_null($amazon_product_identifier)) {
            throw new \InvalidArgumentException('non-nullable amazon_product_identifier cannot be null');
        }
        $this->container['amazon_product_identifier'] = $amazon_product_identifier;

        return $this;
    }

    /**
     * Gets vendor_product_identifier
     *
     * @return string|null
     */
    public function getVendorProductIdentifier()
    {
        return $this->container['vendor_product_identifier'];
    }

    /**
     * Sets vendor_product_identifier
     *
     * @param string|null $vendor_product_identifier The vendor selected product identifier of the item. Should be the same as was provided in the purchase order.
     *
     * @return self
     */
    public function setVendorProductIdentifier($vendor_product_identifier)
    {
        if (is_null($vendor_product_identifier)) {
            throw new \InvalidArgumentException('non-nullable vendor_product_identifier cannot be null');
        }
        $this->container['vendor_product_identifier'] = $vendor_product_identifier;

        return $this;
    }

    /**
     * Gets invoiced_quantity
     *
     * @return \SpApi\Model\vendor\invoices\v1\ItemQuantity
     */
    public function getInvoicedQuantity()
    {
        return $this->container['invoiced_quantity'];
    }

    /**
     * Sets invoiced_quantity
     *
     * @param \SpApi\Model\vendor\invoices\v1\ItemQuantity $invoiced_quantity invoiced_quantity
     *
     * @return self
     */
    public function setInvoicedQuantity($invoiced_quantity)
    {
        if (is_null($invoiced_quantity)) {
            throw new \InvalidArgumentException('non-nullable invoiced_quantity cannot be null');
        }
        $this->container['invoiced_quantity'] = $invoiced_quantity;

        return $this;
    }

    /**
     * Gets net_cost
     *
     * @return \SpApi\Model\vendor\invoices\v1\Money
     */
    public function getNetCost()
    {
        return $this->container['net_cost'];
    }

    /**
     * Sets net_cost
     *
     * @param \SpApi\Model\vendor\invoices\v1\Money $net_cost net_cost
     *
     * @return self
     */
    public function setNetCost($net_cost)
    {
        if (is_null($net_cost)) {
            throw new \InvalidArgumentException('non-nullable net_cost cannot be null');
        }
        $this->container['net_cost'] = $net_cost;

        return $this;
    }

    /**
     * Gets net_cost_unit_of_measure
     *
     * @return \SpApi\Model\vendor\invoices\v1\NetCostUnitOfMeasure|null
     */
    public function getNetCostUnitOfMeasure()
    {
        return $this->container['net_cost_unit_of_measure'];
    }

    /**
     * Sets net_cost_unit_of_measure
     *
     * @param \SpApi\Model\vendor\invoices\v1\NetCostUnitOfMeasure|null $net_cost_unit_of_measure net_cost_unit_of_measure
     *
     * @return self
     */
    public function setNetCostUnitOfMeasure($net_cost_unit_of_measure)
    {
        if (is_null($net_cost_unit_of_measure)) {
            throw new \InvalidArgumentException('non-nullable net_cost_unit_of_measure cannot be null');
        }
        $this->container['net_cost_unit_of_measure'] = $net_cost_unit_of_measure;

        return $this;
    }

    /**
     * Gets purchase_order_number
     *
     * @return string|null
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     *
     * @param string|null $purchase_order_number The Amazon purchase order number for this invoiced line item. Formatting Notes: 8-character alpha-numeric code. This value is mandatory only when invoiceType is Invoice, and is not required when invoiceType is CreditNote.
     *
     * @return self
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        if (is_null($purchase_order_number)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_number cannot be null');
        }
        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }

    /**
     * Gets hsn_code
     *
     * @return string|null
     */
    public function getHsnCode()
    {
        return $this->container['hsn_code'];
    }

    /**
     * Sets hsn_code
     *
     * @param string|null $hsn_code HSN Tax code. The HSN number cannot contain alphabets.
     *
     * @return self
     */
    public function setHsnCode($hsn_code)
    {
        if (is_null($hsn_code)) {
            throw new \InvalidArgumentException('non-nullable hsn_code cannot be null');
        }
        $this->container['hsn_code'] = $hsn_code;

        return $this;
    }

    /**
     * Gets credit_note_details
     *
     * @return \SpApi\Model\vendor\invoices\v1\CreditNoteDetails|null
     */
    public function getCreditNoteDetails()
    {
        return $this->container['credit_note_details'];
    }

    /**
     * Sets credit_note_details
     *
     * @param \SpApi\Model\vendor\invoices\v1\CreditNoteDetails|null $credit_note_details credit_note_details
     *
     * @return self
     */
    public function setCreditNoteDetails($credit_note_details)
    {
        if (is_null($credit_note_details)) {
            throw new \InvalidArgumentException('non-nullable credit_note_details cannot be null');
        }
        $this->container['credit_note_details'] = $credit_note_details;

        return $this;
    }

    /**
     * Gets tax_details
     *
     * @return \SpApi\Model\vendor\invoices\v1\TaxDetails[]|null
     */
    public function getTaxDetails()
    {
        return $this->container['tax_details'];
    }

    /**
     * Sets tax_details
     *
     * @param \SpApi\Model\vendor\invoices\v1\TaxDetails[]|null $tax_details Individual tax details per line item.
     *
     * @return self
     */
    public function setTaxDetails($tax_details)
    {
        if (is_null($tax_details)) {
            throw new \InvalidArgumentException('non-nullable tax_details cannot be null');
        }
        $this->container['tax_details'] = $tax_details;

        return $this;
    }

    /**
     * Gets charge_details
     *
     * @return \SpApi\Model\vendor\invoices\v1\ChargeDetails[]|null
     */
    public function getChargeDetails()
    {
        return $this->container['charge_details'];
    }

    /**
     * Sets charge_details
     *
     * @param \SpApi\Model\vendor\invoices\v1\ChargeDetails[]|null $charge_details Individual charge details per line item.
     *
     * @return self
     */
    public function setChargeDetails($charge_details)
    {
        if (is_null($charge_details)) {
            throw new \InvalidArgumentException('non-nullable charge_details cannot be null');
        }
        $this->container['charge_details'] = $charge_details;

        return $this;
    }

    /**
     * Gets allowance_details
     *
     * @return \SpApi\Model\vendor\invoices\v1\AllowanceDetails[]|null
     */
    public function getAllowanceDetails()
    {
        return $this->container['allowance_details'];
    }

    /**
     * Sets allowance_details
     *
     * @param \SpApi\Model\vendor\invoices\v1\AllowanceDetails[]|null $allowance_details Individual allowance details per line item.
     *
     * @return self
     */
    public function setAllowanceDetails($allowance_details)
    {
        if (is_null($allowance_details)) {
            throw new \InvalidArgumentException('non-nullable allowance_details cannot be null');
        }
        $this->container['allowance_details'] = $allowance_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


