<?php
/**
 * TransportShipmentMeasurements
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\vendor\shipments\v1;

use \ArrayAccess;
use \SpApi\ObjectSerializer;

/**
 * TransportShipmentMeasurements Class Doc Comment
 *
 * @category Class
 * @description Shipment measurement details.
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransportShipmentMeasurements implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransportShipmentMeasurements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_carton_count' => 'int',
        'total_pallet_stackable' => 'int',
        'total_pallet_non_stackable' => 'int',
        'shipment_weight' => '\SpApi\Model\vendor\shipments\v1\Weight',
        'shipment_volume' => '\SpApi\Model\vendor\shipments\v1\Volume'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_carton_count' => null,
        'total_pallet_stackable' => null,
        'total_pallet_non_stackable' => null,
        'shipment_weight' => null,
        'shipment_volume' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_carton_count' => false,
        'total_pallet_stackable' => false,
        'total_pallet_non_stackable' => false,
        'shipment_weight' => false,
        'shipment_volume' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_carton_count' => 'totalCartonCount',
        'total_pallet_stackable' => 'totalPalletStackable',
        'total_pallet_non_stackable' => 'totalPalletNonStackable',
        'shipment_weight' => 'shipmentWeight',
        'shipment_volume' => 'shipmentVolume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_carton_count' => 'setTotalCartonCount',
        'total_pallet_stackable' => 'setTotalPalletStackable',
        'total_pallet_non_stackable' => 'setTotalPalletNonStackable',
        'shipment_weight' => 'setShipmentWeight',
        'shipment_volume' => 'setShipmentVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_carton_count' => 'getTotalCartonCount',
        'total_pallet_stackable' => 'getTotalPalletStackable',
        'total_pallet_non_stackable' => 'getTotalPalletNonStackable',
        'shipment_weight' => 'getShipmentWeight',
        'shipment_volume' => 'getShipmentVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_carton_count', $data ?? [], null);
        $this->setIfExists('total_pallet_stackable', $data ?? [], null);
        $this->setIfExists('total_pallet_non_stackable', $data ?? [], null);
        $this->setIfExists('shipment_weight', $data ?? [], null);
        $this->setIfExists('shipment_volume', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_carton_count
     *
     * @return int|null
     */
    public function getTotalCartonCount()
    {
        return $this->container['total_carton_count'];
    }

    /**
     * Sets total_carton_count
     *
     * @param int|null $total_carton_count Total number of cartons present in the shipment. Provide the cartonCount only for non-palletized shipments.
     *
     * @return self
     */
    public function setTotalCartonCount($total_carton_count)
    {
        if (is_null($total_carton_count)) {
            throw new \InvalidArgumentException('non-nullable total_carton_count cannot be null');
        }
        $this->container['total_carton_count'] = $total_carton_count;

        return $this;
    }

    /**
     * Gets total_pallet_stackable
     *
     * @return int|null
     */
    public function getTotalPalletStackable()
    {
        return $this->container['total_pallet_stackable'];
    }

    /**
     * Sets total_pallet_stackable
     *
     * @param int|null $total_pallet_stackable Total number of Stackable Pallets present in the shipment.
     *
     * @return self
     */
    public function setTotalPalletStackable($total_pallet_stackable)
    {
        if (is_null($total_pallet_stackable)) {
            throw new \InvalidArgumentException('non-nullable total_pallet_stackable cannot be null');
        }
        $this->container['total_pallet_stackable'] = $total_pallet_stackable;

        return $this;
    }

    /**
     * Gets total_pallet_non_stackable
     *
     * @return int|null
     */
    public function getTotalPalletNonStackable()
    {
        return $this->container['total_pallet_non_stackable'];
    }

    /**
     * Sets total_pallet_non_stackable
     *
     * @param int|null $total_pallet_non_stackable Total number of Non Stackable Pallets present in the shipment.
     *
     * @return self
     */
    public function setTotalPalletNonStackable($total_pallet_non_stackable)
    {
        if (is_null($total_pallet_non_stackable)) {
            throw new \InvalidArgumentException('non-nullable total_pallet_non_stackable cannot be null');
        }
        $this->container['total_pallet_non_stackable'] = $total_pallet_non_stackable;

        return $this;
    }

    /**
     * Gets shipment_weight
     *
     * @return \SpApi\Model\vendor\shipments\v1\Weight|null
     */
    public function getShipmentWeight()
    {
        return $this->container['shipment_weight'];
    }

    /**
     * Sets shipment_weight
     *
     * @param \SpApi\Model\vendor\shipments\v1\Weight|null $shipment_weight shipment_weight
     *
     * @return self
     */
    public function setShipmentWeight($shipment_weight)
    {
        if (is_null($shipment_weight)) {
            throw new \InvalidArgumentException('non-nullable shipment_weight cannot be null');
        }
        $this->container['shipment_weight'] = $shipment_weight;

        return $this;
    }

    /**
     * Gets shipment_volume
     *
     * @return \SpApi\Model\vendor\shipments\v1\Volume|null
     */
    public function getShipmentVolume()
    {
        return $this->container['shipment_volume'];
    }

    /**
     * Sets shipment_volume
     *
     * @param \SpApi\Model\vendor\shipments\v1\Volume|null $shipment_volume shipment_volume
     *
     * @return self
     */
    public function setShipmentVolume($shipment_volume)
    {
        if (is_null($shipment_volume)) {
            throw new \InvalidArgumentException('non-nullable shipment_volume cannot be null');
        }
        $this->container['shipment_volume'] = $shipment_volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


