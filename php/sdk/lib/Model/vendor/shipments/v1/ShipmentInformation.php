<?php
/**
 * ShipmentInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\vendor\shipments\v1;

use \ArrayAccess;
use \SpApi\ObjectSerializer;

/**
 * ShipmentInformation Class Doc Comment
 *
 * @category Class
 * @description Shipment Information details for Label request.
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vendor_details' => '\SpApi\Model\vendor\shipments\v1\VendorDetails',
        'buyer_reference_number' => 'string',
        'ship_to_party' => '\SpApi\Model\vendor\shipments\v1\PartyIdentification',
        'ship_from_party' => '\SpApi\Model\vendor\shipments\v1\PartyIdentification',
        'warehouse_id' => 'string',
        'master_tracking_id' => 'string',
        'total_label_count' => 'int',
        'ship_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vendor_details' => null,
        'buyer_reference_number' => null,
        'ship_to_party' => null,
        'ship_from_party' => null,
        'warehouse_id' => null,
        'master_tracking_id' => null,
        'total_label_count' => null,
        'ship_mode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vendor_details' => false,
        'buyer_reference_number' => false,
        'ship_to_party' => false,
        'ship_from_party' => false,
        'warehouse_id' => false,
        'master_tracking_id' => false,
        'total_label_count' => false,
        'ship_mode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vendor_details' => 'vendorDetails',
        'buyer_reference_number' => 'buyerReferenceNumber',
        'ship_to_party' => 'shipToParty',
        'ship_from_party' => 'shipFromParty',
        'warehouse_id' => 'warehouseId',
        'master_tracking_id' => 'masterTrackingId',
        'total_label_count' => 'totalLabelCount',
        'ship_mode' => 'shipMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vendor_details' => 'setVendorDetails',
        'buyer_reference_number' => 'setBuyerReferenceNumber',
        'ship_to_party' => 'setShipToParty',
        'ship_from_party' => 'setShipFromParty',
        'warehouse_id' => 'setWarehouseId',
        'master_tracking_id' => 'setMasterTrackingId',
        'total_label_count' => 'setTotalLabelCount',
        'ship_mode' => 'setShipMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vendor_details' => 'getVendorDetails',
        'buyer_reference_number' => 'getBuyerReferenceNumber',
        'ship_to_party' => 'getShipToParty',
        'ship_from_party' => 'getShipFromParty',
        'warehouse_id' => 'getWarehouseId',
        'master_tracking_id' => 'getMasterTrackingId',
        'total_label_count' => 'getTotalLabelCount',
        'ship_mode' => 'getShipMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SHIP_MODE_SMALL_PARCEL = 'SmallParcel';
    public const SHIP_MODE_LTL = 'LTL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipModeAllowableValues()
    {
        return [
            self::SHIP_MODE_SMALL_PARCEL,
            self::SHIP_MODE_LTL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vendor_details', $data ?? [], null);
        $this->setIfExists('buyer_reference_number', $data ?? [], null);
        $this->setIfExists('ship_to_party', $data ?? [], null);
        $this->setIfExists('ship_from_party', $data ?? [], null);
        $this->setIfExists('warehouse_id', $data ?? [], null);
        $this->setIfExists('master_tracking_id', $data ?? [], null);
        $this->setIfExists('total_label_count', $data ?? [], null);
        $this->setIfExists('ship_mode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getShipModeAllowableValues();
        if (!is_null($this->container['ship_mode']) && !in_array($this->container['ship_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ship_mode', must be one of '%s'",
                $this->container['ship_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vendor_details
     *
     * @return \SpApi\Model\vendor\shipments\v1\VendorDetails|null
     */
    public function getVendorDetails()
    {
        return $this->container['vendor_details'];
    }

    /**
     * Sets vendor_details
     *
     * @param \SpApi\Model\vendor\shipments\v1\VendorDetails|null $vendor_details vendor_details
     *
     * @return self
     */
    public function setVendorDetails($vendor_details)
    {
        if (is_null($vendor_details)) {
            throw new \InvalidArgumentException('non-nullable vendor_details cannot be null');
        }
        $this->container['vendor_details'] = $vendor_details;

        return $this;
    }

    /**
     * Gets buyer_reference_number
     *
     * @return string|null
     */
    public function getBuyerReferenceNumber()
    {
        return $this->container['buyer_reference_number'];
    }

    /**
     * Sets buyer_reference_number
     *
     * @param string|null $buyer_reference_number The buyer reference number is a unique identifier generated by the buyer for all Collect and WePay shipments.
     *
     * @return self
     */
    public function setBuyerReferenceNumber($buyer_reference_number)
    {
        if (is_null($buyer_reference_number)) {
            throw new \InvalidArgumentException('non-nullable buyer_reference_number cannot be null');
        }
        $this->container['buyer_reference_number'] = $buyer_reference_number;

        return $this;
    }

    /**
     * Gets ship_to_party
     *
     * @return \SpApi\Model\vendor\shipments\v1\PartyIdentification|null
     */
    public function getShipToParty()
    {
        return $this->container['ship_to_party'];
    }

    /**
     * Sets ship_to_party
     *
     * @param \SpApi\Model\vendor\shipments\v1\PartyIdentification|null $ship_to_party ship_to_party
     *
     * @return self
     */
    public function setShipToParty($ship_to_party)
    {
        if (is_null($ship_to_party)) {
            throw new \InvalidArgumentException('non-nullable ship_to_party cannot be null');
        }
        $this->container['ship_to_party'] = $ship_to_party;

        return $this;
    }

    /**
     * Gets ship_from_party
     *
     * @return \SpApi\Model\vendor\shipments\v1\PartyIdentification|null
     */
    public function getShipFromParty()
    {
        return $this->container['ship_from_party'];
    }

    /**
     * Sets ship_from_party
     *
     * @param \SpApi\Model\vendor\shipments\v1\PartyIdentification|null $ship_from_party ship_from_party
     *
     * @return self
     */
    public function setShipFromParty($ship_from_party)
    {
        if (is_null($ship_from_party)) {
            throw new \InvalidArgumentException('non-nullable ship_from_party cannot be null');
        }
        $this->container['ship_from_party'] = $ship_from_party;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string|null
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string|null $warehouse_id Vendor Warehouse ID from where the shipment is scheduled to be picked up by buyer / Carrier.
     *
     * @return self
     */
    public function setWarehouseId($warehouse_id)
    {
        if (is_null($warehouse_id)) {
            throw new \InvalidArgumentException('non-nullable warehouse_id cannot be null');
        }
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets master_tracking_id
     *
     * @return string|null
     */
    public function getMasterTrackingId()
    {
        return $this->container['master_tracking_id'];
    }

    /**
     * Sets master_tracking_id
     *
     * @param string|null $master_tracking_id Unique Id with  which  the shipment can be tracked for Small Parcels.
     *
     * @return self
     */
    public function setMasterTrackingId($master_tracking_id)
    {
        if (is_null($master_tracking_id)) {
            throw new \InvalidArgumentException('non-nullable master_tracking_id cannot be null');
        }
        $this->container['master_tracking_id'] = $master_tracking_id;

        return $this;
    }

    /**
     * Gets total_label_count
     *
     * @return int|null
     */
    public function getTotalLabelCount()
    {
        return $this->container['total_label_count'];
    }

    /**
     * Sets total_label_count
     *
     * @param int|null $total_label_count Number of Labels that are created as part of this shipment.
     *
     * @return self
     */
    public function setTotalLabelCount($total_label_count)
    {
        if (is_null($total_label_count)) {
            throw new \InvalidArgumentException('non-nullable total_label_count cannot be null');
        }
        $this->container['total_label_count'] = $total_label_count;

        return $this;
    }

    /**
     * Gets ship_mode
     *
     * @return string|null
     */
    public function getShipMode()
    {
        return $this->container['ship_mode'];
    }

    /**
     * Sets ship_mode
     *
     * @param string|null $ship_mode Type of shipment whether it is Small Parcel
     *
     * @return self
     */
    public function setShipMode($ship_mode)
    {
        if (is_null($ship_mode)) {
            throw new \InvalidArgumentException('non-nullable ship_mode cannot be null');
        }
        $allowedValues = $this->getShipModeAllowableValues();
        if (!in_array($ship_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ship_mode', must be one of '%s'",
                    $ship_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ship_mode'] = $ship_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


