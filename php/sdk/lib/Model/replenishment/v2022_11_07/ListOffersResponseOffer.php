<?php

/**
 * ListOffersResponseOffer.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Replenishment.
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * The version of the OpenAPI document: 2022-11-07
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\replenishment\v2022_11_07;

use SpApi\ObjectSerializer;

/**
 * ListOffersResponseOffer Class Doc Comment.
 *
 * @category Class
 *
 * @description An object which contains details about an offer.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class ListOffersResponseOffer implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'ListOffersResponseOffer';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'sku' => 'string',
        'asin' => 'string',
        'marketplace_id' => 'string',
        'eligibility' => '\SpApi\Model\replenishment\v2022_11_07\EligibilityStatus',
        'offer_program_configuration' => '\SpApi\Model\replenishment\v2022_11_07\OfferProgramConfiguration',
        'program_type' => '\SpApi\Model\replenishment\v2022_11_07\ProgramType',
        'vendor_codes' => 'string[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'sku' => null,
        'asin' => null,
        'marketplace_id' => null,
        'eligibility' => null,
        'offer_program_configuration' => null,
        'program_type' => null,
        'vendor_codes' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'sku' => false,
        'asin' => false,
        'marketplace_id' => false,
        'eligibility' => false,
        'offer_program_configuration' => false,
        'program_type' => false,
        'vendor_codes' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'sku',
        'asin' => 'asin',
        'marketplace_id' => 'marketplaceId',
        'eligibility' => 'eligibility',
        'offer_program_configuration' => 'offerProgramConfiguration',
        'program_type' => 'programType',
        'vendor_codes' => 'vendorCodes',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
        'asin' => 'setAsin',
        'marketplace_id' => 'setMarketplaceId',
        'eligibility' => 'setEligibility',
        'offer_program_configuration' => 'setOfferProgramConfiguration',
        'program_type' => 'setProgramType',
        'vendor_codes' => 'setVendorCodes',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
        'asin' => 'getAsin',
        'marketplace_id' => 'getMarketplaceId',
        'eligibility' => 'getEligibility',
        'offer_program_configuration' => 'getOfferProgramConfiguration',
        'program_type' => 'getProgramType',
        'vendor_codes' => 'getVendorCodes',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('asin', $data ?? [], null);
        $this->setIfExists('marketplace_id', $data ?? [], null);
        $this->setIfExists('eligibility', $data ?? [], null);
        $this->setIfExists('offer_program_configuration', $data ?? [], null);
        $this->setIfExists('program_type', $data ?? [], null);
        $this->setIfExists('vendor_codes', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets sku.
     *
     * @return null|string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku.
     *
     * @param null|string $sku The SKU. This property is only supported for sellers and not for vendors.
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets asin.
     *
     * @return null|string
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin.
     *
     * @param null|string $asin the Amazon Standard Identification Number (ASIN)
     *
     * @return self
     */
    public function setAsin($asin)
    {
        if (is_null($asin)) {
            throw new \InvalidArgumentException('non-nullable asin cannot be null');
        }
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets marketplace_id.
     *
     * @return null|string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplace_id'];
    }

    /**
     * Sets marketplace_id.
     *
     * @param null|string $marketplace_id The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
     *
     * @return self
     */
    public function setMarketplaceId($marketplace_id)
    {
        if (is_null($marketplace_id)) {
            throw new \InvalidArgumentException('non-nullable marketplace_id cannot be null');
        }
        $this->container['marketplace_id'] = $marketplace_id;

        return $this;
    }

    /**
     * Gets eligibility.
     *
     * @return null|EligibilityStatus
     */
    public function getEligibility()
    {
        return $this->container['eligibility'];
    }

    /**
     * Sets eligibility.
     *
     * @param null|EligibilityStatus $eligibility eligibility
     *
     * @return self
     */
    public function setEligibility($eligibility)
    {
        if (is_null($eligibility)) {
            throw new \InvalidArgumentException('non-nullable eligibility cannot be null');
        }
        $this->container['eligibility'] = $eligibility;

        return $this;
    }

    /**
     * Gets offer_program_configuration.
     *
     * @return null|OfferProgramConfiguration
     */
    public function getOfferProgramConfiguration()
    {
        return $this->container['offer_program_configuration'];
    }

    /**
     * Sets offer_program_configuration.
     *
     * @param null|OfferProgramConfiguration $offer_program_configuration offer_program_configuration
     *
     * @return self
     */
    public function setOfferProgramConfiguration($offer_program_configuration)
    {
        if (is_null($offer_program_configuration)) {
            throw new \InvalidArgumentException('non-nullable offer_program_configuration cannot be null');
        }
        $this->container['offer_program_configuration'] = $offer_program_configuration;

        return $this;
    }

    /**
     * Gets program_type.
     *
     * @return null|ProgramType
     */
    public function getProgramType()
    {
        return $this->container['program_type'];
    }

    /**
     * Sets program_type.
     *
     * @param null|ProgramType $program_type program_type
     *
     * @return self
     */
    public function setProgramType($program_type)
    {
        if (is_null($program_type)) {
            throw new \InvalidArgumentException('non-nullable program_type cannot be null');
        }
        $this->container['program_type'] = $program_type;

        return $this;
    }

    /**
     * Gets vendor_codes.
     *
     * @return null|string[]
     */
    public function getVendorCodes()
    {
        return $this->container['vendor_codes'];
    }

    /**
     * Sets vendor_codes.
     *
     * @param null|string[] $vendor_codes a list of vendor codes associated with the offer
     *
     * @return self
     */
    public function setVendorCodes($vendor_codes)
    {
        if (is_null($vendor_codes)) {
            throw new \InvalidArgumentException('non-nullable vendor_codes cannot be null');
        }
        $this->container['vendor_codes'] = $vendor_codes;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
