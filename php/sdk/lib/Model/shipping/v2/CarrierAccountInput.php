<?php

/**
 * CarrierAccountInput.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Amazon Shipping API.
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\shipping\v2;

use SpApi\ObjectSerializer;

/**
 * CarrierAccountInput Class Doc Comment.
 *
 * @category Class
 *
 * @description Info About CarrierAccountInput
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class CarrierAccountInput implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'CarrierAccountInput';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'description_localization_key' => 'string',
        'name' => 'string',
        'group_name' => 'string',
        'input_type' => '\SpApi\Model\shipping\v2\InputType',
        'is_mandatory' => 'bool',
        'is_confidential' => 'bool',
        'is_hidden' => 'bool',
        'validation_metadata' => '\SpApi\Model\shipping\v2\ValidationMetadata[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'description_localization_key' => null,
        'name' => null,
        'group_name' => null,
        'input_type' => null,
        'is_mandatory' => null,
        'is_confidential' => null,
        'is_hidden' => null,
        'validation_metadata' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'description_localization_key' => false,
        'name' => false,
        'group_name' => false,
        'input_type' => false,
        'is_mandatory' => false,
        'is_confidential' => false,
        'is_hidden' => false,
        'validation_metadata' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description_localization_key' => 'descriptionLocalizationKey',
        'name' => 'name',
        'group_name' => 'groupName',
        'input_type' => 'inputType',
        'is_mandatory' => 'isMandatory',
        'is_confidential' => 'isConfidential',
        'is_hidden' => 'isHidden',
        'validation_metadata' => 'validationMetadata',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'description_localization_key' => 'setDescriptionLocalizationKey',
        'name' => 'setName',
        'group_name' => 'setGroupName',
        'input_type' => 'setInputType',
        'is_mandatory' => 'setIsMandatory',
        'is_confidential' => 'setIsConfidential',
        'is_hidden' => 'setIsHidden',
        'validation_metadata' => 'setValidationMetadata',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'description_localization_key' => 'getDescriptionLocalizationKey',
        'name' => 'getName',
        'group_name' => 'getGroupName',
        'input_type' => 'getInputType',
        'is_mandatory' => 'getIsMandatory',
        'is_confidential' => 'getIsConfidential',
        'is_hidden' => 'getIsHidden',
        'validation_metadata' => 'getValidationMetadata',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description_localization_key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
        $this->setIfExists('input_type', $data ?? [], null);
        $this->setIfExists('is_mandatory', $data ?? [], null);
        $this->setIfExists('is_confidential', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('validation_metadata', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets description_localization_key.
     *
     * @return null|string
     */
    public function getDescriptionLocalizationKey()
    {
        return $this->container['description_localization_key'];
    }

    /**
     * Sets description_localization_key.
     *
     * @param null|string $description_localization_key descriptionLocalizationKey value
     *
     * @return self
     */
    public function setDescriptionLocalizationKey($description_localization_key)
    {
        if (is_null($description_localization_key)) {
            throw new \InvalidArgumentException('non-nullable description_localization_key cannot be null');
        }
        $this->container['description_localization_key'] = $description_localization_key;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return null|string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name.
     *
     * @param null|string $name name value
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets group_name.
     *
     * @return null|string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name.
     *
     * @param null|string $group_name groupName value
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (is_null($group_name)) {
            throw new \InvalidArgumentException('non-nullable group_name cannot be null');
        }
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets input_type.
     *
     * @return null|InputType
     */
    public function getInputType()
    {
        return $this->container['input_type'];
    }

    /**
     * Sets input_type.
     *
     * @param null|InputType $input_type input_type
     *
     * @return self
     */
    public function setInputType($input_type)
    {
        if (is_null($input_type)) {
            throw new \InvalidArgumentException('non-nullable input_type cannot be null');
        }
        $this->container['input_type'] = $input_type;

        return $this;
    }

    /**
     * Gets is_mandatory.
     *
     * @return null|bool
     */
    public function getIsMandatory()
    {
        return $this->container['is_mandatory'];
    }

    /**
     * Sets is_mandatory.
     *
     * @param null|bool $is_mandatory mandatory or not  value
     *
     * @return self
     */
    public function setIsMandatory($is_mandatory)
    {
        if (is_null($is_mandatory)) {
            throw new \InvalidArgumentException('non-nullable is_mandatory cannot be null');
        }
        $this->container['is_mandatory'] = $is_mandatory;

        return $this;
    }

    /**
     * Gets is_confidential.
     *
     * @return null|bool
     */
    public function getIsConfidential()
    {
        return $this->container['is_confidential'];
    }

    /**
     * Sets is_confidential.
     *
     * @param null|bool $is_confidential is value is Confidential
     *
     * @return self
     */
    public function setIsConfidential($is_confidential)
    {
        if (is_null($is_confidential)) {
            throw new \InvalidArgumentException('non-nullable is_confidential cannot be null');
        }
        $this->container['is_confidential'] = $is_confidential;

        return $this;
    }

    /**
     * Gets is_hidden.
     *
     * @return null|bool
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden.
     *
     * @param null|bool $is_hidden is value is hidden
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        if (is_null($is_hidden)) {
            throw new \InvalidArgumentException('non-nullable is_hidden cannot be null');
        }
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets validation_metadata.
     *
     * @return null|ValidationMetadata[]
     */
    public function getValidationMetadata()
    {
        return $this->container['validation_metadata'];
    }

    /**
     * Sets validation_metadata.
     *
     * @param null|ValidationMetadata[] $validation_metadata A list of ValidationMetadata
     *
     * @return self
     */
    public function setValidationMetadata($validation_metadata)
    {
        if (is_null($validation_metadata)) {
            throw new \InvalidArgumentException('non-nullable validation_metadata cannot be null');
        }
        $this->container['validation_metadata'] = $validation_metadata;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
