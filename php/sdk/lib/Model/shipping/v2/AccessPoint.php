<?php

/**
 * AccessPoint.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Amazon Shipping API.
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\shipping\v2;

use SpApi\ObjectSerializer;

/**
 * AccessPoint Class Doc Comment.
 *
 * @category Class
 *
 * @description Access point details
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class AccessPoint implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    public const ASSISTANCE_TYPE_STAFF_ASSISTED = 'STAFF_ASSISTED';
    public const ASSISTANCE_TYPE_SELF_ASSISTED = 'SELF_ASSISTED';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'AccessPoint';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'access_point_id' => 'string',
        'name' => 'string',
        'timezone' => 'string',
        'type' => '\SpApi\Model\shipping\v2\AccessPointType',
        'accessibility_attributes' => '\SpApi\Model\shipping\v2\AccessibilityAttributes',
        'address' => '\SpApi\Model\shipping\v2\Address',
        'exception_operating_hours' => '\SpApi\Model\shipping\v2\ExceptionOperatingHours[]',
        'assistance_type' => 'string',
        'score' => 'string',
        'standard_operating_hours' => 'array<string,\SpApi\Model\shipping\v2\OperatingHours>',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'access_point_id' => null,
        'name' => null,
        'timezone' => null,
        'type' => null,
        'accessibility_attributes' => null,
        'address' => null,
        'exception_operating_hours' => null,
        'assistance_type' => null,
        'score' => null,
        'standard_operating_hours' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'access_point_id' => false,
        'name' => false,
        'timezone' => false,
        'type' => false,
        'accessibility_attributes' => false,
        'address' => false,
        'exception_operating_hours' => false,
        'assistance_type' => false,
        'score' => false,
        'standard_operating_hours' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_point_id' => 'accessPointId',
        'name' => 'name',
        'timezone' => 'timezone',
        'type' => 'type',
        'accessibility_attributes' => 'accessibilityAttributes',
        'address' => 'address',
        'exception_operating_hours' => 'exceptionOperatingHours',
        'assistance_type' => 'assistanceType',
        'score' => 'score',
        'standard_operating_hours' => 'standardOperatingHours',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'access_point_id' => 'setAccessPointId',
        'name' => 'setName',
        'timezone' => 'setTimezone',
        'type' => 'setType',
        'accessibility_attributes' => 'setAccessibilityAttributes',
        'address' => 'setAddress',
        'exception_operating_hours' => 'setExceptionOperatingHours',
        'assistance_type' => 'setAssistanceType',
        'score' => 'setScore',
        'standard_operating_hours' => 'setStandardOperatingHours',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'access_point_id' => 'getAccessPointId',
        'name' => 'getName',
        'timezone' => 'getTimezone',
        'type' => 'getType',
        'accessibility_attributes' => 'getAccessibilityAttributes',
        'address' => 'getAddress',
        'exception_operating_hours' => 'getExceptionOperatingHours',
        'assistance_type' => 'getAssistanceType',
        'score' => 'getScore',
        'standard_operating_hours' => 'getStandardOperatingHours',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('access_point_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('accessibility_attributes', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('exception_operating_hours', $data ?? [], null);
        $this->setIfExists('assistance_type', $data ?? [], null);
        $this->setIfExists('score', $data ?? [], null);
        $this->setIfExists('standard_operating_hours', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getAssistanceTypeAllowableValues()
    {
        return [
            self::ASSISTANCE_TYPE_STAFF_ASSISTED,
            self::ASSISTANCE_TYPE_SELF_ASSISTED,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAssistanceTypeAllowableValues();
        if (!is_null($this->container['assistance_type']) && !in_array($this->container['assistance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'assistance_type', must be one of '%s'",
                $this->container['assistance_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets access_point_id.
     *
     * @return null|string
     */
    public function getAccessPointId()
    {
        return $this->container['access_point_id'];
    }

    /**
     * Sets access_point_id.
     *
     * @param null|string $access_point_id Unique identifier for the access point
     *
     * @return self
     */
    public function setAccessPointId($access_point_id)
    {
        if (is_null($access_point_id)) {
            throw new \InvalidArgumentException('non-nullable access_point_id cannot be null');
        }
        $this->container['access_point_id'] = $access_point_id;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return null|string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name.
     *
     * @param null|string $name Name of entity (store/hub etc) where this access point is located
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets timezone.
     *
     * @return null|string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone.
     *
     * @param null|string $timezone Timezone of access point
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return null|AccessPointType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param null|AccessPointType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets accessibility_attributes.
     *
     * @return null|AccessibilityAttributes
     */
    public function getAccessibilityAttributes()
    {
        return $this->container['accessibility_attributes'];
    }

    /**
     * Sets accessibility_attributes.
     *
     * @param null|AccessibilityAttributes $accessibility_attributes accessibility_attributes
     *
     * @return self
     */
    public function setAccessibilityAttributes($accessibility_attributes)
    {
        if (is_null($accessibility_attributes)) {
            throw new \InvalidArgumentException('non-nullable accessibility_attributes cannot be null');
        }
        $this->container['accessibility_attributes'] = $accessibility_attributes;

        return $this;
    }

    /**
     * Gets address.
     *
     * @return null|Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address.
     *
     * @param null|Address $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets exception_operating_hours.
     *
     * @return null|ExceptionOperatingHours[]
     */
    public function getExceptionOperatingHours()
    {
        return $this->container['exception_operating_hours'];
    }

    /**
     * Sets exception_operating_hours.
     *
     * @param null|ExceptionOperatingHours[] $exception_operating_hours Exception operating hours for Access Point
     *
     * @return self
     */
    public function setExceptionOperatingHours($exception_operating_hours)
    {
        if (is_null($exception_operating_hours)) {
            throw new \InvalidArgumentException('non-nullable exception_operating_hours cannot be null');
        }
        $this->container['exception_operating_hours'] = $exception_operating_hours;

        return $this;
    }

    /**
     * Gets assistance_type.
     *
     * @return null|string
     */
    public function getAssistanceType()
    {
        return $this->container['assistance_type'];
    }

    /**
     * Sets assistance_type.
     *
     * @param null|string $assistance_type Assistance type enum for Access point i.e. STAFF_ASSISTED or SELF_ASSISTED
     *
     * @return self
     */
    public function setAssistanceType($assistance_type)
    {
        if (is_null($assistance_type)) {
            throw new \InvalidArgumentException('non-nullable assistance_type cannot be null');
        }
        $allowedValues = $this->getAssistanceTypeAllowableValues();
        if (!in_array($assistance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'assistance_type', must be one of '%s'",
                    $assistance_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['assistance_type'] = $assistance_type;

        return $this;
    }

    /**
     * Gets score.
     *
     * @return null|string
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score.
     *
     * @param null|string $score The score of access point, based on proximity to postal code and sorting preference. This can be used to sort access point results on shipper's end.
     *
     * @return self
     */
    public function setScore($score)
    {
        if (is_null($score)) {
            throw new \InvalidArgumentException('non-nullable score cannot be null');
        }
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets standard_operating_hours.
     *
     * @return null|array<string,OperatingHours>
     */
    public function getStandardOperatingHours()
    {
        return $this->container['standard_operating_hours'];
    }

    /**
     * Sets standard_operating_hours.
     *
     * @param null|array<string,OperatingHours> $standard_operating_hours Map of day of the week to operating hours of that day
     *
     * @return self
     */
    public function setStandardOperatingHours($standard_operating_hours)
    {
        if (is_null($standard_operating_hours)) {
            throw new \InvalidArgumentException('non-nullable standard_operating_hours cannot be null');
        }
        $this->container['standard_operating_hours'] = $standard_operating_hours;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
