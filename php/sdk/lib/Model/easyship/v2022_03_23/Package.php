<?php

/**
 * Package.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Easy Ship.
 *
 * Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).
 *
 * The version of the OpenAPI document: 2022-03-23
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\easyship\v2022_03_23;

use SpApi\ObjectSerializer;

/**
 * Package Class Doc Comment.
 *
 * @category Class
 *
 * @description This object contains all the details of the scheduled Easy Ship package.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class Package implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Package';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'scheduled_package_id' => '\SpApi\Model\easyship\v2022_03_23\ScheduledPackageId',
        'package_dimensions' => '\SpApi\Model\easyship\v2022_03_23\Dimensions',
        'package_weight' => '\SpApi\Model\easyship\v2022_03_23\Weight',
        'package_items' => '\SpApi\Model\easyship\v2022_03_23\Item[]',
        'package_time_slot' => '\SpApi\Model\easyship\v2022_03_23\TimeSlot',
        'package_identifier' => 'string',
        'invoice' => '\SpApi\Model\easyship\v2022_03_23\InvoiceData',
        'package_status' => '\SpApi\Model\easyship\v2022_03_23\PackageStatus',
        'tracking_details' => '\SpApi\Model\easyship\v2022_03_23\TrackingDetails',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'scheduled_package_id' => null,
        'package_dimensions' => null,
        'package_weight' => null,
        'package_items' => null,
        'package_time_slot' => null,
        'package_identifier' => null,
        'invoice' => null,
        'package_status' => null,
        'tracking_details' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'scheduled_package_id' => false,
        'package_dimensions' => false,
        'package_weight' => false,
        'package_items' => false,
        'package_time_slot' => false,
        'package_identifier' => false,
        'invoice' => false,
        'package_status' => false,
        'tracking_details' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheduled_package_id' => 'scheduledPackageId',
        'package_dimensions' => 'packageDimensions',
        'package_weight' => 'packageWeight',
        'package_items' => 'packageItems',
        'package_time_slot' => 'packageTimeSlot',
        'package_identifier' => 'packageIdentifier',
        'invoice' => 'invoice',
        'package_status' => 'packageStatus',
        'tracking_details' => 'trackingDetails',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'scheduled_package_id' => 'setScheduledPackageId',
        'package_dimensions' => 'setPackageDimensions',
        'package_weight' => 'setPackageWeight',
        'package_items' => 'setPackageItems',
        'package_time_slot' => 'setPackageTimeSlot',
        'package_identifier' => 'setPackageIdentifier',
        'invoice' => 'setInvoice',
        'package_status' => 'setPackageStatus',
        'tracking_details' => 'setTrackingDetails',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'scheduled_package_id' => 'getScheduledPackageId',
        'package_dimensions' => 'getPackageDimensions',
        'package_weight' => 'getPackageWeight',
        'package_items' => 'getPackageItems',
        'package_time_slot' => 'getPackageTimeSlot',
        'package_identifier' => 'getPackageIdentifier',
        'invoice' => 'getInvoice',
        'package_status' => 'getPackageStatus',
        'tracking_details' => 'getTrackingDetails',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('scheduled_package_id', $data ?? [], null);
        $this->setIfExists('package_dimensions', $data ?? [], null);
        $this->setIfExists('package_weight', $data ?? [], null);
        $this->setIfExists('package_items', $data ?? [], null);
        $this->setIfExists('package_time_slot', $data ?? [], null);
        $this->setIfExists('package_identifier', $data ?? [], null);
        $this->setIfExists('invoice', $data ?? [], null);
        $this->setIfExists('package_status', $data ?? [], null);
        $this->setIfExists('tracking_details', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (null === $this->container['scheduled_package_id']) {
            $invalidProperties[] = "'scheduled_package_id' can't be null";
        }
        if (null === $this->container['package_dimensions']) {
            $invalidProperties[] = "'package_dimensions' can't be null";
        }
        if (null === $this->container['package_weight']) {
            $invalidProperties[] = "'package_weight' can't be null";
        }
        if (!is_null($this->container['package_items']) && (count($this->container['package_items']) > 500)) {
            $invalidProperties[] = "invalid value for 'package_items', number of items must be less than or equal to 500.";
        }

        if (null === $this->container['package_time_slot']) {
            $invalidProperties[] = "'package_time_slot' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets scheduled_package_id.
     *
     * @return ScheduledPackageId
     */
    public function getScheduledPackageId()
    {
        return $this->container['scheduled_package_id'];
    }

    /**
     * Sets scheduled_package_id.
     *
     * @param ScheduledPackageId $scheduled_package_id scheduled_package_id
     *
     * @return self
     */
    public function setScheduledPackageId($scheduled_package_id)
    {
        if (is_null($scheduled_package_id)) {
            throw new \InvalidArgumentException('non-nullable scheduled_package_id cannot be null');
        }
        $this->container['scheduled_package_id'] = $scheduled_package_id;

        return $this;
    }

    /**
     * Gets package_dimensions.
     *
     * @return Dimensions
     */
    public function getPackageDimensions()
    {
        return $this->container['package_dimensions'];
    }

    /**
     * Sets package_dimensions.
     *
     * @param Dimensions $package_dimensions package_dimensions
     *
     * @return self
     */
    public function setPackageDimensions($package_dimensions)
    {
        if (is_null($package_dimensions)) {
            throw new \InvalidArgumentException('non-nullable package_dimensions cannot be null');
        }
        $this->container['package_dimensions'] = $package_dimensions;

        return $this;
    }

    /**
     * Gets package_weight.
     *
     * @return Weight
     */
    public function getPackageWeight()
    {
        return $this->container['package_weight'];
    }

    /**
     * Sets package_weight.
     *
     * @param Weight $package_weight package_weight
     *
     * @return self
     */
    public function setPackageWeight($package_weight)
    {
        if (is_null($package_weight)) {
            throw new \InvalidArgumentException('non-nullable package_weight cannot be null');
        }
        $this->container['package_weight'] = $package_weight;

        return $this;
    }

    /**
     * Gets package_items.
     *
     * @return null|Item[]
     */
    public function getPackageItems()
    {
        return $this->container['package_items'];
    }

    /**
     * Sets package_items.
     *
     * @param null|Item[] $package_items a list of items contained in the package
     *
     * @return self
     */
    public function setPackageItems($package_items)
    {
        if (is_null($package_items)) {
            throw new \InvalidArgumentException('non-nullable package_items cannot be null');
        }

        if (count($package_items) > 500) {
            throw new \InvalidArgumentException('invalid value for $package_items when calling Package., number of items must be less than or equal to 500.');
        }
        $this->container['package_items'] = $package_items;

        return $this;
    }

    /**
     * Gets package_time_slot.
     *
     * @return TimeSlot
     */
    public function getPackageTimeSlot()
    {
        return $this->container['package_time_slot'];
    }

    /**
     * Sets package_time_slot.
     *
     * @param TimeSlot $package_time_slot package_time_slot
     *
     * @return self
     */
    public function setPackageTimeSlot($package_time_slot)
    {
        if (is_null($package_time_slot)) {
            throw new \InvalidArgumentException('non-nullable package_time_slot cannot be null');
        }
        $this->container['package_time_slot'] = $package_time_slot;

        return $this;
    }

    /**
     * Gets package_identifier.
     *
     * @return null|string
     */
    public function getPackageIdentifier()
    {
        return $this->container['package_identifier'];
    }

    /**
     * Sets package_identifier.
     *
     * @param null|string $package_identifier optional seller-created identifier that is printed on the shipping label to help the seller identify the package
     *
     * @return self
     */
    public function setPackageIdentifier($package_identifier)
    {
        if (is_null($package_identifier)) {
            throw new \InvalidArgumentException('non-nullable package_identifier cannot be null');
        }
        $this->container['package_identifier'] = $package_identifier;

        return $this;
    }

    /**
     * Gets invoice.
     *
     * @return null|InvoiceData
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice.
     *
     * @param null|InvoiceData $invoice invoice
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        if (is_null($invoice)) {
            throw new \InvalidArgumentException('non-nullable invoice cannot be null');
        }
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets package_status.
     *
     * @return null|PackageStatus
     */
    public function getPackageStatus()
    {
        return $this->container['package_status'];
    }

    /**
     * Sets package_status.
     *
     * @param null|PackageStatus $package_status package_status
     *
     * @return self
     */
    public function setPackageStatus($package_status)
    {
        if (is_null($package_status)) {
            throw new \InvalidArgumentException('non-nullable package_status cannot be null');
        }
        $this->container['package_status'] = $package_status;

        return $this;
    }

    /**
     * Gets tracking_details.
     *
     * @return null|TrackingDetails
     */
    public function getTrackingDetails()
    {
        return $this->container['tracking_details'];
    }

    /**
     * Sets tracking_details.
     *
     * @param null|TrackingDetails $tracking_details tracking_details
     *
     * @return self
     */
    public function setTrackingDetails($tracking_details)
    {
        if (is_null($tracking_details)) {
            throw new \InvalidArgumentException('non-nullable tracking_details cannot be null');
        }
        $this->container['tracking_details'] = $tracking_details;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
