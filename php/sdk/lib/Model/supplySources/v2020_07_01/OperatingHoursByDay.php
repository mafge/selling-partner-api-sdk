<?php

/**
 * OperatingHoursByDay.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Supply Sources.
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\supplySources\v2020_07_01;

use SpApi\ObjectSerializer;

/**
 * OperatingHoursByDay Class Doc Comment.
 *
 * @category Class
 *
 * @description The operating hours per day
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class OperatingHoursByDay implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'OperatingHoursByDay';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'monday' => '\SpApi\Model\supplySources\v2020_07_01\OperatingHour[]',
        'tuesday' => '\SpApi\Model\supplySources\v2020_07_01\OperatingHour[]',
        'wednesday' => '\SpApi\Model\supplySources\v2020_07_01\OperatingHour[]',
        'thursday' => '\SpApi\Model\supplySources\v2020_07_01\OperatingHour[]',
        'friday' => '\SpApi\Model\supplySources\v2020_07_01\OperatingHour[]',
        'saturday' => '\SpApi\Model\supplySources\v2020_07_01\OperatingHour[]',
        'sunday' => '\SpApi\Model\supplySources\v2020_07_01\OperatingHour[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'monday' => null,
        'tuesday' => null,
        'wednesday' => null,
        'thursday' => null,
        'friday' => null,
        'saturday' => null,
        'sunday' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'monday' => false,
        'tuesday' => false,
        'wednesday' => false,
        'thursday' => false,
        'friday' => false,
        'saturday' => false,
        'sunday' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'monday' => 'monday',
        'tuesday' => 'tuesday',
        'wednesday' => 'wednesday',
        'thursday' => 'thursday',
        'friday' => 'friday',
        'saturday' => 'saturday',
        'sunday' => 'sunday',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'monday' => 'setMonday',
        'tuesday' => 'setTuesday',
        'wednesday' => 'setWednesday',
        'thursday' => 'setThursday',
        'friday' => 'setFriday',
        'saturday' => 'setSaturday',
        'sunday' => 'setSunday',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'monday' => 'getMonday',
        'tuesday' => 'getTuesday',
        'wednesday' => 'getWednesday',
        'thursday' => 'getThursday',
        'friday' => 'getFriday',
        'saturday' => 'getSaturday',
        'sunday' => 'getSunday',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('monday', $data ?? [], null);
        $this->setIfExists('tuesday', $data ?? [], null);
        $this->setIfExists('wednesday', $data ?? [], null);
        $this->setIfExists('thursday', $data ?? [], null);
        $this->setIfExists('friday', $data ?? [], null);
        $this->setIfExists('saturday', $data ?? [], null);
        $this->setIfExists('sunday', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets monday.
     *
     * @return null|OperatingHour[]
     */
    public function getMonday()
    {
        return $this->container['monday'];
    }

    /**
     * Sets monday.
     *
     * @param null|OperatingHour[] $monday a list of Operating Hours
     *
     * @return self
     */
    public function setMonday($monday)
    {
        if (is_null($monday)) {
            throw new \InvalidArgumentException('non-nullable monday cannot be null');
        }
        $this->container['monday'] = $monday;

        return $this;
    }

    /**
     * Gets tuesday.
     *
     * @return null|OperatingHour[]
     */
    public function getTuesday()
    {
        return $this->container['tuesday'];
    }

    /**
     * Sets tuesday.
     *
     * @param null|OperatingHour[] $tuesday a list of Operating Hours
     *
     * @return self
     */
    public function setTuesday($tuesday)
    {
        if (is_null($tuesday)) {
            throw new \InvalidArgumentException('non-nullable tuesday cannot be null');
        }
        $this->container['tuesday'] = $tuesday;

        return $this;
    }

    /**
     * Gets wednesday.
     *
     * @return null|OperatingHour[]
     */
    public function getWednesday()
    {
        return $this->container['wednesday'];
    }

    /**
     * Sets wednesday.
     *
     * @param null|OperatingHour[] $wednesday a list of Operating Hours
     *
     * @return self
     */
    public function setWednesday($wednesday)
    {
        if (is_null($wednesday)) {
            throw new \InvalidArgumentException('non-nullable wednesday cannot be null');
        }
        $this->container['wednesday'] = $wednesday;

        return $this;
    }

    /**
     * Gets thursday.
     *
     * @return null|OperatingHour[]
     */
    public function getThursday()
    {
        return $this->container['thursday'];
    }

    /**
     * Sets thursday.
     *
     * @param null|OperatingHour[] $thursday a list of Operating Hours
     *
     * @return self
     */
    public function setThursday($thursday)
    {
        if (is_null($thursday)) {
            throw new \InvalidArgumentException('non-nullable thursday cannot be null');
        }
        $this->container['thursday'] = $thursday;

        return $this;
    }

    /**
     * Gets friday.
     *
     * @return null|OperatingHour[]
     */
    public function getFriday()
    {
        return $this->container['friday'];
    }

    /**
     * Sets friday.
     *
     * @param null|OperatingHour[] $friday a list of Operating Hours
     *
     * @return self
     */
    public function setFriday($friday)
    {
        if (is_null($friday)) {
            throw new \InvalidArgumentException('non-nullable friday cannot be null');
        }
        $this->container['friday'] = $friday;

        return $this;
    }

    /**
     * Gets saturday.
     *
     * @return null|OperatingHour[]
     */
    public function getSaturday()
    {
        return $this->container['saturday'];
    }

    /**
     * Sets saturday.
     *
     * @param null|OperatingHour[] $saturday a list of Operating Hours
     *
     * @return self
     */
    public function setSaturday($saturday)
    {
        if (is_null($saturday)) {
            throw new \InvalidArgumentException('non-nullable saturday cannot be null');
        }
        $this->container['saturday'] = $saturday;

        return $this;
    }

    /**
     * Gets sunday.
     *
     * @return null|OperatingHour[]
     */
    public function getSunday()
    {
        return $this->container['sunday'];
    }

    /**
     * Sets sunday.
     *
     * @param null|OperatingHour[] $sunday a list of Operating Hours
     *
     * @return self
     */
    public function setSunday($sunday)
    {
        if (is_null($sunday)) {
            throw new \InvalidArgumentException('non-nullable sunday cannot be null');
        }
        $this->container['sunday'] = $sunday;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
