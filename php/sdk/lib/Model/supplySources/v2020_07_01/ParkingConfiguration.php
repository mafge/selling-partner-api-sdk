<?php

/**
 * ParkingConfiguration.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Supply Sources.
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\supplySources\v2020_07_01;

use SpApi\ObjectSerializer;

/**
 * ParkingConfiguration Class Doc Comment.
 *
 * @category Class
 *
 * @description The parking configuration.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class ParkingConfiguration implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'ParkingConfiguration';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'parking_cost_type' => '\SpApi\Model\supplySources\v2020_07_01\ParkingCostType',
        'parking_spot_identification_type' => '\SpApi\Model\supplySources\v2020_07_01\ParkingSpotIdentificationType',
        'number_of_parking_spots' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'parking_cost_type' => null,
        'parking_spot_identification_type' => null,
        'number_of_parking_spots' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'parking_cost_type' => false,
        'parking_spot_identification_type' => false,
        'number_of_parking_spots' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parking_cost_type' => 'parkingCostType',
        'parking_spot_identification_type' => 'parkingSpotIdentificationType',
        'number_of_parking_spots' => 'numberOfParkingSpots',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'parking_cost_type' => 'setParkingCostType',
        'parking_spot_identification_type' => 'setParkingSpotIdentificationType',
        'number_of_parking_spots' => 'setNumberOfParkingSpots',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'parking_cost_type' => 'getParkingCostType',
        'parking_spot_identification_type' => 'getParkingSpotIdentificationType',
        'number_of_parking_spots' => 'getNumberOfParkingSpots',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('parking_cost_type', $data ?? [], null);
        $this->setIfExists('parking_spot_identification_type', $data ?? [], null);
        $this->setIfExists('number_of_parking_spots', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['number_of_parking_spots']) && ($this->container['number_of_parking_spots'] < 0)) {
            $invalidProperties[] = "invalid value for 'number_of_parking_spots', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets parking_cost_type.
     *
     * @return null|ParkingCostType
     */
    public function getParkingCostType()
    {
        return $this->container['parking_cost_type'];
    }

    /**
     * Sets parking_cost_type.
     *
     * @param null|ParkingCostType $parking_cost_type parking_cost_type
     *
     * @return self
     */
    public function setParkingCostType($parking_cost_type)
    {
        if (is_null($parking_cost_type)) {
            throw new \InvalidArgumentException('non-nullable parking_cost_type cannot be null');
        }
        $this->container['parking_cost_type'] = $parking_cost_type;

        return $this;
    }

    /**
     * Gets parking_spot_identification_type.
     *
     * @return null|ParkingSpotIdentificationType
     */
    public function getParkingSpotIdentificationType()
    {
        return $this->container['parking_spot_identification_type'];
    }

    /**
     * Sets parking_spot_identification_type.
     *
     * @param null|ParkingSpotIdentificationType $parking_spot_identification_type parking_spot_identification_type
     *
     * @return self
     */
    public function setParkingSpotIdentificationType($parking_spot_identification_type)
    {
        if (is_null($parking_spot_identification_type)) {
            throw new \InvalidArgumentException('non-nullable parking_spot_identification_type cannot be null');
        }
        $this->container['parking_spot_identification_type'] = $parking_spot_identification_type;

        return $this;
    }

    /**
     * Gets number_of_parking_spots.
     *
     * @return null|int
     */
    public function getNumberOfParkingSpots()
    {
        return $this->container['number_of_parking_spots'];
    }

    /**
     * Sets number_of_parking_spots.
     *
     * @param null|int $number_of_parking_spots an unsigned integer that can be only positive or zero
     *
     * @return self
     */
    public function setNumberOfParkingSpots($number_of_parking_spots)
    {
        if (is_null($number_of_parking_spots)) {
            throw new \InvalidArgumentException('non-nullable number_of_parking_spots cannot be null');
        }

        if ($number_of_parking_spots < 0) {
            throw new \InvalidArgumentException('invalid value for $number_of_parking_spots when calling ParkingConfiguration., must be bigger than or equal to 0.');
        }

        $this->container['number_of_parking_spots'] = $number_of_parking_spots;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
